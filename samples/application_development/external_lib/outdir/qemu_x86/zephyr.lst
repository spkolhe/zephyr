
zephyr.elf:     file format elf32-i386


Disassembly of section text:

00001000 <__start>:
        mov  %eax, %esi			/* low  value */
        mov  %edx, %edi			/* high value */
#endif

	/* Enable write-back caching by clearing the NW and CD bits */
	movl	%cr0, %eax
    1000:	0f 20 c0             	mov    %cr0,%eax
	andl	$0x9fffffff, %eax
    1003:	25 ff ff ff 9f       	and    $0x9fffffff,%eax
	movl	%eax, %cr0
    1008:	0f 22 c0             	mov    %eax,%cr0
	/*
	 * Ensure interrupts are disabled.  Interrupts are enabled when
	 * the first context switch occurs.
	 */

	cli
    100b:	fa                   	cli    
	 * Although the bootloader sets up an Interrupt Descriptor Table (IDT)
	 * and a Global Descriptor Table (GDT), the specification encourages
	 * booted operating systems to setup their own IDT and GDT.
	 */
#if CONFIG_SET_GDT
	lgdt	_gdt_rom		/* load 32-bit operand size GDT */
    100c:	0f 01 15 b0 10 00 00 	lgdtl  0x10b0
#endif
	lidt	_Idt		/* load 32-bit operand size IDT */
    1013:	0f 01 1d 9e 10 00 00 	lidtl  0x109e


#ifdef CONFIG_SET_GDT
	/* If we set our own GDT, update the segment registers as well.
	 */
	movw	$DATA_SEG, %ax	/* data segment selector (entry = 3) */
    101a:	66 b8 10 00          	mov    $0x10,%ax
	movw	%ax, %ds	/* set DS */
    101e:	8e d8                	mov    %eax,%ds
	movw	%ax, %es	/* set ES */
    1020:	8e c0                	mov    %eax,%es
	movw	%ax, %fs	/* set FS */
    1022:	8e e0                	mov    %eax,%fs
	movw	%ax, %gs	/* set GS */
    1024:	8e e8                	mov    %eax,%gs
	movw	%ax, %ss	/* set SS */
    1026:	8e d0                	mov    %eax,%ss

	ljmp	$CODE_SEG, $__csSet	/* set CS = 0x08 */
    1028:	ea 2f 10 00 00 08 00 	ljmp   $0x8,$0x102f

0000102f <__csSet>:
	/*
	 * Force an #NM exception for floating point instructions
	 * since FP support hasn't been configured
	 */

	movl	%cr0, %eax		/* move CR0 to EAX */
    102f:	0f 20 c0             	mov    %cr0,%eax
	orl	$0x2e, %eax		/* CR0[NE+TS+EM+MP]=1 */
    1032:	83 c8 2e             	or     $0x2e,%eax
	movl	%eax, %cr0		/* move EAX to CR0 */
    1035:	0f 22 c0             	mov    %eax,%cr0
	stack_size_dwords = (CONFIG_ISR_STACK_SIZE / 4)
	movl $stack_size_dwords, %ecx
	rep  stosl
#endif

	movl	$_interrupt_stack, %esp
    1038:	bc 00 b0 40 00       	mov    $0x40b000,%esp
#ifdef CONFIG_X86_STACK_PROTECTION
	/* In this configuration, all stacks, including IRQ stack, are declared
	 * with a 4K non-present guard page preceding the stack buffer
	 */
	addl	$(CONFIG_ISR_STACK_SIZE + 4096), %esp
    103d:	81 c4 00 18 00 00    	add    $0x1800,%esp
	/*
	 * copy DATA section from ROM to RAM region
	 *	 DATA is followed by BSS section.
	 */

	movl	$__data_ram_start, %edi /* DATA in RAM (dest) */
    1043:	bf 00 00 40 00       	mov    $0x400000,%edi
	movl	$__data_rom_start, %esi /* DATA in ROM (src) */
    1048:	be 90 45 00 00       	mov    $0x4590,%esi
	movl	$__data_num_words, %ecx /* Size of DATA in quad bytes */
    104d:	b9 18 14 00 00       	mov    $0x1418,%ecx

	call	_x86_data_copy
    1052:	e8 44 00 00 00       	call   109b <_x86_data_copy>
	 * Clear BSS: bzero (__bss_start, __bss_num_words*4)
	 *
	 * It's assumed that BSS size will be a multiple of a long (4 bytes),
	 * and aligned on a double word (32-bit) boundary
	 */
	movl	$__bss_start, %edi	/* load BSS start address */
    1057:	bf 60 50 40 00       	mov    $0x405060,%edi
	movl	$__bss_num_words, %ecx	/* number of quad bytes in .bss */
    105c:	b9 76 00 00 00       	mov    $0x76,%ecx
	call	_x86_bss_zero
    1061:	e8 2f 00 00 00       	call   1095 <_x86_bss_zero>
	call	_x86_bss_zero
#endif

#ifdef CONFIG_GDT_DYNAMIC
	/* activate RAM-based Global Descriptor Table (GDT) */
	lgdt	%ds:_gdt
    1066:	0f 01 15 28 01 40 00 	lgdtl  0x400128
#endif

#ifdef CONFIG_X86_MMU

	/* load the page directory address into the registers*/
	movl $__mmu_tables_start, %eax
    106d:	b8 00 10 40 00       	mov    $0x401000,%eax
	movl %eax, %cr3
    1072:	0f 22 d8             	mov    %eax,%cr3

	/*Set CR4.PAE = 0 (5th bit in CR4*/
	movl %cr4, %eax
    1075:	0f 20 e0             	mov    %cr4,%eax
	andl $CR4_PAE_DISABLE, %eax
    1078:	83 e0 ef             	and    $0xffffffef,%eax
	movl %eax, %cr4
    107b:	0f 22 e0             	mov    %eax,%cr4

	/* set CR0.PG bit (31st bit in CR0)*/
	movl %cr0, %eax
    107e:	0f 20 c0             	mov    %cr0,%eax
	orl $CR0_PAGING_ENABLE, %eax
    1081:	0d 00 00 01 80       	or     $0x80010000,%eax
	movl %eax, %cr0
    1086:	0f 22 c0             	mov    %eax,%cr0

#endif /* CONFIG_X86_MMU */

#ifdef CONFIG_X86_STACK_PROTECTION
	mov $MAIN_TSS, %ax
    1089:	66 b8 18 00          	mov    $0x18,%ax
	ltr %ax
    108d:	0f 00 d8             	ltr    %ax
#endif
	/* Jump to C portion of kernel initialization and never return */

	jmp	_Cstart
    1090:	e9 1b 20 00 00       	jmp    30b0 <_Cstart>

00001095 <_x86_bss_zero>:

#else /* !CONFIG_SSE */

	/* clear out BSS double words (32-bits at a time) */

	xorl	%eax, %eax		/* fill memory with 0 */
    1095:	31 c0                	xor    %eax,%eax
	cld
    1097:	fc                   	cld    
	rep
    1098:	f3 ab                	rep stos %eax,%es:(%edi)
	stosl				/* zero memory per 4 bytes */

#endif /* CONFIG_SSE */
	ret
    109a:	c3                   	ret    

0000109b <_x86_data_copy>:
dataWords:
	movl	%edx, %ecx	/* restore # quad bytes */
	andl	$0x3, %ecx	/* only need to copy at most 3 quad bytes */
  #endif /* CONFIG_SSE */

	rep
    109b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	movsl				/* copy data 4 bytes at a time */
	ret
    109d:	c3                   	ret    

0000109e <_Idt>:
    109e:	ff 07 10 3d 00 00 02 b0 ad 1b 00 00 00 00 fe 4f     ...=...........O
    10ae:	52 e4                                               R.

000010b0 <_gdt_rom>:
    10b0:	17                   	pop    %ss
    10b1:	00 b0 10 00 00 00    	add    %dh,0x10(%eax)
    10b7:	00 ff                	add    %bh,%bh
    10b9:	ff 00                	incl   (%eax)
    10bb:	00 00                	add    %al,(%eax)
    10bd:	9b                   	fwait
    10be:	cf                   	iret   
    10bf:	00 ff                	add    %bh,%bh
    10c1:	ff 00                	incl   (%eax)
    10c3:	00 00                	add    %al,(%eax)
    10c5:	93                   	xchg   %eax,%ebx
    10c6:	cf                   	iret   
	...

000010c8 <_gdt_rom_end>:
    10c8:	66 90                	xchg   %ax,%ax
    10ca:	66 90                	xchg   %ax,%ax
    10cc:	66 90                	xchg   %ax,%ax
    10ce:	66 90                	xchg   %ax,%ax

000010d0 <__udivdi3>:
    10d0:	55                   	push   %ebp
    10d1:	57                   	push   %edi
    10d2:	56                   	push   %esi
    10d3:	53                   	push   %ebx
    10d4:	83 ec 1c             	sub    $0x1c,%esp
    10d7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    10db:	8b 4c 24 34          	mov    0x34(%esp),%ecx
    10df:	8b 7c 24 38          	mov    0x38(%esp),%edi
    10e3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
    10e7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
    10eb:	89 ca                	mov    %ecx,%edx
    10ed:	89 7c 24 08          	mov    %edi,0x8(%esp)
    10f1:	85 f6                	test   %esi,%esi
    10f3:	75 3b                	jne    1130 <__udivdi3+0x60>
    10f5:	39 cf                	cmp    %ecx,%edi
    10f7:	0f 87 c3 00 00 00    	ja     11c0 <__udivdi3+0xf0>
    10fd:	89 fd                	mov    %edi,%ebp
    10ff:	85 ff                	test   %edi,%edi
    1101:	75 0b                	jne    110e <__udivdi3+0x3e>
    1103:	b8 01 00 00 00       	mov    $0x1,%eax
    1108:	31 d2                	xor    %edx,%edx
    110a:	f7 f7                	div    %edi
    110c:	89 c5                	mov    %eax,%ebp
    110e:	89 c8                	mov    %ecx,%eax
    1110:	31 d2                	xor    %edx,%edx
    1112:	f7 f5                	div    %ebp
    1114:	89 c1                	mov    %eax,%ecx
    1116:	89 d8                	mov    %ebx,%eax
    1118:	89 cf                	mov    %ecx,%edi
    111a:	f7 f5                	div    %ebp
    111c:	89 fa                	mov    %edi,%edx
    111e:	83 c4 1c             	add    $0x1c,%esp
    1121:	5b                   	pop    %ebx
    1122:	5e                   	pop    %esi
    1123:	5f                   	pop    %edi
    1124:	5d                   	pop    %ebp
    1125:	c3                   	ret    
    1126:	8d 76 00             	lea    0x0(%esi),%esi
    1129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    1130:	39 ce                	cmp    %ecx,%esi
    1132:	77 7c                	ja     11b0 <__udivdi3+0xe0>
    1134:	0f bd fe             	bsr    %esi,%edi
    1137:	83 f7 1f             	xor    $0x1f,%edi
    113a:	0f 84 90 00 00 00    	je     11d0 <__udivdi3+0x100>
    1140:	bd 20 00 00 00       	mov    $0x20,%ebp
    1145:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    1149:	29 fd                	sub    %edi,%ebp
    114b:	89 f9                	mov    %edi,%ecx
    114d:	d3 e6                	shl    %cl,%esi
    114f:	89 d8                	mov    %ebx,%eax
    1151:	89 e9                	mov    %ebp,%ecx
    1153:	d3 e8                	shr    %cl,%eax
    1155:	09 f0                	or     %esi,%eax
    1157:	89 f9                	mov    %edi,%ecx
    1159:	89 44 24 08          	mov    %eax,0x8(%esp)
    115d:	89 d8                	mov    %ebx,%eax
    115f:	d3 e0                	shl    %cl,%eax
    1161:	89 d3                	mov    %edx,%ebx
    1163:	89 e9                	mov    %ebp,%ecx
    1165:	d3 eb                	shr    %cl,%ebx
    1167:	89 f9                	mov    %edi,%ecx
    1169:	89 de                	mov    %ebx,%esi
    116b:	d3 e2                	shl    %cl,%edx
    116d:	8b 5c 24 04          	mov    0x4(%esp),%ebx
    1171:	89 e9                	mov    %ebp,%ecx
    1173:	d3 eb                	shr    %cl,%ebx
    1175:	09 da                	or     %ebx,%edx
    1177:	89 44 24 0c          	mov    %eax,0xc(%esp)
    117b:	89 d0                	mov    %edx,%eax
    117d:	89 f2                	mov    %esi,%edx
    117f:	f7 74 24 08          	divl   0x8(%esp)
    1183:	89 d6                	mov    %edx,%esi
    1185:	89 c3                	mov    %eax,%ebx
    1187:	f7 64 24 0c          	mull   0xc(%esp)
    118b:	39 d6                	cmp    %edx,%esi
    118d:	72 10                	jb     119f <__udivdi3+0xcf>
    118f:	8b 6c 24 04          	mov    0x4(%esp),%ebp
    1193:	89 f9                	mov    %edi,%ecx
    1195:	d3 e5                	shl    %cl,%ebp
    1197:	39 c5                	cmp    %eax,%ebp
    1199:	73 55                	jae    11f0 <__udivdi3+0x120>
    119b:	39 d6                	cmp    %edx,%esi
    119d:	75 51                	jne    11f0 <__udivdi3+0x120>
    119f:	8d 43 ff             	lea    -0x1(%ebx),%eax
    11a2:	31 ff                	xor    %edi,%edi
    11a4:	89 fa                	mov    %edi,%edx
    11a6:	83 c4 1c             	add    $0x1c,%esp
    11a9:	5b                   	pop    %ebx
    11aa:	5e                   	pop    %esi
    11ab:	5f                   	pop    %edi
    11ac:	5d                   	pop    %ebp
    11ad:	c3                   	ret    
    11ae:	66 90                	xchg   %ax,%ax
    11b0:	31 ff                	xor    %edi,%edi
    11b2:	31 c0                	xor    %eax,%eax
    11b4:	89 fa                	mov    %edi,%edx
    11b6:	83 c4 1c             	add    $0x1c,%esp
    11b9:	5b                   	pop    %ebx
    11ba:	5e                   	pop    %esi
    11bb:	5f                   	pop    %edi
    11bc:	5d                   	pop    %ebp
    11bd:	c3                   	ret    
    11be:	66 90                	xchg   %ax,%ax
    11c0:	89 d8                	mov    %ebx,%eax
    11c2:	f7 f7                	div    %edi
    11c4:	31 ff                	xor    %edi,%edi
    11c6:	89 fa                	mov    %edi,%edx
    11c8:	83 c4 1c             	add    $0x1c,%esp
    11cb:	5b                   	pop    %ebx
    11cc:	5e                   	pop    %esi
    11cd:	5f                   	pop    %edi
    11ce:	5d                   	pop    %ebp
    11cf:	c3                   	ret    
    11d0:	39 ce                	cmp    %ecx,%esi
    11d2:	72 10                	jb     11e4 <__udivdi3+0x114>
    11d4:	8b 5c 24 04          	mov    0x4(%esp),%ebx
    11d8:	31 c0                	xor    %eax,%eax
    11da:	39 5c 24 08          	cmp    %ebx,0x8(%esp)
    11de:	0f 87 38 ff ff ff    	ja     111c <__udivdi3+0x4c>
    11e4:	b8 01 00 00 00       	mov    $0x1,%eax
    11e9:	e9 2e ff ff ff       	jmp    111c <__udivdi3+0x4c>
    11ee:	66 90                	xchg   %ax,%ax
    11f0:	89 d8                	mov    %ebx,%eax
    11f2:	31 ff                	xor    %edi,%edi
    11f4:	e9 23 ff ff ff       	jmp    111c <__udivdi3+0x4c>

000011f9 <main>:
#include <stdio.h>

#include <mylib.h>

void main(void)
{
    11f9:	55                   	push   %ebp
    11fa:	89 e5                	mov    %esp,%ebp
	printf("Hello World!\n");
    11fc:	68 72 39 00 00       	push   $0x3972
    1201:	e8 07 00 00 00       	call   120d <printf>
    1206:	58                   	pop    %eax
	mylib_hello_world();
}
    1207:	c9                   	leave  
	mylib_hello_world();
    1208:	e9 39 0e 00 00       	jmp    2046 <mylib_hello_world>

0000120d <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    120d:	55                   	push   %ebp
    120e:	89 e5                	mov    %esp,%ebp
	va_list vargs;
	int     r;

	va_start(vargs, format);
    1210:	8d 45 0c             	lea    0xc(%ebp),%eax
	r = _prf(fputc, DESC(stdout), format, vargs);
    1213:	50                   	push   %eax
    1214:	ff 75 08             	pushl  0x8(%ebp)
    1217:	6a 02                	push   $0x2
    1219:	68 49 1f 00 00       	push   $0x1f49
    121e:	e8 5f 01 00 00       	call   1382 <_prf>
    1223:	83 c4 10             	add    $0x10,%esp
	va_end(vargs);

	return r;
}
    1226:	c9                   	leave  
    1227:	c3                   	ret    

00001228 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    1228:	55                   	push   %ebp
    1229:	89 e5                	mov    %esp,%ebp
    122b:	57                   	push   %edi
    122c:	56                   	push   %esi
    122d:	89 c6                	mov    %eax,%esi
    122f:	53                   	push   %ebx
    1230:	89 d0                	mov    %edx,%eax
    1232:	53                   	push   %ebx
    1233:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    1236:	89 f3                	mov    %esi,%ebx
	char *buf0 = buf;

	do {
		int d = n % base;

		n /= base;
    1238:	31 d2                	xor    %edx,%edx
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    123a:	43                   	inc    %ebx
		n /= base;
    123b:	f7 75 f0             	divl   -0x10(%ebp)
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    123e:	83 fa 09             	cmp    $0x9,%edx
    1241:	0f 9e c1             	setle  %cl
    1244:	89 cf                	mov    %ecx,%edi
    1246:	4f                   	dec    %edi
    1247:	83 e7 27             	and    $0x27,%edi
	} while (n);
    124a:	85 c0                	test   %eax,%eax
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    124c:	8d 54 17 30          	lea    0x30(%edi,%edx,1),%edx
    1250:	88 53 ff             	mov    %dl,-0x1(%ebx)
	} while (n);
    1253:	75 e3                	jne    1238 <_to_x+0x10>
    1255:	89 d8                	mov    %ebx,%eax
    1257:	29 f0                	sub    %esi,%eax
    1259:	8d 14 06             	lea    (%esi,%eax,1),%edx
	while (end - start < minlen) {
    125c:	39 45 08             	cmp    %eax,0x8(%ebp)
    125f:	7e 07                	jle    1268 <_to_x+0x40>
		*end++ = '0';
    1261:	c6 04 06 30          	movb   $0x30,(%esi,%eax,1)
    1265:	40                   	inc    %eax
    1266:	eb f1                	jmp    1259 <_to_x+0x31>
	*end = 0;
    1268:	c6 02 00             	movb   $0x0,(%edx)
	for (end--; end > start; end--, start++) {
    126b:	4a                   	dec    %edx
    126c:	39 f2                	cmp    %esi,%edx
    126e:	76 0d                	jbe    127d <_to_x+0x55>
		char tmp = *end;
    1270:	8a 1a                	mov    (%edx),%bl
		*end = *start;
    1272:	8a 0e                	mov    (%esi),%cl
    1274:	88 0a                	mov    %cl,(%edx)
	for (end--; end > start; end--, start++) {
    1276:	46                   	inc    %esi
		*start = tmp;
    1277:	88 5e ff             	mov    %bl,-0x1(%esi)
	for (end--; end > start; end--, start++) {
    127a:	4a                   	dec    %edx
    127b:	eb ef                	jmp    126c <_to_x+0x44>
	return _reverse_and_pad(buf0, buf, minlen);
}
    127d:	5a                   	pop    %edx
    127e:	5b                   	pop    %ebx
    127f:	5e                   	pop    %esi
    1280:	5f                   	pop    %edi
    1281:	5d                   	pop    %ebp
    1282:	c3                   	ret    

00001283 <_rlrshift>:

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
    1283:	55                   	push   %ebp
	*v = (*v & 1) + (*v >> 1);
    1284:	8b 08                	mov    (%eax),%ecx
{
    1286:	89 e5                	mov    %esp,%ebp
	*v = (*v & 1) + (*v >> 1);
    1288:	89 ca                	mov    %ecx,%edx
{
    128a:	57                   	push   %edi
    128b:	56                   	push   %esi
    128c:	53                   	push   %ebx
	*v = (*v & 1) + (*v >> 1);
    128d:	8b 58 04             	mov    0x4(%eax),%ebx
    1290:	0f ac d9 01          	shrd   $0x1,%ebx,%ecx
    1294:	83 e2 01             	and    $0x1,%edx
    1297:	31 ff                	xor    %edi,%edi
    1299:	d1 eb                	shr    %ebx
    129b:	01 d1                	add    %edx,%ecx
    129d:	11 fb                	adc    %edi,%ebx
    129f:	89 08                	mov    %ecx,(%eax)
    12a1:	89 58 04             	mov    %ebx,0x4(%eax)
}
    12a4:	5b                   	pop    %ebx
    12a5:	5e                   	pop    %esi
    12a6:	5f                   	pop    %edi
    12a7:	5d                   	pop    %ebp
    12a8:	c3                   	ret    

000012a9 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
    12a9:	55                   	push   %ebp
    12aa:	89 e5                	mov    %esp,%ebp
    12ac:	57                   	push   %edi
    12ad:	56                   	push   %esi
    12ae:	53                   	push   %ebx
    12af:	83 ec 14             	sub    $0x14,%esp
    12b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    12b5:	8b 50 04             	mov    0x4(%eax),%edx
    12b8:	8b 00                	mov    (%eax),%eax
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
    12ba:	83 c0 02             	add    $0x2,%eax
    12bd:	83 d2 00             	adc    $0x0,%edx
    12c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    12c3:	89 55 e8             	mov    %edx,-0x18(%ebp)
	uint64_t rem = *v, quot = 0, q;
    12c6:	31 f6                	xor    %esi,%esi
    12c8:	31 ff                	xor    %edi,%edi

	for (i = 0; i < 3; i++) {
    12ca:	31 db                	xor    %ebx,%ebx
		hi = rem >> shifts[i];
    12cc:	0f be 83 63 39 00 00 	movsbl 0x3963(%ebx),%eax
    12d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    12d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
    12d9:	8a 4d ec             	mov    -0x14(%ebp),%cl
    12dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    12df:	0f ad d0             	shrd   %cl,%edx,%eax
    12e2:	d3 ea                	shr    %cl,%edx
    12e4:	f6 c1 20             	test   $0x20,%cl
    12e7:	74 02                	je     12eb <_ldiv5+0x42>
    12e9:	89 d0                	mov    %edx,%eax
		q = (uint64_t)(hi / 5) << shifts[i];
    12eb:	b9 05 00 00 00       	mov    $0x5,%ecx
    12f0:	31 d2                	xor    %edx,%edx
    12f2:	f7 f1                	div    %ecx
    12f4:	8a 4d ec             	mov    -0x14(%ebp),%cl
    12f7:	31 d2                	xor    %edx,%edx
    12f9:	0f a5 c2             	shld   %cl,%eax,%edx
    12fc:	d3 e0                	shl    %cl,%eax
    12fe:	f6 c1 20             	test   $0x20,%cl
    1301:	74 04                	je     1307 <_ldiv5+0x5e>
    1303:	89 c2                	mov    %eax,%edx
    1305:	31 c0                	xor    %eax,%eax
    1307:	89 45 ec             	mov    %eax,-0x14(%ebp)
    130a:	89 55 f0             	mov    %edx,-0x10(%ebp)
		rem -= q * 5;
    130d:	b8 05 00 00 00       	mov    $0x5,%eax
    1312:	6b 4d f0 05          	imul   $0x5,-0x10(%ebp),%ecx
    1316:	f7 65 ec             	mull   -0x14(%ebp)
    1319:	01 ca                	add    %ecx,%edx
    131b:	29 45 e4             	sub    %eax,-0x1c(%ebp)
    131e:	19 55 e8             	sbb    %edx,-0x18(%ebp)
		quot += q;
    1321:	03 75 ec             	add    -0x14(%ebp),%esi
    1324:	13 7d f0             	adc    -0x10(%ebp),%edi
	for (i = 0; i < 3; i++) {
    1327:	43                   	inc    %ebx
    1328:	83 fb 03             	cmp    $0x3,%ebx
    132b:	75 9f                	jne    12cc <_ldiv5+0x23>
	}

	*v = quot;
    132d:	8b 45 e0             	mov    -0x20(%ebp),%eax
    1330:	89 30                	mov    %esi,(%eax)
    1332:	89 78 04             	mov    %edi,0x4(%eax)
}
    1335:	83 c4 14             	add    $0x14,%esp
    1338:	5b                   	pop    %ebx
    1339:	5e                   	pop    %esi
    133a:	5f                   	pop    %edi
    133b:	5d                   	pop    %ebp
    133c:	c3                   	ret    

0000133d <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
    133d:	55                   	push   %ebp
    133e:	89 e5                	mov    %esp,%ebp
    1340:	57                   	push   %edi
    1341:	56                   	push   %esi
    1342:	53                   	push   %ebx
    1343:	89 c6                	mov    %eax,%esi
	int		rval;

	if (*digit_count > 0) {
    1345:	8b 02                	mov    (%edx),%eax
    1347:	85 c0                	test   %eax,%eax
    1349:	7e 2d                	jle    1378 <_get_digit+0x3b>
		*digit_count -= 1;
    134b:	48                   	dec    %eax
		*fr = *fr * 10;
    134c:	b9 0a 00 00 00       	mov    $0xa,%ecx
		*digit_count -= 1;
    1351:	89 02                	mov    %eax,(%edx)
		*fr = *fr * 10;
    1353:	89 c8                	mov    %ecx,%eax
    1355:	f7 26                	mull   (%esi)
    1357:	6b 7e 04 0a          	imul   $0xa,0x4(%esi),%edi
    135b:	89 d3                	mov    %edx,%ebx
    135d:	89 c1                	mov    %eax,%ecx
    135f:	01 fb                	add    %edi,%ebx
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1361:	89 0e                	mov    %ecx,(%esi)
		rval = ((*fr >> 60) & 0xF) + '0';
    1363:	89 d8                	mov    %ebx,%eax
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1365:	89 da                	mov    %ebx,%edx
		rval = ((*fr >> 60) & 0xF) + '0';
    1367:	c1 e8 1c             	shr    $0x1c,%eax
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    136a:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
		rval = ((*fr >> 60) & 0xF) + '0';
    1370:	83 c0 30             	add    $0x30,%eax
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1373:	89 56 04             	mov    %edx,0x4(%esi)
    1376:	eb 05                	jmp    137d <_get_digit+0x40>
	} else
		rval = '0';
    1378:	b8 30 00 00 00       	mov    $0x30,%eax
	return (char) (rval);
}
    137d:	5b                   	pop    %ebx
    137e:	5e                   	pop    %esi
    137f:	5f                   	pop    %edi
    1380:	5d                   	pop    %ebp
    1381:	c3                   	ret    

00001382 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    1382:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    1386:	83 e4 f8             	and    $0xfffffff8,%esp
    1389:	ff 71 fc             	pushl  -0x4(%ecx)
    138c:	55                   	push   %ebp
    138d:	89 e5                	mov    %esp,%ebp
    138f:	57                   	push   %edi
    1390:	56                   	push   %esi
    1391:	53                   	push   %ebx
    1392:	51                   	push   %ecx
    1393:	81 ec 20 01 00 00    	sub    $0x120,%esp
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    1399:	c7 85 ec fe ff ff 00 	movl   $0x0,-0x114(%ebp)
    13a0:	00 00 00 
{
    13a3:	8b 01                	mov    (%ecx),%eax
    13a5:	8b 51 08             	mov    0x8(%ecx),%edx
    13a8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
    13ae:	8b 41 04             	mov    0x4(%ecx),%eax
    13b1:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
    13b7:	8b 71 0c             	mov    0xc(%ecx),%esi

	while ((c = *format++)) {
    13ba:	8d 42 01             	lea    0x1(%edx),%eax
    13bd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
    13c3:	0f be 02             	movsbl (%edx),%eax
    13c6:	85 c0                	test   %eax,%eax
    13c8:	0f 84 54 0b 00 00    	je     1f22 <__data_num_words+0xb0a>
		if (c != '%') {
    13ce:	83 f8 25             	cmp    $0x25,%eax
    13d1:	75 31                	jne    1404 <_prf+0x82>
    13d3:	c6 85 f3 fe ff ff 20 	movb   $0x20,-0x10d(%ebp)
    13da:	c7 85 e4 fe ff ff 00 	movl   $0x0,-0x11c(%ebp)
    13e1:	00 00 00 
    13e4:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%ebp)
    13eb:	00 00 00 
    13ee:	c7 85 e0 fe ff ff 00 	movl   $0x0,-0x120(%ebp)
    13f5:	00 00 00 
    13f8:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%ebp)
    13ff:	00 00 00 
    1402:	eb 4b                	jmp    144f <__data_num_words+0x37>
			if ((*func) (c, dest) == EOF) {
    1404:	ff b5 d4 fe ff ff    	pushl  -0x12c(%ebp)
    140a:	50                   	push   %eax
    140b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
    1411:	ff d0                	call   *%eax
    1413:	5b                   	pop    %ebx
    1414:	40                   	inc    %eax
    1415:	5f                   	pop    %edi
    1416:	75 0f                	jne    1427 <__data_num_words+0xf>
				return EOF;
    1418:	c7 85 ec fe ff ff ff 	movl   $0xffffffff,-0x114(%ebp)
    141f:	ff ff ff 
    1422:	e9 fb 0a 00 00       	jmp    1f22 <__data_num_words+0xb0a>
			}

			count++;
    1427:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
    142d:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
    1433:	40                   	inc    %eax
    1434:	e9 45 02 00 00       	jmp    167e <__data_num_words+0x266>
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
				switch (c) {
    1439:	80 fa 23             	cmp    $0x23,%dl
    143c:	74 75                	je     14b3 <__data_num_words+0x9b>
    143e:	7e 44                	jle    1484 <__data_num_words+0x6c>
    1440:	80 fa 2d             	cmp    $0x2d,%dl
    1443:	75 58                	jne    149d <__data_num_words+0x85>
				case '-':
					fminus = true;
    1445:	c7 85 e0 fe ff ff 01 	movl   $0x1,-0x120(%ebp)
    144c:	00 00 00 
		if (c != '%') {
    144f:	8b bd 04 ff ff ff    	mov    -0xfc(%ebp),%edi
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1455:	ff 85 04 ff ff ff    	incl   -0xfc(%ebp)
    145b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
    1461:	0f be 58 ff          	movsbl -0x1(%eax),%ebx
    1465:	53                   	push   %ebx
    1466:	88 9d 0c ff ff ff    	mov    %bl,-0xf4(%ebp)
    146c:	68 58 39 00 00       	push   $0x3958
    1471:	e8 e8 0a 00 00       	call   1f5e <strchr>
    1476:	5a                   	pop    %edx
    1477:	85 c0                	test   %eax,%eax
    1479:	59                   	pop    %ecx
    147a:	8a 95 0c ff ff ff    	mov    -0xf4(%ebp),%dl
    1480:	75 b7                	jne    1439 <__data_num_words+0x21>
    1482:	eb 44                	jmp    14c8 <__data_num_words+0xb0>
				switch (c) {
    1484:	84 d2                	test   %dl,%dl
    1486:	0f 84 96 0a 00 00    	je     1f22 <__data_num_words+0xb0a>
    148c:	80 fa 20             	cmp    $0x20,%dl
    148f:	75 be                	jne    144f <__data_num_words+0x37>
				case '+':
					fplus = true;
					break;

				case ' ':
					fspace = true;
    1491:	c7 85 e4 fe ff ff 01 	movl   $0x1,-0x11c(%ebp)
    1498:	00 00 00 
					break;
    149b:	eb b2                	jmp    144f <__data_num_words+0x37>
				switch (c) {
    149d:	80 fa 30             	cmp    $0x30,%dl
    14a0:	74 1d                	je     14bf <__data_num_words+0xa7>
    14a2:	80 fa 2b             	cmp    $0x2b,%dl
    14a5:	75 a8                	jne    144f <__data_num_words+0x37>
					fplus = true;
    14a7:	c7 85 e8 fe ff ff 01 	movl   $0x1,-0x118(%ebp)
    14ae:	00 00 00 
					break;
    14b1:	eb 9c                	jmp    144f <__data_num_words+0x37>

				case '#':
					falt = true;
    14b3:	c7 85 08 ff ff ff 01 	movl   $0x1,-0xf8(%ebp)
    14ba:	00 00 00 
					break;
    14bd:	eb 90                	jmp    144f <__data_num_words+0x37>

				case '0':
					pad = '0';
    14bf:	c6 85 f3 fe ff ff 30 	movb   $0x30,-0x10d(%ebp)
					break;
    14c6:	eb 87                	jmp    144f <__data_num_words+0x37>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
    14c8:	83 fb 2a             	cmp    $0x2a,%ebx
    14cb:	75 35                	jne    1502 <__data_num_words+0xea>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
    14cd:	8b 0e                	mov    (%esi),%ecx
    14cf:	8d 46 04             	lea    0x4(%esi),%eax
    14d2:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
				if (width < 0) {
    14d8:	85 c9                	test   %ecx,%ecx
    14da:	79 10                	jns    14ec <__data_num_words+0xd4>
					fminus = true;
					width = -width;
    14dc:	f7 9d f8 fe ff ff    	negl   -0x108(%ebp)
					fminus = true;
    14e2:	c7 85 e0 fe ff ff 01 	movl   $0x1,-0x120(%ebp)
    14e9:	00 00 00 
				}
				c = *format++;
    14ec:	8b 8d 04 ff ff ff    	mov    -0xfc(%ebp),%ecx
				width = (int32_t) va_arg(vargs, int32_t);
    14f2:	89 c6                	mov    %eax,%esi
				c = *format++;
    14f4:	8d 47 02             	lea    0x2(%edi),%eax
    14f7:	0f be 19             	movsbl (%ecx),%ebx
    14fa:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
    1500:	eb 39                	jmp    153b <__data_num_words+0x123>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    1502:	8d 43 d0             	lea    -0x30(%ebx),%eax
			} else if (!isdigit(c))
				width = 0;
    1505:	c7 85 f8 fe ff ff 00 	movl   $0x0,-0x108(%ebp)
    150c:	00 00 00 
			} else if (!isdigit(c))
    150f:	83 f8 09             	cmp    $0x9,%eax
    1512:	77 3d                	ja     1551 <__data_num_words+0x139>
	while (isdigit(((int) *p)))
    1514:	0f be 1f             	movsbl (%edi),%ebx
    1517:	8d 7f 01             	lea    0x1(%edi),%edi
    151a:	8d 43 d0             	lea    -0x30(%ebx),%eax
    151d:	83 f8 09             	cmp    $0x9,%eax
    1520:	77 13                	ja     1535 <__data_num_words+0x11d>
		i = 10 * i + *p++ - '0';
    1522:	6b 85 f8 fe ff ff 0a 	imul   $0xa,-0x108(%ebp),%eax
    1529:	8d 44 03 d0          	lea    -0x30(%ebx,%eax,1),%eax
    152d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
    1533:	eb df                	jmp    1514 <__data_num_words+0xfc>
			else {
				width = _atoi(&format);	/* Find width */
				c = *format++;
    1535:	89 bd 04 ff ff ff    	mov    %edi,-0xfc(%ebp)
			 * If <width> is INT_MIN, then its absolute value can
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
    153b:	81 bd f8 fe ff ff c8 	cmpl   $0xc8,-0x108(%ebp)
    1542:	00 00 00 
    1545:	76 0a                	jbe    1551 <__data_num_words+0x139>
				width = MAXFLD;
    1547:	c7 85 f8 fe ff ff c8 	movl   $0xc8,-0x108(%ebp)
    154e:	00 00 00 
			precision = -1;	/* No precision specified   */
    1551:	c7 85 0c ff ff ff ff 	movl   $0xffffffff,-0xf4(%ebp)
    1558:	ff ff ff 
			}

			if (c == '.') {
    155b:	83 fb 2e             	cmp    $0x2e,%ebx
    155e:	75 6c                	jne    15cc <__data_num_words+0x1b4>
				c = *format++;
				if (c == '*') {
    1560:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
    1566:	80 38 2a             	cmpb   $0x2a,(%eax)
    1569:	74 0c                	je     1577 <__data_num_words+0x15f>
    156b:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%ebp)
    1572:	00 00 00 
    1575:	eb 14                	jmp    158b <__data_num_words+0x173>
					precision = (int32_t)
    1577:	8b 0e                	mov    (%esi),%ecx
				c = *format++;
    1579:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
    157f:	40                   	inc    %eax
					precision = (int32_t)
    1580:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%ebp)
    1586:	83 c6 04             	add    $0x4,%esi
    1589:	eb 1f                	jmp    15aa <__data_num_words+0x192>
	while (isdigit(((int) *p)))
    158b:	0f be 10             	movsbl (%eax),%edx
    158e:	8d 4a d0             	lea    -0x30(%edx),%ecx
    1591:	83 f9 09             	cmp    $0x9,%ecx
    1594:	77 14                	ja     15aa <__data_num_words+0x192>
		i = 10 * i + *p++ - '0';
    1596:	6b 8d 0c ff ff ff 0a 	imul   $0xa,-0xf4(%ebp),%ecx
    159d:	40                   	inc    %eax
    159e:	8d 4c 0a d0          	lea    -0x30(%edx,%ecx,1),%ecx
    15a2:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%ebp)
    15a8:	eb e1                	jmp    158b <__data_num_words+0x173>
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
    15aa:	81 bd 0c ff ff ff c8 	cmpl   $0xc8,-0xf4(%ebp)
    15b1:	00 00 00 
    15b4:	7e 0a                	jle    15c0 <__data_num_words+0x1a8>
					precision = -1;
    15b6:	c7 85 0c ff ff ff ff 	movl   $0xffffffff,-0xf4(%ebp)
    15bd:	ff ff ff 
				c = *format++;
    15c0:	8d 48 01             	lea    0x1(%eax),%ecx
    15c3:	0f be 18             	movsbl (%eax),%ebx
    15c6:	89 8d 04 ff ff ff    	mov    %ecx,-0xfc(%ebp)
			 *    L: long double
			 *    z: size_t or ssize_t
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
    15cc:	53                   	push   %ebx
    15cd:	68 5e 39 00 00       	push   $0x395e
    15d2:	e8 87 09 00 00       	call   1f5e <strchr>
    15d7:	59                   	pop    %ecx
    15d8:	85 c0                	test   %eax,%eax
    15da:	5f                   	pop    %edi
    15db:	0f 84 b4 00 00 00    	je     1695 <__data_num_words+0x27d>
				i = c;
				c = *format++;
    15e1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
    15e7:	40                   	inc    %eax
    15e8:	0f be 58 ff          	movsbl -0x1(%eax),%ebx
    15ec:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
    15f2:	e9 9e 00 00 00       	jmp    1695 <__data_num_words+0x27d>
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
    15f7:	0f 8e 5e 08 00 00    	jle    1e5b <__data_num_words+0xa43>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    15fd:	8d 46 04             	lea    0x4(%esi),%eax
    1600:	8b 16                	mov    (%esi),%edx
    1602:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
	if (alt_form) {
    1608:	83 bd 08 ff ff ff 00 	cmpl   $0x0,-0xf8(%ebp)
    160f:	0f 84 f9 07 00 00    	je     1e0e <__data_num_words+0x9f6>
		*buf++ = '0';
    1615:	c6 85 27 ff ff ff 30 	movb   $0x30,-0xd9(%ebp)
    161c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
		if (!value) {
    1622:	85 d2                	test   %edx,%edx
    1624:	0f 85 ea 07 00 00    	jne    1e14 <__data_num_words+0x9fc>
			prefix = 0;
    162a:	31 db                	xor    %ebx,%ebx
			*buf++ = 0;
    162c:	c6 85 28 ff ff ff 00 	movb   $0x0,-0xd8(%ebp)
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
    1633:	83 bd 0c ff ff ff ff 	cmpl   $0xffffffff,-0xf4(%ebp)
    163a:	74 07                	je     1643 <__data_num_words+0x22b>
					pad = ' ';
    163c:	c6 85 f3 fe ff ff 20 	movb   $0x20,-0x10d(%ebp)

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
    1643:	8b 8d 08 ff ff ff    	mov    -0xf8(%ebp),%ecx
    1649:	39 8d f8 fe ff ff    	cmp    %ecx,-0x108(%ebp)
    164f:	0f 8f 9c 05 00 00    	jg     1bf1 <__data_num_words+0x7d9>
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
    1655:	8d b5 27 ff ff ff    	lea    -0xd9(%ebp),%esi
    165b:	8b 9d ec fe ff ff    	mov    -0x114(%ebp),%ebx
    1661:	29 f3                	sub    %esi,%ebx
    1663:	8b 95 08 ff ff ff    	mov    -0xf8(%ebp),%edx
    1669:	8d bd 27 ff ff ff    	lea    -0xd9(%ebp),%edi
    166f:	29 f2                	sub    %esi,%edx
    1671:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
    1674:	01 fa                	add    %edi,%edx
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
    1676:	85 d2                	test   %edx,%edx
    1678:	0f 8f fc 05 00 00    	jg     1c7a <__data_num_words+0x862>
			switch (c) {
    167e:	8b b5 fc fe ff ff    	mov    -0x104(%ebp),%esi
    1684:	8b 95 04 ff ff ff    	mov    -0xfc(%ebp),%edx
    168a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
    1690:	e9 25 fd ff ff       	jmp    13ba <_prf+0x38>
    1695:	83 fb 67             	cmp    $0x67,%ebx
    1698:	0f 8f 3a 07 00 00    	jg     1dd8 <__data_num_words+0x9c0>
    169e:	83 fb 65             	cmp    $0x65,%ebx
    16a1:	0f 8c f4 05 00 00    	jl     1c9b <__data_num_words+0x883>
				u.d = (double) va_arg(vargs, double);
    16a7:	8d 46 08             	lea    0x8(%esi),%eax
				double_temp = u.i;
    16aa:	8b 56 04             	mov    0x4(%esi),%edx
				u.d = (double) va_arg(vargs, double);
    16ad:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
				double_temp = u.i;
    16b3:	8b 06                	mov    (%esi),%eax
	fract = (double_temp << 11) & ~HIGHBIT64;
    16b5:	89 c6                	mov    %eax,%esi
	exp = double_temp >> 52 & 0x7ff;
    16b7:	89 d1                	mov    %edx,%ecx
    16b9:	c1 e9 14             	shr    $0x14,%ecx
	fract = (double_temp << 11) & ~HIGHBIT64;
    16bc:	89 d7                	mov    %edx,%edi
    16be:	0f a4 f7 0b          	shld   $0xb,%esi,%edi
    16c2:	81 e7 ff ff ff 7f    	and    $0x7fffffff,%edi
	exp = double_temp >> 52 & 0x7ff;
    16c8:	81 e1 ff 07 00 00    	and    $0x7ff,%ecx
	fract = (double_temp << 11) & ~HIGHBIT64;
    16ce:	c1 e6 0b             	shl    $0xb,%esi
    16d1:	89 bd 18 ff ff ff    	mov    %edi,-0xe8(%ebp)
    16d7:	89 f0                	mov    %esi,%eax
    16d9:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
	if (exp == 0x7ff) {
    16df:	81 f9 ff 07 00 00    	cmp    $0x7ff,%ecx
    16e5:	75 53                	jne    173a <__data_num_words+0x322>
		if (!fract) {
    16e7:	09 c7                	or     %eax,%edi
    16e9:	75 2c                	jne    1717 <__data_num_words+0x2ff>
			*buf++ = sign ? '-' : '+';
    16eb:	c1 fa 1f             	sar    $0x1f,%edx
			*buf++ = 'I';
    16ee:	c6 85 28 ff ff ff 49 	movb   $0x49,-0xd8(%ebp)
			*buf++ = sign ? '-' : '+';
    16f5:	83 e2 02             	and    $0x2,%edx
			*buf++ = 'N';
    16f8:	c6 85 29 ff ff ff 4e 	movb   $0x4e,-0xd7(%ebp)
			*buf++ = sign ? '-' : '+';
    16ff:	83 c2 2b             	add    $0x2b,%edx
			*buf++ = 'F';
    1702:	c6 85 2a ff ff ff 46 	movb   $0x46,-0xd6(%ebp)
			*buf++ = sign ? '-' : '+';
    1709:	88 95 27 ff ff ff    	mov    %dl,-0xd9(%ebp)
			*buf++ = 'F';
    170f:	8d 85 2b ff ff ff    	lea    -0xd5(%ebp),%eax
    1715:	eb 1b                	jmp    1732 <__data_num_words+0x31a>
			*buf++ = 'N';
    1717:	c6 85 27 ff ff ff 4e 	movb   $0x4e,-0xd9(%ebp)
			*buf++ = 'a';
    171e:	c6 85 28 ff ff ff 61 	movb   $0x61,-0xd8(%ebp)
			*buf++ = 'N';
    1725:	c6 85 29 ff ff ff 4e 	movb   $0x4e,-0xd7(%ebp)
    172c:	8d 85 2a ff ff ff    	lea    -0xd6(%ebp),%eax
		*buf = 0;
    1732:	c6 00 00             	movb   $0x0,(%eax)
    1735:	e9 04 04 00 00       	jmp    1b3e <__data_num_words+0x726>
	if ((exp | fract) != 0) {
    173a:	89 ce                	mov    %ecx,%esi
    173c:	09 c6                	or     %eax,%esi
    173e:	09 fe                	or     %edi,%esi
    1740:	74 1f                	je     1761 <__data_num_words+0x349>
		fract |= HIGHBIT64;
    1742:	81 cf 00 00 00 80    	or     $0x80000000,%edi
    1748:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    174e:	8d b1 02 fc ff ff    	lea    -0x3fe(%ecx),%esi
		fract |= HIGHBIT64;
    1754:	89 bd 18 ff ff ff    	mov    %edi,-0xe8(%ebp)
		decexp = true;		/* Wasn't zero */
    175a:	b8 01 00 00 00       	mov    $0x1,%eax
    175f:	eb 04                	jmp    1765 <__data_num_words+0x34d>
	if ((exp | fract) != 0) {
    1761:	31 f6                	xor    %esi,%esi
		decexp = false;		/* It was zero */
    1763:	31 c0                	xor    %eax,%eax
	if (decexp && sign) {
    1765:	c1 ea 1f             	shr    $0x1f,%edx
    1768:	74 0d                	je     1777 <__data_num_words+0x35f>
    176a:	85 c0                	test   %eax,%eax
    176c:	74 09                	je     1777 <__data_num_words+0x35f>
		*buf++ = '-';
    176e:	c6 85 27 ff ff ff 2d 	movb   $0x2d,-0xd9(%ebp)
    1775:	eb 2e                	jmp    17a5 <__data_num_words+0x38d>
	} else if (fplus) {
    1777:	83 bd e8 fe ff ff 00 	cmpl   $0x0,-0x118(%ebp)
    177e:	74 09                	je     1789 <__data_num_words+0x371>
		*buf++ = '+';
    1780:	c6 85 27 ff ff ff 2b 	movb   $0x2b,-0xd9(%ebp)
    1787:	eb 1c                	jmp    17a5 <__data_num_words+0x38d>
	} else if (fspace) {
    1789:	8d 85 27 ff ff ff    	lea    -0xd9(%ebp),%eax
    178f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
    1795:	83 bd e4 fe ff ff 00 	cmpl   $0x0,-0x11c(%ebp)
    179c:	74 13                	je     17b1 <__data_num_words+0x399>
		*buf++ = ' ';
    179e:	c6 85 27 ff ff ff 20 	movb   $0x20,-0xd9(%ebp)
    17a5:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
    17ab:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
	decexp = 0;
    17b1:	c7 85 00 ff ff ff 00 	movl   $0x0,-0x100(%ebp)
    17b8:	00 00 00 
	while (exp <= -3) {
    17bb:	83 fe fe             	cmp    $0xfffffffe,%esi
    17be:	7d 76                	jge    1836 <__data_num_words+0x41e>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    17c0:	8b 8d 18 ff ff ff    	mov    -0xe8(%ebp),%ecx
    17c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
    17cc:	81 f9 32 33 33 33    	cmp    $0x33333332,%ecx
    17d2:	76 0e                	jbe    17e2 <__data_num_words+0x3ca>
			_rlrshift(&fract);
    17d4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
			exp++;
    17da:	46                   	inc    %esi
			_rlrshift(&fract);
    17db:	e8 a3 fa ff ff       	call   1283 <_rlrshift>
    17e0:	eb de                	jmp    17c0 <__data_num_words+0x3a8>
		fract *= 5;
    17e2:	ba 05 00 00 00       	mov    $0x5,%edx
    17e7:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
    17ea:	f7 e2                	mul    %edx
		decexp--;
    17ec:	ff 8d 00 ff ff ff    	decl   -0x100(%ebp)
		fract *= 5;
    17f2:	01 ca                	add    %ecx,%edx
    17f4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
    17fa:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%ebp)
		exp++;
    1800:	46                   	inc    %esi
		decexp--;
    1801:	31 c9                	xor    %ecx,%ecx
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1803:	81 fa ff ff ff 7f    	cmp    $0x7fffffff,%edx
    1809:	77 09                	ja     1814 <__data_num_words+0x3fc>
			fract <<= 1;
    180b:	01 c0                	add    %eax,%eax
    180d:	b1 01                	mov    $0x1,%cl
    180f:	11 d2                	adc    %edx,%edx
			exp--;
    1811:	4e                   	dec    %esi
    1812:	eb ef                	jmp    1803 <__data_num_words+0x3eb>
    1814:	84 c9                	test   %cl,%cl
    1816:	74 a3                	je     17bb <__data_num_words+0x3a3>
    1818:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
    181e:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%ebp)
    1824:	eb 95                	jmp    17bb <__data_num_words+0x3a3>
    1826:	84 c9                	test   %cl,%cl
    1828:	74 0c                	je     1836 <__data_num_words+0x41e>
    182a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
    1830:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%ebp)
	while (exp > 0) {
    1836:	85 f6                	test   %esi,%esi
    1838:	7e 31                	jle    186b <__data_num_words+0x453>
		_ldiv5(&fract);
    183a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
		exp--;
    1840:	4e                   	dec    %esi
		_ldiv5(&fract);
    1841:	e8 63 fa ff ff       	call   12a9 <_ldiv5>
		decexp++;
    1846:	ff 85 00 ff ff ff    	incl   -0x100(%ebp)
    184c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
    1852:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
    1858:	31 c9                	xor    %ecx,%ecx
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    185a:	81 fa ff ff ff 7f    	cmp    $0x7fffffff,%edx
    1860:	77 c4                	ja     1826 <__data_num_words+0x40e>
			fract <<= 1;
    1862:	01 c0                	add    %eax,%eax
    1864:	b1 01                	mov    $0x1,%cl
    1866:	11 d2                	adc    %edx,%edx
			exp--;
    1868:	4e                   	dec    %esi
    1869:	eb ef                	jmp    185a <__data_num_words+0x442>
		_rlrshift(&fract);
    186b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
		exp++;
    1871:	46                   	inc    %esi
		_rlrshift(&fract);
    1872:	e8 0c fa ff ff       	call   1283 <_rlrshift>
	while (exp < (0 + 4)) {
    1877:	83 fe 04             	cmp    $0x4,%esi
    187a:	75 ef                	jne    186b <__data_num_words+0x453>
	if (precision < 0)
    187c:	83 bd 0c ff ff ff 00 	cmpl   $0x0,-0xf4(%ebp)
    1883:	79 0a                	jns    188f <__data_num_words+0x477>
		precision = 6;		/* Default precision if none given */
    1885:	c7 85 0c ff ff ff 06 	movl   $0x6,-0xf4(%ebp)
    188c:	00 00 00 
	if ((c == 'g') || (c == 'G')) {
    188f:	89 d8                	mov    %ebx,%eax
    1891:	83 e0 df             	and    $0xffffffdf,%eax
    1894:	83 f8 47             	cmp    $0x47,%eax
    1897:	75 47                	jne    18e0 <__data_num_words+0x4c8>
		if (!falt && (precision > 0))
    1899:	31 d2                	xor    %edx,%edx
    189b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
    18a1:	83 f0 01             	xor    $0x1,%eax
    18a4:	83 bd 0c ff ff ff 00 	cmpl   $0x0,-0xf4(%ebp)
    18ab:	0f 9f c2             	setg   %dl
	prune_zero = false;		/* Assume trailing 0's allowed     */
    18ae:	21 c2                	and    %eax,%edx
    18b0:	89 95 dc fe ff ff    	mov    %edx,-0x124(%ebp)
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    18b6:	83 bd 00 ff ff ff fd 	cmpl   $0xfffffffd,-0x100(%ebp)
    18bd:	7c 0f                	jl     18ce <__data_num_words+0x4b6>
    18bf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
    18c5:	40                   	inc    %eax
    18c6:	39 85 00 ff ff ff    	cmp    %eax,-0x100(%ebp)
    18cc:	7e 21                	jle    18ef <__data_num_words+0x4d7>
				c = 'E';
    18ce:	83 fb 67             	cmp    $0x67,%ebx
    18d1:	0f 94 c3             	sete   %bl
    18d4:	0f b6 db             	movzbl %bl,%ebx
    18d7:	4b                   	dec    %ebx
    18d8:	83 e3 e0             	and    $0xffffffe0,%ebx
    18db:	83 c3 65             	add    $0x65,%ebx
    18de:	eb 26                	jmp    1906 <__data_num_words+0x4ee>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    18e0:	c7 85 dc fe ff ff 00 	movl   $0x0,-0x124(%ebp)
    18e7:	00 00 00 
	if (c == 'f') {
    18ea:	83 fb 66             	cmp    $0x66,%ebx
    18ed:	75 17                	jne    1906 <__data_num_words+0x4ee>
    18ef:	8b b5 00 ff ff ff    	mov    -0x100(%ebp),%esi
    18f5:	03 b5 0c ff ff ff    	add    -0xf4(%ebp),%esi
    18fb:	79 02                	jns    18ff <__data_num_words+0x4e7>
    18fd:	31 f6                	xor    %esi,%esi
		exp = precision + decexp;
    18ff:	bb 66 00 00 00       	mov    $0x66,%ebx
    1904:	eb 09                	jmp    190f <__data_num_words+0x4f7>
		exp = precision + 1;
    1906:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
    190c:	8d 70 01             	lea    0x1(%eax),%esi
	digit_count = 16;
    190f:	c7 85 10 ff ff ff 10 	movl   $0x10,-0xf0(%ebp)
    1916:	00 00 00 
	ltemp = 0x0800000000000000;
    1919:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
    1920:	00 00 00 
    1923:	c7 85 20 ff ff ff 00 	movl   $0x8000000,-0xe0(%ebp)
    192a:	00 00 08 
    192d:	83 fe 10             	cmp    $0x10,%esi
    1930:	7e 05                	jle    1937 <__data_num_words+0x51f>
    1932:	be 10 00 00 00       	mov    $0x10,%esi
	while (exp--) {
    1937:	85 f6                	test   %esi,%esi
    1939:	74 19                	je     1954 <__data_num_words+0x53c>
		_ldiv5(&ltemp);
    193b:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
    1941:	4e                   	dec    %esi
    1942:	e8 62 f9 ff ff       	call   12a9 <_ldiv5>
		_rlrshift(&ltemp);
    1947:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
    194d:	e8 31 f9 ff ff       	call   1283 <_rlrshift>
    1952:	eb e3                	jmp    1937 <__data_num_words+0x51f>
	fract += ltemp;
    1954:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
    195a:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
    1960:	03 85 14 ff ff ff    	add    -0xec(%ebp),%eax
    1966:	13 95 18 ff ff ff    	adc    -0xe8(%ebp),%edx
    196c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
	if ((fract >> 32) & 0xF0000000) {
    1972:	89 d0                	mov    %edx,%eax
	fract += ltemp;
    1974:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%ebp)
	if ((fract >> 32) & 0xF0000000) {
    197a:	a9 00 00 00 f0       	test   $0xf0000000,%eax
    197f:	74 1c                	je     199d <__data_num_words+0x585>
		_ldiv5(&fract);
    1981:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    1987:	e8 1d f9 ff ff       	call   12a9 <_ldiv5>
		_rlrshift(&fract);
    198c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    1992:	e8 ec f8 ff ff       	call   1283 <_rlrshift>
		decexp++;
    1997:	ff 85 00 ff ff ff    	incl   -0x100(%ebp)
	if (c == 'f') {
    199d:	83 fb 66             	cmp    $0x66,%ebx
    19a0:	0f 85 bb 00 00 00    	jne    1a61 <__data_num_words+0x649>
		if (decexp > 0) {
    19a6:	83 bd 00 ff ff ff 00 	cmpl   $0x0,-0x100(%ebp)
    19ad:	7e 37                	jle    19e6 <__data_num_words+0x5ce>
    19af:	8b b5 00 ff ff ff    	mov    -0x100(%ebp),%esi
    19b5:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
    19bb:	03 b5 f4 fe ff ff    	add    -0x10c(%ebp),%esi
				*buf++ = _get_digit(&fract, &digit_count);
    19c1:	8d 95 10 ff ff ff    	lea    -0xf0(%ebp),%edx
    19c7:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    19cd:	e8 6b f9 ff ff       	call   133d <_get_digit>
    19d2:	47                   	inc    %edi
			while (decexp > 0) {
    19d3:	39 fe                	cmp    %edi,%esi
				*buf++ = _get_digit(&fract, &digit_count);
    19d5:	88 47 ff             	mov    %al,-0x1(%edi)
			while (decexp > 0) {
    19d8:	75 e7                	jne    19c1 <__data_num_words+0x5a9>
    19da:	c7 85 00 ff ff ff 00 	movl   $0x0,-0x100(%ebp)
    19e1:	00 00 00 
    19e4:	eb 0c                	jmp    19f2 <__data_num_words+0x5da>
			*buf++ = '0';
    19e6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
    19ec:	8d 78 01             	lea    0x1(%eax),%edi
    19ef:	c6 00 30             	movb   $0x30,(%eax)
		if (falt || (precision > 0))
    19f2:	83 bd 0c ff ff ff 00 	cmpl   $0x0,-0xf4(%ebp)
    19f9:	7f 0d                	jg     1a08 <__data_num_words+0x5f0>
    19fb:	f6 85 08 ff ff ff 01 	testb  $0x1,-0xf8(%ebp)
    1a02:	0f 84 f5 04 00 00    	je     1efd <__data_num_words+0xae5>
			*buf++ = '.';
    1a08:	c6 07 2e             	movb   $0x2e,(%edi)
    1a0b:	8d 77 02             	lea    0x2(%edi),%esi
    1a0e:	8b 8d 0c ff ff ff    	mov    -0xf4(%ebp),%ecx
		while (precision-- > 0) {
    1a14:	49                   	dec    %ecx
    1a15:	83 f9 ff             	cmp    $0xffffffff,%ecx
    1a18:	74 38                	je     1a52 <__data_num_words+0x63a>
			if (decexp < 0) {
    1a1a:	83 bd 00 ff ff ff 00 	cmpl   $0x0,-0x100(%ebp)
    1a21:	74 0c                	je     1a2f <__data_num_words+0x617>
				*buf++ = '0';
    1a23:	c6 46 ff 30          	movb   $0x30,-0x1(%esi)
				decexp++;
    1a27:	ff 85 00 ff ff ff    	incl   -0x100(%ebp)
    1a2d:	eb 20                	jmp    1a4f <__data_num_words+0x637>
				*buf++ = _get_digit(&fract, &digit_count);
    1a2f:	8d 95 10 ff ff ff    	lea    -0xf0(%ebp),%edx
    1a35:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    1a3b:	89 8d 08 ff ff ff    	mov    %ecx,-0xf8(%ebp)
    1a41:	e8 f7 f8 ff ff       	call   133d <_get_digit>
    1a46:	8b 8d 08 ff ff ff    	mov    -0xf8(%ebp),%ecx
    1a4c:	88 46 ff             	mov    %al,-0x1(%esi)
    1a4f:	46                   	inc    %esi
    1a50:	eb c2                	jmp    1a14 <__data_num_words+0x5fc>
    1a52:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
    1a58:	8d 7c 07 01          	lea    0x1(%edi,%eax,1),%edi
    1a5c:	e9 9c 04 00 00       	jmp    1efd <__data_num_words+0xae5>
		*buf = _get_digit(&fract, &digit_count);
    1a61:	8d 95 10 ff ff ff    	lea    -0xf0(%ebp),%edx
    1a67:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    1a6d:	e8 cb f8 ff ff       	call   133d <_get_digit>
    1a72:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
			decexp--;
    1a78:	3c 30                	cmp    $0x30,%al
		*buf = _get_digit(&fract, &digit_count);
    1a7a:	88 07                	mov    %al,(%edi)
			decexp--;
    1a7c:	0f 95 c0             	setne  %al
    1a7f:	0f b6 c0             	movzbl %al,%eax
    1a82:	29 85 00 ff ff ff    	sub    %eax,-0x100(%ebp)
		if (falt || (precision > 0))
    1a88:	83 bd 0c ff ff ff 00 	cmpl   $0x0,-0xf4(%ebp)
    1a8f:	7f 0a                	jg     1a9b <__data_num_words+0x683>
		if (*buf++ != '0')
    1a91:	47                   	inc    %edi
		if (falt || (precision > 0))
    1a92:	f6 85 08 ff ff ff 01 	testb  $0x1,-0xf8(%ebp)
    1a99:	74 30                	je     1acb <__data_num_words+0x6b3>
			*buf++ = '.';
    1a9b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
    1aa1:	8b b5 0c ff ff ff    	mov    -0xf4(%ebp),%esi
    1aa7:	8d 78 02             	lea    0x2(%eax),%edi
    1aaa:	c6 40 01 2e          	movb   $0x2e,0x1(%eax)
    1aae:	01 fe                	add    %edi,%esi
		while (precision-- > 0)
    1ab0:	39 fe                	cmp    %edi,%esi
    1ab2:	74 17                	je     1acb <__data_num_words+0x6b3>
			*buf++ = _get_digit(&fract, &digit_count);
    1ab4:	8d 95 10 ff ff ff    	lea    -0xf0(%ebp),%edx
    1aba:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
    1ac0:	e8 78 f8 ff ff       	call   133d <_get_digit>
    1ac5:	47                   	inc    %edi
    1ac6:	88 47 ff             	mov    %al,-0x1(%edi)
    1ac9:	eb e5                	jmp    1ab0 <__data_num_words+0x698>
	if (prune_zero) {
    1acb:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%ebp)
    1ad2:	74 11                	je     1ae5 <__data_num_words+0x6cd>
		while (*--buf == '0')
    1ad4:	89 f8                	mov    %edi,%eax
    1ad6:	4f                   	dec    %edi
    1ad7:	8a 17                	mov    (%edi),%dl
    1ad9:	80 fa 30             	cmp    $0x30,%dl
    1adc:	74 f6                	je     1ad4 <__data_num_words+0x6bc>
		if (*buf != '.')
    1ade:	80 fa 2e             	cmp    $0x2e,%dl
    1ae1:	74 02                	je     1ae5 <__data_num_words+0x6cd>
    1ae3:	89 c7                	mov    %eax,%edi
	if ((c == 'e') || (c == 'E')) {
    1ae5:	89 d8                	mov    %ebx,%eax
    1ae7:	83 e0 df             	and    $0xffffffdf,%eax
    1aea:	83 f8 45             	cmp    $0x45,%eax
    1aed:	75 4a                	jne    1b39 <__data_num_words+0x721>
		*buf++ = (char) c;
    1aef:	88 1f                	mov    %bl,(%edi)
    1af1:	8d 4f 02             	lea    0x2(%edi),%ecx
		if (decexp < 0) {
    1af4:	83 bd 00 ff ff ff 00 	cmpl   $0x0,-0x100(%ebp)
    1afb:	79 0c                	jns    1b09 <__data_num_words+0x6f1>
			decexp = -decexp;
    1afd:	f7 9d 00 ff ff ff    	negl   -0x100(%ebp)
			*buf++ = '-';
    1b03:	c6 47 01 2d          	movb   $0x2d,0x1(%edi)
    1b07:	eb 04                	jmp    1b0d <__data_num_words+0x6f5>
			*buf++ = '+';
    1b09:	c6 47 01 2b          	movb   $0x2b,0x1(%edi)
		*buf++ = (char) ((decexp / 100) + '0');
    1b0d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
    1b13:	be 64 00 00 00       	mov    $0x64,%esi
    1b18:	99                   	cltd   
    1b19:	f7 fe                	idiv   %esi
    1b1b:	83 c0 30             	add    $0x30,%eax
		*buf++ = (char) ((decexp / 10) + '0');
    1b1e:	bb 0a 00 00 00       	mov    $0xa,%ebx
		*buf++ = (char) ((decexp / 100) + '0');
    1b23:	88 01                	mov    %al,(%ecx)
		*buf++ = (char) ((decexp / 10) + '0');
    1b25:	89 d0                	mov    %edx,%eax
    1b27:	99                   	cltd   
    1b28:	f7 fb                	idiv   %ebx
    1b2a:	83 c0 30             	add    $0x30,%eax
		*buf++ = (char) (decexp + '0');
    1b2d:	83 c2 30             	add    $0x30,%edx
		*buf++ = (char) ((decexp / 10) + '0');
    1b30:	88 41 01             	mov    %al,0x1(%ecx)
		*buf++ = (char) (decexp + '0');
    1b33:	8d 79 03             	lea    0x3(%ecx),%edi
    1b36:	88 51 02             	mov    %dl,0x2(%ecx)
	*buf = 0;
    1b39:	c6 07 00             	movb   $0x0,(%edi)
	return buf - start;
    1b3c:	89 f8                	mov    %edi,%eax
    1b3e:	8d 8d 27 ff ff ff    	lea    -0xd9(%ebp),%ecx
				if (fplus || fspace || (buf[0] == '-'))
    1b44:	8b 9d e8 fe ff ff    	mov    -0x118(%ebp),%ebx
	return buf - start;
    1b4a:	29 c8                	sub    %ecx,%eax
				if (fplus || fspace || (buf[0] == '-'))
    1b4c:	0b 9d e4 fe ff ff    	or     -0x11c(%ebp),%ebx
    1b52:	0f 85 83 00 00 00    	jne    1bdb <__data_num_words+0x7c3>
    1b58:	31 db                	xor    %ebx,%ebx
    1b5a:	80 bd 27 ff ff ff 2d 	cmpb   $0x2d,-0xd9(%ebp)
    1b61:	0f 94 c3             	sete   %bl
    1b64:	eb 75                	jmp    1bdb <__data_num_words+0x7c3>
			switch (c) {
    1b66:	0f 8e e8 01 00 00    	jle    1d54 <__data_num_words+0x93c>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    1b6c:	8d 46 04             	lea    0x4(%esi),%eax
    1b6f:	8b 1e                	mov    (%esi),%ebx
    1b71:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
	if (value < 0) {
    1b77:	85 db                	test   %ebx,%ebx
    1b79:	0f 89 9f 01 00 00    	jns    1d1e <__data_num_words+0x906>
		*buf++ = '-';
    1b7f:	c6 85 27 ff ff ff 2d 	movb   $0x2d,-0xd9(%ebp)
		if (value != 0x80000000)
    1b86:	ba 00 00 00 80       	mov    $0x80000000,%edx
    1b8b:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
    1b91:	74 04                	je     1b97 <__data_num_words+0x77f>
			value = -value;
    1b93:	89 da                	mov    %ebx,%edx
    1b95:	f7 da                	neg    %edx
		*buf++ = ' ';
    1b97:	8d bd 28 ff ff ff    	lea    -0xd8(%ebp),%edi
	return _to_x(buf, value, 10, precision);
    1b9d:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
    1ba3:	b9 0a 00 00 00       	mov    $0xa,%ecx
    1ba8:	89 f8                	mov    %edi,%eax
				if (fplus || fspace || (int32_temp < 0))
    1baa:	c1 eb 1f             	shr    $0x1f,%ebx
	return _to_x(buf, value, 10, precision);
    1bad:	e8 76 f6 ff ff       	call   1228 <_to_x>
    1bb2:	5a                   	pop    %edx
			prefix = 0;
    1bb3:	8b 95 e8 fe ff ff    	mov    -0x118(%ebp),%edx
    1bb9:	0b 95 e4 fe ff ff    	or     -0x11c(%ebp),%edx
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    1bbf:	01 f8                	add    %edi,%eax
    1bc1:	8d 8d 27 ff ff ff    	lea    -0xd9(%ebp),%ecx
			prefix = 0;
    1bc7:	09 d3                	or     %edx,%ebx
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    1bc9:	29 c8                	sub    %ecx,%eax
				if (precision != -1)
    1bcb:	83 bd 0c ff ff ff ff 	cmpl   $0xffffffff,-0xf4(%ebp)
    1bd2:	74 07                	je     1bdb <__data_num_words+0x7c3>
					pad = ' ';
    1bd4:	c6 85 f3 fe ff ff 20 	movb   $0x20,-0x10d(%ebp)
			if (c >= MAXFLD + 1)
    1bdb:	3d c8 00 00 00       	cmp    $0xc8,%eax
    1be0:	0f 8f 32 f8 ff ff    	jg     1418 <__data_num_words>
    1be6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
    1bec:	e9 52 fa ff ff       	jmp    1643 <__data_num_words+0x22b>
					if (fminus)	{
    1bf1:	83 bd e0 fe ff ff 00 	cmpl   $0x0,-0x120(%ebp)
    1bf8:	74 27                	je     1c21 <__data_num_words+0x809>
							buf[i] = ' ';
    1bfa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
						for (i = c; i < width; i++)
    1c00:	ff 85 08 ff ff ff    	incl   -0xf8(%ebp)
    1c06:	8b 9d 08 ff ff ff    	mov    -0xf8(%ebp),%ebx
							buf[i] = ' ';
    1c0c:	c6 84 28 27 ff ff ff 	movb   $0x20,-0xd9(%eax,%ebp,1)
    1c13:	20 
						for (i = c; i < width; i++)
    1c14:	39 9d f8 fe ff ff    	cmp    %ebx,-0x108(%ebp)
    1c1a:	75 de                	jne    1bfa <__data_num_words+0x7e2>
    1c1c:	e9 34 fa ff ff       	jmp    1655 <__data_num_words+0x23d>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1c21:	8b b5 f8 fe ff ff    	mov    -0x108(%ebp),%esi
										+ 1));
    1c27:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1c2d:	2b b5 08 ff ff ff    	sub    -0xf8(%ebp),%esi
										+ 1));
    1c33:	40                   	inc    %eax
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1c34:	50                   	push   %eax
    1c35:	8d 85 27 ff ff ff    	lea    -0xd9(%ebp),%eax
    1c3b:	50                   	push   %eax
    1c3c:	01 f0                	add    %esi,%eax
    1c3e:	50                   	push   %eax
    1c3f:	e8 5f 03 00 00       	call   1fa3 <memmove>
    1c44:	83 c4 0c             	add    $0xc,%esp
						if (pad == ' ')
    1c47:	80 bd f3 fe ff ff 20 	cmpb   $0x20,-0x10d(%ebp)
    1c4e:	75 02                	jne    1c52 <__data_num_words+0x83a>
							prefix = 0;
    1c50:	31 db                	xor    %ebx,%ebx
						c = width - c + prefix;
    1c52:	8d 04 33             	lea    (%ebx,%esi,1),%eax
						for (i = prefix; i < c; i++)
    1c55:	39 c3                	cmp    %eax,%ebx
    1c57:	7d 10                	jge    1c69 <__data_num_words+0x851>
							buf[i] = pad;
    1c59:	8a 8d f3 fe ff ff    	mov    -0x10d(%ebp),%cl
						for (i = prefix; i < c; i++)
    1c5f:	43                   	inc    %ebx
							buf[i] = pad;
    1c60:	88 8c 2b 26 ff ff ff 	mov    %cl,-0xda(%ebx,%ebp,1)
    1c67:	eb ec                	jmp    1c55 <__data_num_words+0x83d>
    1c69:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
    1c6f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
    1c75:	e9 db f9 ff ff       	jmp    1655 <__data_num_words+0x23d>
					if ((*func)(*cptr, dest) == EOF)
    1c7a:	ff b5 d4 fe ff ff    	pushl  -0x12c(%ebp)
    1c80:	0f be 06             	movsbl (%esi),%eax
    1c83:	50                   	push   %eax
    1c84:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
    1c8a:	ff d0                	call   *%eax
    1c8c:	5a                   	pop    %edx
    1c8d:	40                   	inc    %eax
    1c8e:	59                   	pop    %ecx
    1c8f:	0f 84 83 f7 ff ff    	je     1418 <__data_num_words>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    1c95:	46                   	inc    %esi
    1c96:	e9 c8 f9 ff ff       	jmp    1663 <__data_num_words+0x24b>
			switch (c) {
    1c9b:	83 fb 47             	cmp    $0x47,%ebx
    1c9e:	0f 84 03 fa ff ff    	je     16a7 <__data_num_words+0x28f>
    1ca4:	7f 48                	jg     1cee <__data_num_words+0x8d6>
    1ca6:	83 fb 25             	cmp    $0x25,%ebx
    1ca9:	75 21                	jne    1ccc <__data_num_words+0x8b4>
				if ((*func)('%', dest) == EOF) {
    1cab:	ff b5 d4 fe ff ff    	pushl  -0x12c(%ebp)
    1cb1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
    1cb7:	6a 25                	push   $0x25
    1cb9:	ff d0                	call   *%eax
    1cbb:	5b                   	pop    %ebx
    1cbc:	40                   	inc    %eax
    1cbd:	5f                   	pop    %edi
    1cbe:	0f 84 54 f7 ff ff    	je     1418 <__data_num_words>
				count++;
    1cc4:	ff 85 ec fe ff ff    	incl   -0x114(%ebp)
    1cca:	eb 11                	jmp    1cdd <__data_num_words+0x8c5>
			switch (c) {
    1ccc:	83 fb 45             	cmp    $0x45,%ebx
    1ccf:	0f 84 d2 f9 ff ff    	je     16a7 <__data_num_words+0x28f>
    1cd5:	85 db                	test   %ebx,%ebx
    1cd7:	0f 84 45 02 00 00    	je     1f22 <__data_num_words+0xb0a>
    1cdd:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
    1ce3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
    1ce9:	e9 90 f9 ff ff       	jmp    167e <__data_num_words+0x266>
    1cee:	83 fb 63             	cmp    $0x63,%ebx
    1cf1:	0f 85 6f fe ff ff    	jne    1b66 <__data_num_words+0x74e>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    1cf7:	8d 46 04             	lea    0x4(%esi),%eax
				buf[1] = '\0';
    1cfa:	c6 85 28 ff ff ff 00 	movb   $0x0,-0xd8(%ebp)
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    1d01:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
    1d07:	8b 06                	mov    (%esi),%eax
    1d09:	88 85 27 ff ff ff    	mov    %al,-0xd9(%ebp)
				c = 1;
    1d0f:	c7 85 0c ff ff ff 01 	movl   $0x1,-0xf4(%ebp)
    1d16:	00 00 00 
				break;
    1d19:	e9 f1 01 00 00       	jmp    1f0f <__data_num_words+0xaf7>
	} else if (fplus)
    1d1e:	83 bd e8 fe ff ff 00 	cmpl   $0x0,-0x118(%ebp)
    1d25:	74 09                	je     1d30 <__data_num_words+0x918>
		*buf++ = '+';
    1d27:	c6 85 27 ff ff ff 2b 	movb   $0x2b,-0xd9(%ebp)
    1d2e:	eb 10                	jmp    1d40 <__data_num_words+0x928>
	else if (fspace)
    1d30:	83 bd e4 fe ff ff 00 	cmpl   $0x0,-0x11c(%ebp)
    1d37:	74 0e                	je     1d47 <__data_num_words+0x92f>
		*buf++ = ' ';
    1d39:	c6 85 27 ff ff ff 20 	movb   $0x20,-0xd9(%ebp)
    1d40:	89 da                	mov    %ebx,%edx
    1d42:	e9 50 fe ff ff       	jmp    1b97 <__data_num_words+0x77f>
	else if (fspace)
    1d47:	89 da                	mov    %ebx,%edx
    1d49:	8d bd 27 ff ff ff    	lea    -0xd9(%ebp),%edi
    1d4f:	e9 49 fe ff ff       	jmp    1b9d <__data_num_words+0x785>
			switch (c) {
    1d54:	83 fb 58             	cmp    $0x58,%ebx
    1d57:	75 84                	jne    1cdd <__data_num_words+0x8c5>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1d59:	8d 46 04             	lea    0x4(%esi),%eax
    1d5c:	8b 16                	mov    (%esi),%edx
    1d5e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
	if (alt_form) {
    1d64:	8d bd 27 ff ff ff    	lea    -0xd9(%ebp),%edi
    1d6a:	83 bd 08 ff ff ff 00 	cmpl   $0x0,-0xf8(%ebp)
    1d71:	74 14                	je     1d87 <__data_num_words+0x96f>
		*buf++ = '0';
    1d73:	c6 85 27 ff ff ff 30 	movb   $0x30,-0xd9(%ebp)
		*buf++ = 'x';
    1d7a:	c6 85 28 ff ff ff 78 	movb   $0x78,-0xd8(%ebp)
    1d81:	8d bd 29 ff ff ff    	lea    -0xd7(%ebp),%edi
	len = _to_x(buf, value, 16, precision);
    1d87:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
    1d8d:	b9 10 00 00 00       	mov    $0x10,%ecx
    1d92:	89 f8                	mov    %edi,%eax
    1d94:	e8 8f f4 ff ff       	call   1228 <_to_x>
    1d99:	5a                   	pop    %edx
	if (prefix == 'X') {
    1d9a:	8d 8d 27 ff ff ff    	lea    -0xd9(%ebp),%ecx
    1da0:	83 fb 58             	cmp    $0x58,%ebx
    1da3:	74 2b                	je     1dd0 <__data_num_words+0x9b8>
	return len + (buf - buf0);
    1da5:	8d 8d 27 ff ff ff    	lea    -0xd9(%ebp),%ecx
					prefix = 2;
    1dab:	31 db                	xor    %ebx,%ebx
	return len + (buf - buf0);
    1dad:	29 cf                	sub    %ecx,%edi
    1daf:	01 f8                	add    %edi,%eax
					prefix = 2;
    1db1:	83 bd 08 ff ff ff 00 	cmpl   $0x0,-0xf8(%ebp)
    1db8:	0f 95 c3             	setne  %bl
    1dbb:	01 db                	add    %ebx,%ebx
    1dbd:	e9 09 fe ff ff       	jmp    1bcb <__data_num_words+0x7b3>
		if (*buf >= 'a' && *buf <= 'z') {
    1dc2:	8d 5a 9f             	lea    -0x61(%edx),%ebx
    1dc5:	80 fb 19             	cmp    $0x19,%bl
    1dc8:	77 05                	ja     1dcf <__data_num_words+0x9b7>
			*buf += 'A' - 'a';
    1dca:	83 ea 20             	sub    $0x20,%edx
    1dcd:	88 11                	mov    %dl,(%ecx)
	for (/**/; *buf; buf++) {
    1dcf:	41                   	inc    %ecx
    1dd0:	8a 11                	mov    (%ecx),%dl
    1dd2:	84 d2                	test   %dl,%dl
    1dd4:	75 ec                	jne    1dc2 <__data_num_words+0x9aa>
    1dd6:	eb cd                	jmp    1da5 <__data_num_words+0x98d>
			switch (c) {
    1dd8:	83 fb 70             	cmp    $0x70,%ebx
    1ddb:	75 5b                	jne    1e38 <__data_num_words+0xa20>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1ddd:	8d 46 04             	lea    0x4(%esi),%eax
    1de0:	8b 16                	mov    (%esi),%edx
    1de2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
	len = _to_x(buf, value, 16, precision);
    1de8:	b9 10 00 00 00       	mov    $0x10,%ecx
    1ded:	8d 85 29 ff ff ff    	lea    -0xd7(%ebp),%eax
    1df3:	6a 08                	push   $0x8
		*buf++ = '0';
    1df5:	c6 85 27 ff ff ff 30 	movb   $0x30,-0xd9(%ebp)
		*buf++ = 'x';
    1dfc:	c6 85 28 ff ff ff 78 	movb   $0x78,-0xd8(%ebp)
	len = _to_x(buf, value, 16, precision);
    1e03:	e8 20 f4 ff ff       	call   1228 <_to_x>
    1e08:	5b                   	pop    %ebx
	return len + (buf - buf0);
    1e09:	83 c0 02             	add    $0x2,%eax
    1e0c:	eb 23                	jmp    1e31 <__data_num_words+0xa19>
	if (alt_form) {
    1e0e:	8d 85 27 ff ff ff    	lea    -0xd9(%ebp),%eax
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    1e14:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
    1e1a:	89 c3                	mov    %eax,%ebx
    1e1c:	8d 8d 27 ff ff ff    	lea    -0xd9(%ebp),%ecx
    1e22:	29 cb                	sub    %ecx,%ebx
    1e24:	b9 08 00 00 00       	mov    $0x8,%ecx
    1e29:	e8 fa f3 ff ff       	call   1228 <_to_x>
    1e2e:	5e                   	pop    %esi
    1e2f:	01 d8                	add    %ebx,%eax
			prefix = 0;
    1e31:	31 db                	xor    %ebx,%ebx
    1e33:	e9 93 fd ff ff       	jmp    1bcb <__data_num_words+0x7b3>
			switch (c) {
    1e38:	7f 2f                	jg     1e69 <__data_num_words+0xa51>
    1e3a:	83 fb 6e             	cmp    $0x6e,%ebx
    1e3d:	0f 85 b4 f7 ff ff    	jne    15f7 <__data_num_words+0x1df>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    1e43:	8d 46 04             	lea    0x4(%esi),%eax
				*int32ptr_temp = count;
    1e46:	8b 9d ec fe ff ff    	mov    -0x114(%ebp),%ebx
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    1e4c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
				*int32ptr_temp = count;
    1e52:	8b 06                	mov    (%esi),%eax
    1e54:	89 18                	mov    %ebx,(%eax)
				break;
    1e56:	e9 88 fe ff ff       	jmp    1ce3 <__data_num_words+0x8cb>
			switch (c) {
    1e5b:	83 fb 69             	cmp    $0x69,%ebx
    1e5e:	0f 84 08 fd ff ff    	je     1b6c <__data_num_words+0x754>
    1e64:	e9 74 fe ff ff       	jmp    1cdd <__data_num_words+0x8c5>
    1e69:	83 fb 75             	cmp    $0x75,%ebx
    1e6c:	75 24                	jne    1e92 <__data_num_words+0xa7a>
	return _to_x(buf, value, 10, precision);
    1e6e:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1e74:	8d 46 04             	lea    0x4(%esi),%eax
	return _to_x(buf, value, 10, precision);
    1e77:	b9 0a 00 00 00       	mov    $0xa,%ecx
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1e7c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
	return _to_x(buf, value, 10, precision);
    1e82:	8b 16                	mov    (%esi),%edx
    1e84:	8d 85 27 ff ff ff    	lea    -0xd9(%ebp),%eax
    1e8a:	e8 99 f3 ff ff       	call   1228 <_to_x>
    1e8f:	59                   	pop    %ecx
    1e90:	eb 9f                	jmp    1e31 <__data_num_words+0xa19>
			switch (c) {
    1e92:	83 fb 78             	cmp    $0x78,%ebx
    1e95:	0f 84 be fe ff ff    	je     1d59 <__data_num_words+0x941>
    1e9b:	83 fb 73             	cmp    $0x73,%ebx
    1e9e:	0f 85 39 fe ff ff    	jne    1cdd <__data_num_words+0x8c5>
				cptr_temp = (char *) va_arg(vargs, char *);
    1ea4:	8d 46 04             	lea    0x4(%esi),%eax
    1ea7:	8b 16                	mov    (%esi),%edx
    1ea9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
				for (c = 0; c < MAXFLD; c++) {
    1eaf:	31 c0                	xor    %eax,%eax
					if (cptr_temp[c] == '\0') {
    1eb1:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
    1eb5:	74 08                	je     1ebf <__data_num_words+0xaa7>
				for (c = 0; c < MAXFLD; c++) {
    1eb7:	40                   	inc    %eax
    1eb8:	3d c8 00 00 00       	cmp    $0xc8,%eax
    1ebd:	75 f2                	jne    1eb1 <__data_num_words+0xa99>
				if ((precision >= 0) && (precision < c))
    1ebf:	8b 9d 0c ff ff ff    	mov    -0xf4(%ebp),%ebx
    1ec5:	83 eb 00             	sub    $0x0,%ebx
    1ec8:	78 08                	js     1ed2 <__data_num_words+0xaba>
    1eca:	39 85 0c ff ff ff    	cmp    %eax,-0xf4(%ebp)
    1ed0:	7c 06                	jl     1ed8 <__data_num_words+0xac0>
    1ed2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
				if (c > 0) {
    1ed8:	83 bd 0c ff ff ff 00 	cmpl   $0x0,-0xf4(%ebp)
    1edf:	0f 84 fe fd ff ff    	je     1ce3 <__data_num_words+0x8cb>
					memcpy(buf, cptr_temp, (size_t) c);
    1ee5:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
    1eeb:	8d 85 27 ff ff ff    	lea    -0xd9(%ebp),%eax
    1ef1:	52                   	push   %edx
    1ef2:	50                   	push   %eax
    1ef3:	e8 e3 00 00 00       	call   1fdb <memcpy>
    1ef8:	83 c4 0c             	add    $0xc,%esp
    1efb:	eb 12                	jmp    1f0f <__data_num_words+0xaf7>
	if (prune_zero) {
    1efd:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%ebp)
    1f04:	0f 85 ca fb ff ff    	jne    1ad4 <__data_num_words+0x6bc>
    1f0a:	e9 2a fc ff ff       	jmp    1b39 <__data_num_words+0x721>
					prefix = 2;
    1f0f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
    1f15:	31 db                	xor    %ebx,%ebx
    1f17:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
    1f1d:	e9 21 f7 ff ff       	jmp    1643 <__data_num_words+0x22b>
				}
			}
		}
	}
	return count;
}
    1f22:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
    1f28:	8d 65 f0             	lea    -0x10(%ebp),%esp
    1f2b:	59                   	pop    %ecx
    1f2c:	5b                   	pop    %ebx
    1f2d:	5e                   	pop    %esi
    1f2e:	5f                   	pop    %edi
    1f2f:	5d                   	pop    %ebp
    1f30:	8d 61 fc             	lea    -0x4(%ecx),%esp
    1f33:	c3                   	ret    

00001f34 <_stdout_hook_default>:
 */

#include <stdio.h>

static int _stdout_hook_default(int c)
{
    1f34:	55                   	push   %ebp
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1f35:	83 c8 ff             	or     $0xffffffff,%eax
{
    1f38:	89 e5                	mov    %esp,%ebp
}
    1f3a:	5d                   	pop    %ebp
    1f3b:	c3                   	ret    

00001f3c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
    1f3c:	55                   	push   %ebp
    1f3d:	89 e5                	mov    %esp,%ebp
	_stdout_hook = hook;
    1f3f:	8b 45 08             	mov    0x8(%ebp),%eax
}
    1f42:	5d                   	pop    %ebp
	_stdout_hook = hook;
    1f43:	a3 00 00 40 00       	mov    %eax,0x400000
}
    1f48:	c3                   	ret    

00001f49 <fputc>:

int fputc(int c, FILE *stream)
{
    1f49:	55                   	push   %ebp
    1f4a:	89 e5                	mov    %esp,%ebp
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    1f4c:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
    1f50:	75 07                	jne    1f59 <fputc+0x10>
}
    1f52:	5d                   	pop    %ebp
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    1f53:	ff 25 00 00 40 00    	jmp    *0x400000
}
    1f59:	83 c8 ff             	or     $0xffffffff,%eax
    1f5c:	5d                   	pop    %ebp
    1f5d:	c3                   	ret    

00001f5e <strchr>:
 *
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
    1f5e:	55                   	push   %ebp
    1f5f:	89 e5                	mov    %esp,%ebp
    1f61:	53                   	push   %ebx
    1f62:	8b 55 0c             	mov    0xc(%ebp),%edx
    1f65:	8b 45 08             	mov    0x8(%ebp),%eax
	char tmp = (char) c;
    1f68:	88 d3                	mov    %dl,%bl

	while ((*s != tmp) && (*s != '\0'))
    1f6a:	8a 08                	mov    (%eax),%cl
    1f6c:	38 cb                	cmp    %cl,%bl
    1f6e:	74 0d                	je     1f7d <strchr+0x1f>
    1f70:	84 c9                	test   %cl,%cl
    1f72:	74 03                	je     1f77 <strchr+0x19>
		s++;
    1f74:	40                   	inc    %eax
    1f75:	eb f3                	jmp    1f6a <strchr+0xc>

	return (*s == tmp) ? (char *) s : NULL;
    1f77:	84 d2                	test   %dl,%dl
    1f79:	74 02                	je     1f7d <strchr+0x1f>
    1f7b:	31 c0                	xor    %eax,%eax
}
    1f7d:	5b                   	pop    %ebx
    1f7e:	5d                   	pop    %ebp
    1f7f:	c3                   	ret    

00001f80 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1f80:	55                   	push   %ebp
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1f81:	31 c9                	xor    %ecx,%ecx
{
    1f83:	89 e5                	mov    %esp,%ebp
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1f85:	8b 45 08             	mov    0x8(%ebp),%eax
    1f88:	8b 55 0c             	mov    0xc(%ebp),%edx
    1f8b:	0f be 04 08          	movsbl (%eax,%ecx,1),%eax
    1f8f:	0f be 14 0a          	movsbl (%edx,%ecx,1),%edx
    1f93:	38 d0                	cmp    %dl,%al
    1f95:	75 08                	jne    1f9f <strcmp+0x1f>
    1f97:	41                   	inc    %ecx
    1f98:	84 c0                	test   %al,%al
    1f9a:	75 e9                	jne    1f85 <strcmp+0x5>
    1f9c:	0f be d0             	movsbl %al,%edx
		s1++;
		s2++;
	}

	return *s1 - *s2;
    1f9f:	29 d0                	sub    %edx,%eax
}
    1fa1:	5d                   	pop    %ebp
    1fa2:	c3                   	ret    

00001fa3 <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    1fa3:	55                   	push   %ebp
    1fa4:	89 e5                	mov    %esp,%ebp
    1fa6:	56                   	push   %esi
    1fa7:	53                   	push   %ebx
    1fa8:	8b 45 08             	mov    0x8(%ebp),%eax
    1fab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    1fae:	89 c1                	mov    %eax,%ecx
{
    1fb0:	8b 75 10             	mov    0x10(%ebp),%esi
	if ((size_t) (d - s) < n) {
    1fb3:	29 d9                	sub    %ebx,%ecx
    1fb5:	39 f1                	cmp    %esi,%ecx
    1fb7:	72 04                	jb     1fbd <memmove+0x1a>
    1fb9:	31 c9                	xor    %ecx,%ecx
    1fbb:	eb 0d                	jmp    1fca <memmove+0x27>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
    1fbd:	4e                   	dec    %esi
		while (n > 0) {
    1fbe:	85 f6                	test   %esi,%esi
			dest[n] = src[n];
    1fc0:	8a 0c 33             	mov    (%ebx,%esi,1),%cl
    1fc3:	88 0c 30             	mov    %cl,(%eax,%esi,1)
		while (n > 0) {
    1fc6:	75 f5                	jne    1fbd <memmove+0x1a>
    1fc8:	eb 0d                	jmp    1fd7 <memmove+0x34>
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    1fca:	39 ce                	cmp    %ecx,%esi
    1fcc:	74 09                	je     1fd7 <memmove+0x34>
			*dest = *src;
    1fce:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
    1fd1:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    1fd4:	41                   	inc    %ecx
    1fd5:	eb f3                	jmp    1fca <memmove+0x27>
			n--;
		}
	}

	return d;
}
    1fd7:	5b                   	pop    %ebx
    1fd8:	5e                   	pop    %esi
    1fd9:	5d                   	pop    %ebp
    1fda:	c3                   	ret    

00001fdb <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    1fdb:	55                   	push   %ebp
    1fdc:	89 e5                	mov    %esp,%ebp
    1fde:	57                   	push   %edi
    1fdf:	56                   	push   %esi
    1fe0:	53                   	push   %ebx
    1fe1:	8b 45 08             	mov    0x8(%ebp),%eax
    1fe4:	8b 55 0c             	mov    0xc(%ebp),%edx
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1fe7:	89 c1                	mov    %eax,%ecx
{
    1fe9:	8b 5d 10             	mov    0x10(%ebp),%ebx
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1fec:	31 d1                	xor    %edx,%ecx
    1fee:	80 e1 03             	and    $0x3,%cl
    1ff1:	75 3d                	jne    2030 <memcpy+0x55>
    1ff3:	89 c1                	mov    %eax,%ecx
    1ff5:	89 de                	mov    %ebx,%esi

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
    1ff7:	f6 c1 03             	test   $0x3,%cl
    1ffa:	74 0f                	je     200b <memcpy+0x30>
			if (n == 0) {
    1ffc:	85 f6                	test   %esi,%esi
    1ffe:	74 41                	je     2041 <memcpy+0x66>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    2000:	42                   	inc    %edx
    2001:	41                   	inc    %ecx
    2002:	8a 5a ff             	mov    -0x1(%edx),%bl
			n--;
    2005:	4e                   	dec    %esi
			*(d_byte++) = *(s_byte++);
    2006:	88 59 ff             	mov    %bl,-0x1(%ecx)
    2009:	eb ec                	jmp    1ff7 <memcpy+0x1c>
    200b:	31 db                	xor    %ebx,%ebx
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
    200d:	89 f7                	mov    %esi,%edi
    200f:	29 df                	sub    %ebx,%edi
    2011:	83 ff 03             	cmp    $0x3,%edi
    2014:	76 0b                	jbe    2021 <memcpy+0x46>
			*(d_word++) = *(s_word++);
    2016:	8b 3c 1a             	mov    (%edx,%ebx,1),%edi
    2019:	89 3c 19             	mov    %edi,(%ecx,%ebx,1)
    201c:	83 c3 04             	add    $0x4,%ebx
    201f:	eb ec                	jmp    200d <memcpy+0x32>
    2021:	89 f3                	mov    %esi,%ebx
    2023:	83 e6 fc             	and    $0xfffffffc,%esi
    2026:	83 e3 03             	and    $0x3,%ebx
		while (n >= sizeof(unsigned int)) {
    2029:	01 f2                	add    %esi,%edx
    202b:	8d 3c 31             	lea    (%ecx,%esi,1),%edi
    202e:	eb 02                	jmp    2032 <memcpy+0x57>
	unsigned char *d_byte = (unsigned char *)d;
    2030:	89 c7                	mov    %eax,%edi
    2032:	31 f6                	xor    %esi,%esi
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2034:	39 f3                	cmp    %esi,%ebx
    2036:	74 09                	je     2041 <memcpy+0x66>
		*(d_byte++) = *(s_byte++);
    2038:	8a 0c 32             	mov    (%edx,%esi,1),%cl
    203b:	88 0c 37             	mov    %cl,(%edi,%esi,1)
    203e:	46                   	inc    %esi
    203f:	eb f3                	jmp    2034 <memcpy+0x59>
		n--;
	}

	return d;
}
    2041:	5b                   	pop    %ebx
    2042:	5e                   	pop    %esi
    2043:	5f                   	pop    %edi
    2044:	5d                   	pop    %ebp
    2045:	c3                   	ret    

00002046 <mylib_hello_world>:
    2046:	55                   	push   %ebp
    2047:	89 e5                	mov    %esp,%ebp
    2049:	68 66 39 00 00       	push   $0x3966
    204e:	e8 ba f1 ff ff       	call   120d <printf>
    2053:	58                   	pop    %eax
    2054:	31 c0                	xor    %eax,%eax
    2056:	c9                   	leave  
    2057:	c3                   	ret    

00002058 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2058:	55                   	push   %ebp
    2059:	89 e5                	mov    %esp,%ebp
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    205b:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
    205f:	75 10                	jne    2071 <console_out+0x19>
		uart_poll_out(uart_console_dev, '\r');
    2061:	a1 60 50 40 00       	mov    0x405060,%eax
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    2066:	8b 50 04             	mov    0x4(%eax),%edx
    2069:	6a 0d                	push   $0xd
    206b:	50                   	push   %eax
    206c:	ff 52 04             	call   *0x4(%edx)
    206f:	59                   	pop    %ecx
    2070:	58                   	pop    %eax
	}
	uart_poll_out(uart_console_dev, c);
    2071:	a1 60 50 40 00       	mov    0x405060,%eax
    2076:	0f b6 4d 08          	movzbl 0x8(%ebp),%ecx
    207a:	8b 50 04             	mov    0x4(%eax),%edx
    207d:	51                   	push   %ecx
    207e:	50                   	push   %eax
    207f:	ff 52 04             	call   *0x4(%edx)
    2082:	58                   	pop    %eax

	return c;
}
    2083:	8b 45 08             	mov    0x8(%ebp),%eax
    2086:	5a                   	pop    %edx
    2087:	c9                   	leave  
    2088:	c3                   	ret    

00002089 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    2089:	55                   	push   %ebp
    208a:	89 e5                	mov    %esp,%ebp
	__stdout_hook_install(console_out);
    208c:	68 58 20 00 00       	push   $0x2058
    2091:	e8 a6 fe ff ff       	call   1f3c <__stdout_hook_install>
	__printk_hook_install(console_out);
    2096:	c7 04 24 58 20 00 00 	movl   $0x2058,(%esp)
    209d:	e8 a4 05 00 00       	call   2646 <__printk_hook_install>
    20a2:	58                   	pop    %eax
}
    20a3:	c9                   	leave  
    20a4:	c3                   	ret    

000020a5 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    20a5:	55                   	push   %ebp
    20a6:	89 e5                	mov    %esp,%ebp

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    20a8:	68 80 39 00 00       	push   $0x3980
    20ad:	e8 9b 0f 00 00       	call   304d <device_get_binding>
    20b2:	5a                   	pop    %edx
    20b3:	a3 60 50 40 00       	mov    %eax,0x405060
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    20b8:	e8 cc ff ff ff       	call   2089 <uart_console_hook_install>

	return 0;
}
    20bd:	31 c0                	xor    %eax,%eax
    20bf:	c9                   	leave  
    20c0:	c3                   	ret    

000020c1 <uart_ns16550_init>:
 * @param dev UART device struct
 *
 * @return 0 if successful, failed otherwise
 */
static int uart_ns16550_init(struct device *dev)
{
    20c1:	55                   	push   %ebp
    20c2:	89 e5                	mov    %esp,%ebp
    20c4:	57                   	push   %edi
    20c5:	56                   	push   %esi
    20c6:	53                   	push   %ebx
    20c7:	83 ec 0c             	sub    $0xc,%esp
    20ca:	8b 45 08             	mov    0x8(%ebp),%eax
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    20cd:	8b 78 08             	mov    0x8(%eax),%edi

static ALWAYS_INLINE unsigned int _do_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile (
    20d0:	9c                   	pushf  
    20d1:	fa                   	cli    
    20d2:	5e                   	pop    %esi
	dev_data->iir_cache = 0;
#endif

	old_level = irq_lock();

	set_baud_rate(dev, dev_data->baud_rate);
    20d3:	8b 4f 04             	mov    0x4(%edi),%ecx
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
    20d6:	8b 58 08             	mov    0x8(%eax),%ebx
	if ((baud_rate != 0) && (dev_cfg->sys_clk_freq != 0)) {
    20d9:	85 c9                	test   %ecx,%ecx
    20db:	74 3e                	je     211b <uart_ns16550_init+0x5a>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    20dd:	8b 00                	mov    (%eax),%eax
	if ((baud_rate != 0) && (dev_cfg->sys_clk_freq != 0)) {
    20df:	8b 40 08             	mov    0x8(%eax),%eax
    20e2:	8b 00                	mov    (%eax),%eax
    20e4:	85 c0                	test   %eax,%eax
    20e6:	74 33                	je     211b <uart_ns16550_init+0x5a>
		divisor = (dev_cfg->sys_clk_freq / baud_rate) >> 4;
    20e8:	31 d2                	xor    %edx,%edx
    20ea:	f7 f1                	div    %ecx
    20ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		lcr_cache = INBYTE(LCR(dev));
    20ef:	8b 03                	mov    (%ebx),%eax
    20f1:	83 c0 03             	add    $0x3,%eax
    20f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
static ALWAYS_INLINE
	u8_t sys_in8(io_port_t port)
{
	u8_t ret;

	__asm__ volatile("inb	%w1, %b0;\n\t"
    20f7:	89 c2                	mov    %eax,%edx
    20f9:	ec                   	in     (%dx),%al
    20fa:	88 45 eb             	mov    %al,-0x15(%ebp)
	__asm__ volatile("outb	%b0, %w1;\n\t"
    20fd:	b0 80                	mov    $0x80,%al
    20ff:	ee                   	out    %al,(%dx)
		divisor = (dev_cfg->sys_clk_freq / baud_rate) >> 4;
    2100:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2103:	8b 13                	mov    (%ebx),%edx
    2105:	c1 e8 04             	shr    $0x4,%eax
    2108:	ee                   	out    %al,(%dx)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    2109:	8b 45 ec             	mov    -0x14(%ebp),%eax
    210c:	42                   	inc    %edx
    210d:	c1 e8 0c             	shr    $0xc,%eax
    2110:	ee                   	out    %al,(%dx)
    2111:	8a 45 eb             	mov    -0x15(%ebp),%al
    2114:	8b 55 f0             	mov    -0x10(%ebp),%edx
    2117:	ee                   	out    %al,(%dx)
		dev_data->baud_rate = baud_rate;
    2118:	89 4b 04             	mov    %ecx,0x4(%ebx)
#ifdef CONFIG_UART_NS16550_DLF
	set_dlf(dev, dev_data->dlf);
#endif

	/* 8 data bits, 1 stop bit, no parity, clear DLAB */
	OUTBYTE(LCR(dev), LCR_CS8 | LCR_1_STB | LCR_PDIS);
    211b:	8b 0b                	mov    (%ebx),%ecx
    211d:	b0 03                	mov    $0x3,%al
    211f:	8d 51 03             	lea    0x3(%ecx),%edx
    2122:	ee                   	out    %al,(%dx)

	mdc = MCR_OUT2 | MCR_RTS | MCR_DTR;
	if ((dev_data->options & UART_OPTION_AFCE) == UART_OPTION_AFCE)
    2123:	8a 47 08             	mov    0x8(%edi),%al
		mdc |= MCR_AFCE;

	OUTBYTE(MDC(dev), mdc);
    2126:	8d 51 04             	lea    0x4(%ecx),%edx
	if ((dev_data->options & UART_OPTION_AFCE) == UART_OPTION_AFCE)
    2129:	83 e0 01             	and    $0x1,%eax
		mdc |= MCR_AFCE;
    212c:	3c 01                	cmp    $0x1,%al
    212e:	19 c0                	sbb    %eax,%eax
    2130:	83 e0 e0             	and    $0xffffffe0,%eax
    2133:	83 c0 2b             	add    $0x2b,%eax
    2136:	ee                   	out    %al,(%dx)
    2137:	b0 87                	mov    $0x87,%al
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
    2139:	8d 51 02             	lea    0x2(%ecx),%edx
    213c:	ee                   	out    %al,(%dx)
	__asm__ volatile("inb	%w1, %b0;\n\t"
    213d:	89 ca                	mov    %ecx,%edx
    213f:	ec                   	in     (%dx),%al
	__asm__ volatile("outb	%b0, %w1;\n\t"
    2140:	31 c0                	xor    %eax,%eax

	/* clear the port */
	INBYTE(RDR(dev));

	/* disable interrupts  */
	OUTBYTE(IER(dev), 0x00);
    2142:	8d 51 01             	lea    0x1(%ecx),%edx
    2145:	ee                   	out    %al,(%dx)
 *
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	if (!(key & 0x200)) {
    2146:	0f ba e6 09          	bt     $0x9,%esi
    214a:	73 01                	jae    214d <uart_ns16550_init+0x8c>
	__asm__ volatile (
    214c:	fb                   	sti    
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
    214d:	83 c4 0c             	add    $0xc,%esp
    2150:	31 c0                	xor    %eax,%eax
    2152:	5b                   	pop    %ebx
    2153:	5e                   	pop    %esi
    2154:	5f                   	pop    %edi
    2155:	5d                   	pop    %ebp
    2156:	c3                   	ret    

00002157 <uart_ns16550_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(struct device *dev, unsigned char *c)
{
    2157:	55                   	push   %ebp
    2158:	89 e5                	mov    %esp,%ebp
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) == 0x00)
    215a:	8b 45 08             	mov    0x8(%ebp),%eax
    215d:	8b 40 08             	mov    0x8(%eax),%eax
    2160:	8b 08                	mov    (%eax),%ecx
    2162:	8d 51 05             	lea    0x5(%ecx),%edx
	__asm__ volatile("inb	%w1, %b0;\n\t"
    2165:	ec                   	in     (%dx),%al
    2166:	88 c2                	mov    %al,%dl
    2168:	80 e2 01             	and    $0x1,%dl
    216b:	74 0c                	je     2179 <uart_ns16550_poll_in+0x22>
    216d:	89 ca                	mov    %ecx,%edx
    216f:	ec                   	in     (%dx),%al
		return (-1);

	/* got a character */
	*c = INBYTE(RDR(dev));
    2170:	8b 55 0c             	mov    0xc(%ebp),%edx
    2173:	88 02                	mov    %al,(%edx)

	return 0;
    2175:	31 c0                	xor    %eax,%eax
    2177:	eb 03                	jmp    217c <uart_ns16550_poll_in+0x25>
    2179:	83 c8 ff             	or     $0xffffffff,%eax
}
    217c:	5d                   	pop    %ebp
    217d:	c3                   	ret    

0000217e <uart_ns16550_poll_out>:
 *
 * @return Sent character
 */
static unsigned char uart_ns16550_poll_out(struct device *dev,
					   unsigned char c)
{
    217e:	55                   	push   %ebp
    217f:	89 e5                	mov    %esp,%ebp
    2181:	53                   	push   %ebx
	/* wait for transmitter to ready to accept a character */
	while ((INBYTE(LSR(dev)) & LSR_TEMT) == 0)
    2182:	8b 45 08             	mov    0x8(%ebp),%eax
{
    2185:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	while ((INBYTE(LSR(dev)) & LSR_TEMT) == 0)
    2188:	8b 40 08             	mov    0x8(%eax),%eax
    218b:	8b 18                	mov    (%eax),%ebx
    218d:	8d 53 05             	lea    0x5(%ebx),%edx
    2190:	ec                   	in     (%dx),%al
    2191:	a8 40                	test   $0x40,%al
    2193:	74 fb                	je     2190 <uart_ns16550_poll_out+0x12>
	__asm__ volatile("outb	%b0, %w1;\n\t"
    2195:	88 c8                	mov    %cl,%al
    2197:	89 da                	mov    %ebx,%edx
    2199:	ee                   	out    %al,(%dx)
		;

	OUTBYTE(THR(dev), c);

	return c;
}
    219a:	5b                   	pop    %ebx
    219b:	5d                   	pop    %ebp
    219c:	c3                   	ret    

0000219d <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_ERROR_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(struct device *dev)
{
    219d:	55                   	push   %ebp
    219e:	89 e5                	mov    %esp,%ebp
	return (INBYTE(LSR(dev)) & LSR_EOB_MASK) >> 1;
    21a0:	8b 45 08             	mov    0x8(%ebp),%eax
    21a3:	8b 40 08             	mov    0x8(%eax),%eax
    21a6:	8b 00                	mov    (%eax),%eax
    21a8:	8d 50 05             	lea    0x5(%eax),%edx
	__asm__ volatile("inb	%w1, %b0;\n\t"
    21ab:	ec                   	in     (%dx),%al
    21ac:	d1 e8                	shr    %eax
}
    21ae:	5d                   	pop    %ebp
	return (INBYTE(LSR(dev)) & LSR_EOB_MASK) >> 1;
    21af:	83 e0 0f             	and    $0xf,%eax
}
    21b2:	c3                   	ret    

000021b3 <_timer_int_handler>:
 * is pushed onto the kernel stack.
 *
 * @return N/A
 */
void _timer_int_handler(void *unused)
{
    21b3:	55                   	push   %ebp
	/*
	 * one more tick has occurred -- don't need to do anything special since
	 * timer is already configured to interrupt on the following tick
	 */

	_sys_clock_tick_announce();
    21b4:	a1 20 00 40 00       	mov    0x400020,%eax
{
    21b9:	89 e5                	mov    %esp,%ebp
	_sys_clock_tick_announce();
    21bb:	89 45 08             	mov    %eax,0x8(%ebp)
	programmed_ticks = 1;
	_sys_clock_final_tick_announce();
#endif
#endif /* !CONFIG_TICKLESS_IDLE */

}
    21be:	5d                   	pop    %ebp
	_sys_clock_tick_announce();
    21bf:	e9 02 12 00 00       	jmp    33c6 <_nano_sys_clock_tick_announce>

000021c4 <_sys_clock_driver_init>:
 *
 * @return 0
 */

int _sys_clock_driver_init(struct device *device)
{
    21c4:	55                   	push   %ebp
    21c5:	89 e5                	mov    %esp,%ebp
    21c7:	57                   	push   %edi
    21c8:	56                   	push   %esi
    21c9:	53                   	push   %ebx
	/*
	 * Initial state of HPET is unknown, so put it back in a reset-like
	 * state (i.e. set main counter to 0 and disable interrupts)
	 */

	*_HPET_GENERAL_CONFIG &= ~HPET_ENABLE_CNF;
    21ca:	a1 10 00 d0 fe       	mov    0xfed00010,%eax
	/*
	 * Convert the 'sys_clock_us_per_tick' value
	 * from microseconds to femptoseconds
	 */

	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
    21cf:	be 00 ca 9a 3b       	mov    $0x3b9aca00,%esi
	*_HPET_GENERAL_CONFIG &= ~HPET_ENABLE_CNF;
    21d4:	83 e0 fe             	and    $0xfffffffe,%eax
    21d7:	a3 10 00 d0 fe       	mov    %eax,0xfed00010
	*_HPET_MAIN_COUNTER_VALUE = 0;
    21dc:	c7 05 f0 00 d0 fe 00 	movl   $0x0,0xfed000f0
    21e3:	00 00 00 
	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
    21e6:	89 f0                	mov    %esi,%eax
	*_HPET_MAIN_COUNTER_VALUE = 0;
    21e8:	c7 05 f4 00 d0 fe 00 	movl   $0x0,0xfed000f4
    21ef:	00 00 00 
	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
    21f2:	f7 2d 2c 00 40 00    	imull  0x40002c
	 * to determine the frequency of clock applied to the HPET device.
	 */

	/* read the clock period: units are fempto (10^-15) seconds */

	hpetClockPeriod = HPET_COUNTER_CLK_PERIOD(*_HPET_GENERAL_CAPS);
    21f8:	8b 0d 00 00 d0 fe    	mov    0xfed00000,%ecx
    21fe:	8b 1d 04 00 d0 fe    	mov    0xfed00004,%ebx
    2204:	89 d9                	mov    %ebx,%ecx
    2206:	31 db                	xor    %ebx,%ebx
	/*
	 * compute value for the comparator register to achieve
	 * 'sys_clock_us_per_tick' period
	 */

	counter_load_value = (u32_t)(tickFempto / hpetClockPeriod);
    2208:	53                   	push   %ebx
    2209:	51                   	push   %ecx
    220a:	52                   	push   %edx
    220b:	50                   	push   %eax
    220c:	e8 bf ee ff ff       	call   10d0 <__udivdi3>
    2211:	31 db                	xor    %ebx,%ebx
	       (u32_t)(*_HPET_TIMER0_CONFIG_CAPS >> 32));

	/* Initialize sys_clock_hw_cycles_per_tick/sec */

	sys_clock_hw_cycles_per_tick = counter_load_value;
	sys_clock_hw_cycles_per_sec = sys_clock_hw_cycles_per_tick *
    2213:	6b d0 64             	imul   $0x64,%eax,%edx
	sys_clock_hw_cycles_per_tick = counter_load_value;
    2216:	a3 28 00 40 00       	mov    %eax,0x400028
	sys_clock_hw_cycles_per_sec = sys_clock_hw_cycles_per_tick *
    221b:	89 15 24 00 40 00    	mov    %edx,0x400024
	/*
	 * Configure HPET replace legacy 8254 timer.
	 * In this case the timer0 interrupt is routed to IRQ2
	 * and legacy timer generates no interrupts
	 */
	*_HPET_GENERAL_CONFIG |= HPET_LEGACY_RT_CNF;
    2221:	8b 15 10 00 d0 fe    	mov    0xfed00010,%edx
	counter_load_value = (u32_t)(tickFempto / hpetClockPeriod);
    2227:	83 c4 10             	add    $0x10,%esp
	*_HPET_GENERAL_CONFIG |= HPET_LEGACY_RT_CNF;
    222a:	83 ca 02             	or     $0x2,%edx
    222d:	89 15 10 00 d0 fe    	mov    %edx,0xfed00010
	 * Setting 32-bit mode during the first load of the comparator
	 * value is required to work around some hardware that otherwise
	 * does not work properly.
	 */

	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_TYPE_CNF | HPET_Tn_32MODE_CNF;
    2233:	8b 35 00 01 d0 fe    	mov    0xfed00100,%esi
    2239:	8b 3d 04 01 d0 fe    	mov    0xfed00104,%edi
    223f:	89 f2                	mov    %esi,%edx
    2241:	81 ca 08 01 00 00    	or     $0x108,%edx
    2247:	89 15 00 01 d0 fe    	mov    %edx,0xfed00100
    224d:	89 3d 04 01 d0 fe    	mov    %edi,0xfed00104

	/*
	 * Set the comparator register for timer0.  The write to the comparator
	 * register is allowed due to setting the HPET_Tn_VAL_SET_CNF bit.
	 */
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_VAL_SET_CNF;
    2253:	8b 35 00 01 d0 fe    	mov    0xfed00100,%esi
    2259:	8b 3d 04 01 d0 fe    	mov    0xfed00104,%edi
    225f:	89 f2                	mov    %esi,%edx
    2261:	83 ca 40             	or     $0x40,%edx
    2264:	89 15 00 01 d0 fe    	mov    %edx,0xfed00100
    226a:	89 3d 04 01 d0 fe    	mov    %edi,0xfed00104
	*_HPET_TIMER0_COMPARATOR = counter_load_value;
    2270:	a3 08 01 d0 fe       	mov    %eax,0xfed00108
    2275:	89 1d 0c 01 d0 fe    	mov    %ebx,0xfed0010c
	/*
	 * After the comparator is loaded, 32-bit mode can be safely
	 * switched off
	 */
	*_HPET_TIMER0_CONFIG_CAPS &= ~HPET_Tn_32MODE_CNF;
    227b:	8b 0d 00 01 d0 fe    	mov    0xfed00100,%ecx
    2281:	8b 1d 04 01 d0 fe    	mov    0xfed00104,%ebx
    2287:	89 cf                	mov    %ecx,%edi
    2289:	81 e7 ff fe ff ff    	and    $0xfffffeff,%edi
    228f:	89 3d 00 01 d0 fe    	mov    %edi,0xfed00100
    2295:	89 1d 04 01 d0 fe    	mov    %ebx,0xfed00104
	 * this case program leaves the IRQ fields blank.
	 */

	*_HPET_TIMER0_CONFIG_CAPS =
#if CONFIG_HPET_TIMER_IRQ < 32
		(*_HPET_TIMER0_CONFIG_CAPS & ~HPET_Tn_INT_ROUTE_CNF_MASK) |
    229b:	a1 00 01 d0 fe       	mov    0xfed00100,%eax
    22a0:	8b 15 04 01 d0 fe    	mov    0xfed00104,%edx
    22a6:	89 c3                	mov    %eax,%ebx
    22a8:	80 e7 c1             	and    $0xc1,%bh
    22ab:	80 cf 04             	or     $0x4,%bh
	*_HPET_TIMER0_CONFIG_CAPS =
    22ae:	89 1d 00 01 d0 fe    	mov    %ebx,0xfed00100
    22b4:	89 15 04 01 d0 fe    	mov    %edx,0xfed00104
    22ba:	0f b6 05 12 45 00 00 	movzbl 0x4512,%eax
 * @returns: N/A
 */
static inline void _irq_controller_irq_config(unsigned int vector,
					      unsigned int irq, u32_t flags)
{
	__irq_controller_irq_config(vector, irq, flags);
    22c1:	6a 00                	push   $0x0
    22c3:	6a 02                	push   $0x2
    22c5:	50                   	push   %eax
    22c6:	e8 7b 01 00 00       	call   2446 <__irq_controller_irq_config>
    22cb:	83 c4 0c             	add    $0xc,%esp
	IRQ_CONNECT(CONFIG_HPET_TIMER_IRQ, CONFIG_HPET_TIMER_IRQ_PRIORITY,
		   _timer_int_handler, 0, HPET_IOAPIC_FLAGS);

	/* enable the IRQ in the interrupt controller */

	irq_enable(CONFIG_HPET_TIMER_IRQ);
    22ce:	6a 02                	push   $0x2
    22d0:	e8 97 01 00 00       	call   246c <_arch_irq_enable>
    22d5:	58                   	pop    %eax

	/* enable the HPET generally, and timer0 specifically */

	*_HPET_GENERAL_CONFIG |= HPET_ENABLE_CNF;
    22d6:	a1 10 00 d0 fe       	mov    0xfed00010,%eax
    22db:	83 c8 01             	or     $0x1,%eax
    22de:	a3 10 00 d0 fe       	mov    %eax,0xfed00010
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_INT_ENB_CNF;

	return 0;
}
    22e3:	31 c0                	xor    %eax,%eax
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_INT_ENB_CNF;
    22e5:	8b 0d 00 01 d0 fe    	mov    0xfed00100,%ecx
    22eb:	8b 1d 04 01 d0 fe    	mov    0xfed00104,%ebx
    22f1:	89 cf                	mov    %ecx,%edi
    22f3:	83 cf 04             	or     $0x4,%edi
    22f6:	89 3d 00 01 d0 fe    	mov    %edi,0xfed00100
    22fc:	89 1d 04 01 d0 fe    	mov    %ebx,0xfed00104
}
    2302:	8d 65 f4             	lea    -0xc(%ebp),%esp
    2305:	5b                   	pop    %ebx
    2306:	5e                   	pop    %esi
    2307:	5f                   	pop    %edi
    2308:	5d                   	pop    %ebp
    2309:	c3                   	ret    

0000230a <_timer_int_handler_irq2_stub>:
	IRQ_CONNECT(CONFIG_HPET_TIMER_IRQ, CONFIG_HPET_TIMER_IRQ_PRIORITY,
    230a:	6a 00                	push   $0x0
    230c:	68 b3 21 00 00       	push   $0x21b3
    2311:	e9 48 07 00 00       	jmp    2a5e <_interrupt_enter>

00002316 <_i8259_init>:
 *
 * @return N/A
 */

int _i8259_init(struct device *unused)
{
    2316:	55                   	push   %ebp
	__asm__ volatile("outb	%b0, %w1;\n\t"
    2317:	b0 ff                	mov    $0xff,%al
    2319:	89 e5                	mov    %esp,%ebp
    231b:	e6 a1                	out    %al,$0xa1
    231d:	e6 21                	out    %al,$0x21
	ARG_UNUSED(unused);
	sys_out8(PIC_DISABLE, PIC_PORT2(PIC_SLAVE_BASE_ADRS));
	sys_out8(PIC_DISABLE, PIC_PORT2(PIC_MASTER_BASE_ADRS));
	return 0;
}
    231f:	31 c0                	xor    %eax,%eax
    2321:	5d                   	pop    %ebp
    2322:	c3                   	ret    

00002323 <_loapic_init>:
 * @return N/A
 *
 */

static int _loapic_init(struct device *unused)
{
    2323:	55                   	push   %ebp
    2324:	89 e5                	mov    %esp,%ebp
static ALWAYS_INLINE
	u32_t sys_read32(mm_reg_t addr)
{
	u32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
    2326:	a1 f0 00 e0 fe       	mov    0xfee000f0,%eax
	ARG_UNUSED(unused);
	s32_t loApicMaxLvt; /* local APIC Max LVT */

	/* enable the Local APIC */
	sys_write32(sys_read32(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_SVR)
    232b:	80 cc 01             	or     $0x1,%ah
	__asm__ volatile("movl	%0, %1;\n\t"
    232e:	a3 f0 00 e0 fe       	mov    %eax,0xfee000f0
		    | LOAPIC_ENABLE, CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_SVR);

	loApicMaxLvt = (*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_VER) &
    2333:	a1 30 00 e0 fe       	mov    0xfee00030,%eax
			LOAPIC_MAXLVT_MASK) >> 16;

	/* reset the DFR, TPR, TIMER_CONFIG, and TIMER_ICR */

	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_DFR) =
    2338:	c7 05 e0 00 e0 fe ff 	movl   $0xffffffff,0xfee000e0
    233f:	ff ff ff 
			LOAPIC_MAXLVT_MASK) >> 16;
    2342:	c1 f8 10             	sar    $0x10,%eax
		(int)0xffffffff;
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TPR) = (int)0x0;
    2345:	c7 05 80 00 e0 fe 00 	movl   $0x0,0xfee00080
    234c:	00 00 00 
	*(volatile int *) (CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER_CONFIG) =
    234f:	c7 05 e0 03 e0 fe 00 	movl   $0x0,0xfee003e0
    2356:	00 00 00 
		(int)0x0;
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER_ICR) = (int)0x0;
    2359:	c7 05 80 03 e0 fe 00 	movl   $0x0,0xfee00380
    2360:	00 00 00 
	/* program Local Vector Table for the Virtual Wire Mode */

	/* set LINT0: extInt, high-polarity, edge-trigger, not-masked */

	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT0) =
		(*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT0) &
    2363:	8b 15 50 03 e0 fe    	mov    0xfee00350,%edx
    2369:	81 e2 ff 58 fe ff    	and    $0xfffe58ff,%edx
		 ~(LOAPIC_MODE | LOAPIC_LOW | LOAPIC_LEVEL | LOAPIC_LVT_MASKED)) |
    236f:	80 ce 07             	or     $0x7,%dh
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT0) =
    2372:	89 15 50 03 e0 fe    	mov    %edx,0xfee00350
		(LOAPIC_EXT | LOAPIC_HIGH | LOAPIC_EDGE);

	/* set LINT1: NMI, high-polarity, edge-trigger, not-masked */

	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT1) =
		(*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT1) &
    2378:	8b 15 60 03 e0 fe    	mov    0xfee00360,%edx
    237e:	81 e2 ff 58 fe ff    	and    $0xfffe58ff,%edx
		 ~(LOAPIC_MODE | LOAPIC_LOW | LOAPIC_LEVEL | LOAPIC_LVT_MASKED)) |
    2384:	80 ce 04             	or     $0x4,%dh
	loApicMaxLvt = (*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_VER) &
    2387:	0f b6 c0             	movzbl %al,%eax
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_LINT1) =
    238a:	89 15 60 03 e0 fe    	mov    %edx,0xfee00360
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER) =
		LOAPIC_LVT_MASKED;
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_ERROR) =
		LOAPIC_LVT_MASKED;

	if (loApicMaxLvt >= LOAPIC_LVT_P6)
    2390:	83 f8 03             	cmp    $0x3,%eax
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER) =
    2393:	c7 05 20 03 e0 fe 00 	movl   $0x10000,0xfee00320
    239a:	00 01 00 
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_ERROR) =
    239d:	c7 05 70 03 e0 fe 00 	movl   $0x10000,0xfee00370
    23a4:	00 01 00 
	if (loApicMaxLvt >= LOAPIC_LVT_P6)
    23a7:	7e 19                	jle    23c2 <_loapic_init+0x9f>
		*(volatile int *) (CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_PMC) =
    23a9:	c7 05 40 03 e0 fe 00 	movl   $0x10000,0xfee00340
    23b0:	00 01 00 
			LOAPIC_LVT_MASKED;

	if (loApicMaxLvt >= LOAPIC_LVT_PENTIUM4)
    23b3:	83 f8 04             	cmp    $0x4,%eax
    23b6:	74 0a                	je     23c2 <_loapic_init+0x9f>
		*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_THERMAL) =
    23b8:	c7 05 30 03 e0 fe 00 	movl   $0x10000,0xfee00330
    23bf:	00 01 00 

	/* discard a pending interrupt if any */
#if CONFIG_EOI_FORWARDING_BUG
	_lakemont_eoi();
#else
	*(volatile int *)(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_EOI) = 0;
    23c2:	c7 05 b0 00 e0 fe 00 	movl   $0x0,0xfee000b0
    23c9:	00 00 00 
#endif

	return 0;
}
    23cc:	31 c0                	xor    %eax,%eax
    23ce:	5d                   	pop    %ebp
    23cf:	c3                   	ret    

000023d0 <_loapic_int_vec_set>:
 */

void _loapic_int_vec_set(unsigned int irq, /* IRQ number of the interrupt */
				  unsigned int vector /* vector to copy into the LVT */
				  )
{
    23d0:	55                   	push   %ebp
    23d1:	89 e5                	mov    %esp,%ebp
	 *
	 * It's assumed that LVTs are spaced by 0x10 bytes
	 */

	pLvt = (volatile int *)
			(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER + (irq * 0x10));
    23d3:	8b 45 08             	mov    0x8(%ebp),%eax
    23d6:	05 32 00 ee 0f       	add    $0xfee0032,%eax
    23db:	c1 e0 04             	shl    $0x4,%eax
	__asm__ volatile (
    23de:	9c                   	pushf  
    23df:	fa                   	cli    
    23e0:	59                   	pop    %ecx

	/* update the 'vector' bits in the LVT */

	oldLevel = irq_lock();
	*pLvt = (*pLvt & ~LOAPIC_VECTOR) | vector;
    23e1:	8b 10                	mov    (%eax),%edx
    23e3:	30 d2                	xor    %dl,%dl
    23e5:	0b 55 0c             	or     0xc(%ebp),%edx
    23e8:	0f ba e1 09          	bt     $0x9,%ecx
    23ec:	89 10                	mov    %edx,(%eax)
    23ee:	73 01                	jae    23f1 <_loapic_int_vec_set+0x21>
	__asm__ volatile (
    23f0:	fb                   	sti    
	irq_unlock(oldLevel);
}
    23f1:	5d                   	pop    %ebp
    23f2:	c3                   	ret    

000023f3 <_loapic_irq_enable>:
 *
 * @return N/A
 */

void _loapic_irq_enable(unsigned int irq)
{
    23f3:	55                   	push   %ebp
    23f4:	89 e5                	mov    %esp,%ebp
	 * See the comments in _LoApicLvtVecSet() regarding IRQ to LVT mappings
	 * and ths assumption concerning LVT spacing.
	 */

	pLvt = (volatile int *)
		(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_TIMER + (irq * 0x10));
    23f6:	8b 45 08             	mov    0x8(%ebp),%eax
    23f9:	05 32 00 ee 0f       	add    $0xfee0032,%eax
    23fe:	c1 e0 04             	shl    $0x4,%eax
	__asm__ volatile (
    2401:	9c                   	pushf  
    2402:	fa                   	cli    
    2403:	59                   	pop    %ecx

	/* clear the mask bit in the LVT */

	oldLevel = irq_lock();
	*pLvt = *pLvt & ~LOAPIC_LVT_MASKED;
    2404:	8b 10                	mov    (%eax),%edx
    2406:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
    240c:	0f ba e1 09          	bt     $0x9,%ecx
    2410:	89 10                	mov    %edx,(%eax)
    2412:	73 01                	jae    2415 <_loapic_irq_enable+0x22>
	__asm__ volatile (
    2414:	fb                   	sti    
	irq_unlock(oldLevel);
}
    2415:	5d                   	pop    %ebp
    2416:	c3                   	ret    

00002417 <__irq_controller_isr_vector_get>:
 *
 * @return The vector of the interrupt that is currently being processed, or -1
 * if no IRQ is being serviced.
 */
int __irq_controller_isr_vector_get(void)
{
    2417:	55                   	push   %ebp
    2418:	b9 70 01 e0 fe       	mov    $0xfee00170,%ecx
    241d:	89 e5                	mov    %esp,%ebp
	int pReg, block;

	/* Block 0 bits never lit up as these are all exception or reserved
	 * vectors
	 */
	for (block = 7; likely(block > 0); block--) {
    241f:	b8 07 00 00 00       	mov    $0x7,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
    2424:	8b 11                	mov    (%ecx),%edx
		pReg = sys_read32(CONFIG_LOAPIC_BASE_ADDRESS + LOAPIC_ISR +
				  (block * 0x10));
		if (pReg) {
    2426:	85 d2                	test   %edx,%edx
    2428:	74 11                	je     243b <__irq_controller_isr_vector_get+0x24>
	__asm__ volatile (
    242a:	0f bd d2             	bsr    %edx,%edx
    242d:	75 05                	jne    2434 <__irq_controller_isr_vector_get+0x1d>
    242f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			return (block * 32) + (find_msb_set(pReg) - 1);
    2434:	c1 e0 05             	shl    $0x5,%eax
    2437:	01 d0                	add    %edx,%eax
    2439:	eb 09                	jmp    2444 <__irq_controller_isr_vector_get+0x2d>
    243b:	83 e9 10             	sub    $0x10,%ecx
	for (block = 7; likely(block > 0); block--) {
    243e:	48                   	dec    %eax
    243f:	75 e3                	jne    2424 <__irq_controller_isr_vector_get+0xd>
		}

	}
	return -1;
    2441:	83 c8 ff             	or     $0xffffffff,%eax
}
    2444:	5d                   	pop    %ebp
    2445:	c3                   	ret    

00002446 <__irq_controller_irq_config>:
 * @param flags interrupt flags
 *
 */
void __irq_controller_irq_config(unsigned int vector, unsigned int irq,
				 u32_t flags)
{
    2446:	55                   	push   %ebp
    2447:	89 e5                	mov    %esp,%ebp
    2449:	8b 45 0c             	mov    0xc(%ebp),%eax
    244c:	8b 55 08             	mov    0x8(%ebp),%edx
	__ASSERT(irq >= 0 && irq <= HARDWARE_IRQ_LIMIT, "invalid irq line");

	if (IS_IOAPIC_IRQ(irq)) {
		_ioapic_irq_set(irq, vector, flags);
    244f:	89 55 0c             	mov    %edx,0xc(%ebp)
	if (IS_IOAPIC_IRQ(irq)) {
    2452:	83 f8 17             	cmp    $0x17,%eax
    2455:	77 09                	ja     2460 <__irq_controller_irq_config+0x1a>
		_ioapic_irq_set(irq, vector, flags);
    2457:	89 45 08             	mov    %eax,0x8(%ebp)
	} else {
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
	}
}
    245a:	5d                   	pop    %ebp
		_ioapic_irq_set(irq, vector, flags);
    245b:	e9 af 00 00 00       	jmp    250f <_ioapic_irq_set>
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
    2460:	83 e8 18             	sub    $0x18,%eax
    2463:	89 45 08             	mov    %eax,0x8(%ebp)
}
    2466:	5d                   	pop    %ebp
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
    2467:	e9 64 ff ff ff       	jmp    23d0 <_loapic_int_vec_set>

0000246c <_arch_irq_enable>:
 * virtualization.
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
    246c:	55                   	push   %ebp
    246d:	89 e5                	mov    %esp,%ebp
    246f:	8b 45 08             	mov    0x8(%ebp),%eax
	if (IS_IOAPIC_IRQ(irq)) {
    2472:	83 f8 17             	cmp    $0x17,%eax
    2475:	77 06                	ja     247d <_arch_irq_enable+0x11>
		_ioapic_irq_enable(irq);
	} else {
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
	}
}
    2477:	5d                   	pop    %ebp
		_ioapic_irq_enable(irq);
    2478:	e9 7f 00 00 00       	jmp    24fc <_ioapic_irq_enable>
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
    247d:	83 e8 18             	sub    $0x18,%eax
    2480:	89 45 08             	mov    %eax,0x8(%ebp)
}
    2483:	5d                   	pop    %ebp
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
    2484:	e9 6a ff ff ff       	jmp    23f3 <_loapic_irq_enable>

00002489 <__IoApicSet>:
 * @param offset Register offset (8 bits)
 * @param value Value to set the register
 * @return N/A
 */
static void __IoApicSet(s32_t offset, u32_t value)
{
    2489:	55                   	push   %ebp
    248a:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
    248c:	9c                   	pushf  
    248d:	fa                   	cli    
    248e:	59                   	pop    %ecx
    248f:	0f ba e1 09          	bt     $0x9,%ecx

	/* lock interrupts to ensure indirect addressing works "atomically" */

	key = irq_lock();

	*(volatile char *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_IND) = (char)offset;
    2493:	a2 00 00 c0 fe       	mov    %al,0xfec00000
	*((volatile u32_t *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_DATA)) = value;
    2498:	89 15 10 00 c0 fe    	mov    %edx,0xfec00010
    249e:	73 01                	jae    24a1 <__IoApicSet+0x18>
	__asm__ volatile (
    24a0:	fb                   	sti    

	irq_unlock(key);
}
    24a1:	5d                   	pop    %ebp
    24a2:	c3                   	ret    

000024a3 <_IoApicRedUpdateLo>:
 * @return N/A
 */
static void _IoApicRedUpdateLo(unsigned int irq,
				u32_t value,
				u32_t mask)
{
    24a3:	55                   	push   %ebp
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
    24a4:	01 c0                	add    %eax,%eax
{
    24a6:	89 e5                	mov    %esp,%ebp
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
    24a8:	83 c0 10             	add    $0x10,%eax
{
    24ab:	56                   	push   %esi
    24ac:	53                   	push   %ebx
	__asm__ volatile (
    24ad:	9c                   	pushf  
    24ae:	fa                   	cli    
    24af:	5e                   	pop    %esi
    24b0:	0f ba e6 09          	bt     $0x9,%esi
		(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_IND)) = (char)offset;
    24b4:	a2 00 00 c0 fe       	mov    %al,0xfec00000
	value = *((volatile u32_t *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_DATA));
    24b9:	8b 1d 10 00 c0 fe    	mov    0xfec00010,%ebx
    24bf:	73 01                	jae    24c2 <_IoApicRedUpdateLo+0x1f>
	__asm__ volatile (
    24c1:	fb                   	sti    
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
    24c2:	31 da                	xor    %ebx,%edx
    24c4:	21 ca                	and    %ecx,%edx
    24c6:	31 da                	xor    %ebx,%edx
}
    24c8:	5b                   	pop    %ebx
    24c9:	5e                   	pop    %esi
    24ca:	5d                   	pop    %ebp
	__IoApicSet(offset, lower32);
    24cb:	e9 b9 ff ff ff       	jmp    2489 <__IoApicSet>

000024d0 <_ioapic_init>:
{
    24d0:	55                   	push   %ebp
    24d1:	89 e5                	mov    %esp,%ebp
    24d3:	53                   	push   %ebx
    24d4:	bb 11 00 00 00       	mov    $0x11,%ebx
	__IoApicSet(offset, upper32);
    24d9:	31 d2                	xor    %edx,%edx
    24db:	89 d8                	mov    %ebx,%eax
    24dd:	e8 a7 ff ff ff       	call   2489 <__IoApicSet>
	__IoApicSet(offset, lower32);
    24e2:	8d 43 ff             	lea    -0x1(%ebx),%eax
    24e5:	ba 00 00 01 00       	mov    $0x10000,%edx
    24ea:	83 c3 02             	add    $0x2,%ebx
    24ed:	e8 97 ff ff ff       	call   2489 <__IoApicSet>
	for (ix = 0; ix < CONFIG_IOAPIC_NUM_RTES; ix++) {
    24f2:	83 fb 41             	cmp    $0x41,%ebx
    24f5:	75 e2                	jne    24d9 <_ioapic_init+0x9>
}
    24f7:	31 c0                	xor    %eax,%eax
    24f9:	5b                   	pop    %ebx
    24fa:	5d                   	pop    %ebp
    24fb:	c3                   	ret    

000024fc <_ioapic_irq_enable>:
{
    24fc:	55                   	push   %ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
    24fd:	b9 00 00 01 00       	mov    $0x10000,%ecx
{
    2502:	89 e5                	mov    %esp,%ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
    2504:	31 d2                	xor    %edx,%edx
    2506:	8b 45 08             	mov    0x8(%ebp),%eax
}
    2509:	5d                   	pop    %ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
    250a:	e9 94 ff ff ff       	jmp    24a3 <_IoApicRedUpdateLo>

0000250f <_ioapic_irq_set>:
{
    250f:	55                   	push   %ebp
	__IoApicSet(offset, upper32);
    2510:	31 d2                	xor    %edx,%edx
{
    2512:	89 e5                	mov    %esp,%ebp
    2514:	56                   	push   %esi
    2515:	53                   	push   %ebx
    2516:	8b 5d 08             	mov    0x8(%ebp),%ebx
	s32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
    2519:	01 db                	add    %ebx,%ebx
		   (vector & IOAPIC_VEC_MASK) | flags;
    251b:	0f b6 75 0c          	movzbl 0xc(%ebp),%esi
	s32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
    251f:	8d 43 11             	lea    0x11(%ebx),%eax
	rteValue = IOAPIC_FIXED | IOAPIC_INT_MASK | IOAPIC_PHYSICAL |
    2522:	0b 75 10             	or     0x10(%ebp),%esi
	__IoApicSet(offset, upper32);
    2525:	e8 5f ff ff ff       	call   2489 <__IoApicSet>
	rteValue = IOAPIC_FIXED | IOAPIC_INT_MASK | IOAPIC_PHYSICAL |
    252a:	81 ce 00 00 01 00    	or     $0x10000,%esi
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
    2530:	8d 43 10             	lea    0x10(%ebx),%eax
	__IoApicSet(offset, lower32);
    2533:	89 f2                	mov    %esi,%edx
}
    2535:	5b                   	pop    %ebx
    2536:	5e                   	pop    %esi
    2537:	5d                   	pop    %ebp
	__IoApicSet(offset, lower32);
    2538:	e9 4c ff ff ff       	jmp    2489 <__IoApicSet>

0000253d <_nop_char_out>:
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
    253d:	55                   	push   %ebp
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    253e:	31 c0                	xor    %eax,%eax
{
    2540:	89 e5                	mov    %esp,%ebp
}
    2542:	5d                   	pop    %ebp
    2543:	c3                   	ret    

00002544 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
    2544:	55                   	push   %ebp
    2545:	89 e5                	mov    %esp,%ebp
    2547:	8b 45 0c             	mov    0xc(%ebp),%eax
	ctx->count++;
    254a:	ff 00                	incl   (%eax)
	return _char_out(c);
}
    254c:	5d                   	pop    %ebp
	return _char_out(c);
    254d:	ff 25 1c 00 40 00    	jmp    *0x40001c

00002553 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2553:	55                   	push   %ebp
    2554:	89 e5                	mov    %esp,%ebp
    2556:	57                   	push   %edi
    2557:	56                   	push   %esi
    2558:	53                   	push   %ebx
    2559:	83 ec 18             	sub    $0x18,%esp
    255c:	89 c7                	mov    %eax,%edi
    255e:	8b 45 0c             	mov    0xc(%ebp),%eax
    2561:	89 d6                	mov    %edx,%esi
    2563:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    2566:	85 c0                	test   %eax,%eax
    2568:	7f 07                	jg     2571 <_printk_dec_ulong+0x1e>
    256a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
    2571:	31 db                	xor    %ebx,%ebx
    2573:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    2576:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
    257a:	0f 94 c3             	sete   %bl
    257d:	4b                   	dec    %ebx
    257e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
    2585:	83 e3 f0             	and    $0xfffffff0,%ebx
    2588:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%ebp)
    258f:	83 c3 30             	add    $0x30,%ebx
    2592:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    2599:	c7 45 ec ff c9 9a 3b 	movl   $0x3b9ac9ff,-0x14(%ebp)
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    25a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
    25a3:	39 55 ec             	cmp    %edx,-0x14(%ebp)
    25a6:	72 06                	jb     25ae <_printk_dec_ulong+0x5b>
    25a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    25ac:	74 22                	je     25d0 <_printk_dec_ulong+0x7d>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    25ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
    25b1:	31 d2                	xor    %edx,%edx
    25b3:	56                   	push   %esi
    25b4:	8d 48 01             	lea    0x1(%eax),%ecx
    25b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
    25ba:	f7 f1                	div    %ecx
    25bc:	83 c0 30             	add    $0x30,%eax
    25bf:	50                   	push   %eax
    25c0:	ff d7                	call   *%edi
    25c2:	59                   	pop    %ecx
			digits++;
    25c3:	ff 45 e0             	incl   -0x20(%ebp)
			out((int)((remainder / (pos + 1)) + 48), ctx);
    25c6:	58                   	pop    %eax
			found_largest_digit = 1;
    25c7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
    25ce:	eb 1e                	jmp    25ee <_printk_dec_ulong+0x9b>
		} else if (remaining <= min_width
    25d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
    25d3:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
    25d6:	7c 0f                	jl     25e7 <_printk_dec_ulong+0x94>
    25d8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    25dc:	77 09                	ja     25e7 <_printk_dec_ulong+0x94>
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    25de:	56                   	push   %esi
    25df:	53                   	push   %ebx
    25e0:	ff d7                	call   *%edi
			digits++;
    25e2:	ff 45 e0             	incl   -0x20(%ebp)
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    25e5:	58                   	pop    %eax
    25e6:	5a                   	pop    %edx
    25e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		}
		remaining--;
		remainder %= (pos + 1);
    25ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
		remaining--;
    25f1:	ff 4d dc             	decl   -0x24(%ebp)
		remainder %= (pos + 1);
    25f4:	40                   	inc    %eax
    25f5:	89 c2                	mov    %eax,%edx
    25f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
    25fa:	89 d1                	mov    %edx,%ecx
    25fc:	31 d2                	xor    %edx,%edx
    25fe:	f7 f1                	div    %ecx
    2600:	89 55 f0             	mov    %edx,-0x10(%ebp)
		pos /= 10;
    2603:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2606:	31 d2                	xor    %edx,%edx
    2608:	b9 0a 00 00 00       	mov    $0xa,%ecx
    260d:	f7 f1                	div    %ecx
    260f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	while (pos >= 9) {
    2612:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
    2616:	75 88                	jne    25a0 <_printk_dec_ulong+0x4d>
	}
	out((int)(remainder + 48), ctx);
    2618:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    261b:	56                   	push   %esi
    261c:	83 c1 30             	add    $0x30,%ecx
    261f:	51                   	push   %ecx
    2620:	ff d7                	call   *%edi
    2622:	59                   	pop    %ecx
    2623:	5b                   	pop    %ebx

	if (padding == PAD_SPACE_AFTER) {
    2624:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
    2628:	75 14                	jne    263e <_printk_dec_ulong+0xeb>
		remaining = min_width - digits;
    262a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    262d:	2b 5d e0             	sub    -0x20(%ebp),%ebx
		while (remaining-- > 0) {
    2630:	85 db                	test   %ebx,%ebx
    2632:	7e 0a                	jle    263e <_printk_dec_ulong+0xeb>
			out(' ', ctx);
    2634:	56                   	push   %esi
    2635:	4b                   	dec    %ebx
    2636:	6a 20                	push   $0x20
    2638:	ff d7                	call   *%edi
    263a:	58                   	pop    %eax
    263b:	5a                   	pop    %edx
    263c:	eb f2                	jmp    2630 <_printk_dec_ulong+0xdd>
		}
	}
}
    263e:	8d 65 f4             	lea    -0xc(%ebp),%esp
    2641:	5b                   	pop    %ebx
    2642:	5e                   	pop    %esi
    2643:	5f                   	pop    %edi
    2644:	5d                   	pop    %ebp
    2645:	c3                   	ret    

00002646 <__printk_hook_install>:
{
    2646:	55                   	push   %ebp
    2647:	89 e5                	mov    %esp,%ebp
	_char_out = fn;
    2649:	8b 45 08             	mov    0x8(%ebp),%eax
}
    264c:	5d                   	pop    %ebp
	_char_out = fn;
    264d:	a3 1c 00 40 00       	mov    %eax,0x40001c
}
    2652:	c3                   	ret    

00002653 <_vprintk>:
{
    2653:	55                   	push   %ebp
    2654:	89 e5                	mov    %esp,%ebp
    2656:	57                   	push   %edi
    2657:	56                   	push   %esi
    2658:	53                   	push   %ebx
    2659:	83 ec 20             	sub    $0x20,%esp
	int long_ctr = 0;
    265c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
{
    2663:	8b 7d 08             	mov    0x8(%ebp),%edi
    2666:	8b 5d 14             	mov    0x14(%ebp),%ebx
	int min_width = -1;
    2669:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
	enum pad_type padding = PAD_NONE;
    2670:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int might_format = 0; /* 1 if encountered a '%' */
    2677:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	while (*fmt) {
    267e:	8b 45 10             	mov    0x10(%ebp),%eax
    2681:	0f be 00             	movsbl (%eax),%eax
    2684:	84 c0                	test   %al,%al
    2686:	0f 84 bb 02 00 00    	je     2947 <_vprintk+0x2f4>
		if (!might_format) {
    268c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    2690:	75 15                	jne    26a7 <_vprintk+0x54>
			if (*fmt != '%') {
    2692:	3c 25                	cmp    $0x25,%al
    2694:	0f 84 80 02 00 00    	je     291a <_vprintk+0x2c7>
				out((int)*fmt, ctx);
    269a:	ff 75 0c             	pushl  0xc(%ebp)
    269d:	50                   	push   %eax
    269e:	ff d7                	call   *%edi
    26a0:	58                   	pop    %eax
    26a1:	5a                   	pop    %edx
    26a2:	e9 98 02 00 00       	jmp    293f <_vprintk+0x2ec>
			switch (*fmt) {
    26a7:	3c 64                	cmp    $0x64,%al
    26a9:	0f 84 ee 00 00 00    	je     279d <_vprintk+0x14a>
    26af:	7f 4f                	jg     2700 <_vprintk+0xad>
    26b1:	3c 39                	cmp    $0x39,%al
    26b3:	7f 2a                	jg     26df <_vprintk+0x8c>
    26b5:	3c 31                	cmp    $0x31,%al
    26b7:	0f 8d ac 00 00 00    	jge    2769 <_vprintk+0x116>
    26bd:	3c 2d                	cmp    $0x2d,%al
    26bf:	0f 84 86 00 00 00    	je     274b <_vprintk+0xf8>
    26c5:	3c 30                	cmp    $0x30,%al
    26c7:	0f 84 8a 00 00 00    	je     2757 <_vprintk+0x104>
    26cd:	3c 25                	cmp    $0x25,%al
    26cf:	0f 85 25 02 00 00    	jne    28fa <_vprintk+0x2a7>
				out((int)'%', ctx);
    26d5:	ff 75 0c             	pushl  0xc(%ebp)
    26d8:	6a 25                	push   $0x25
    26da:	e9 2e 02 00 00       	jmp    290d <_vprintk+0x2ba>
			switch (*fmt) {
    26df:	3c 58                	cmp    $0x58,%al
    26e1:	0f 84 27 01 00 00    	je     280e <_vprintk+0x1bb>
    26e7:	3c 63                	cmp    $0x63,%al
    26e9:	0f 85 0b 02 00 00    	jne    28fa <_vprintk+0x2a7>
				out(c, ctx);
    26ef:	ff 75 0c             	pushl  0xc(%ebp)
    26f2:	ff 33                	pushl  (%ebx)
				int c = va_arg(ap, int);
    26f4:	8d 73 04             	lea    0x4(%ebx),%esi
				out(c, ctx);
    26f7:	ff d7                	call   *%edi
    26f9:	58                   	pop    %eax
    26fa:	5a                   	pop    %edx
    26fb:	e9 f6 01 00 00       	jmp    28f6 <_vprintk+0x2a3>
			switch (*fmt) {
    2700:	3c 70                	cmp    $0x70,%al
    2702:	0f 84 e6 00 00 00    	je     27ee <_vprintk+0x19b>
    2708:	7f 10                	jg     271a <_vprintk+0xc7>
    270a:	3c 69                	cmp    $0x69,%al
    270c:	0f 84 8b 00 00 00    	je     279d <_vprintk+0x14a>
    2712:	3c 6c                	cmp    $0x6c,%al
    2714:	74 7f                	je     2795 <_vprintk+0x142>
    2716:	3c 68                	cmp    $0x68,%al
    2718:	eb 26                	jmp    2740 <_vprintk+0xed>
    271a:	3c 75                	cmp    $0x75,%al
    271c:	0f 84 a7 00 00 00    	je     27c9 <_vprintk+0x176>
    2722:	7f 12                	jg     2736 <_vprintk+0xe3>
    2724:	3c 73                	cmp    $0x73,%al
    2726:	0f 85 ce 01 00 00    	jne    28fa <_vprintk+0x2a7>
				char *s = va_arg(ap, char *);
    272c:	8d 73 04             	lea    0x4(%ebx),%esi
    272f:	8b 1b                	mov    (%ebx),%ebx
				while (*s)
    2731:	e9 ae 01 00 00       	jmp    28e4 <_vprintk+0x291>
			switch (*fmt) {
    2736:	3c 78                	cmp    $0x78,%al
    2738:	0f 84 d0 00 00 00    	je     280e <_vprintk+0x1bb>
    273e:	3c 7a                	cmp    $0x7a,%al
    2740:	0f 84 f9 01 00 00    	je     293f <_vprintk+0x2ec>
    2746:	e9 af 01 00 00       	jmp    28fa <_vprintk+0x2a7>
				padding = PAD_SPACE_AFTER;
    274b:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    2752:	e9 e8 01 00 00       	jmp    293f <_vprintk+0x2ec>
				if (min_width < 0 && padding == PAD_NONE) {
    2757:	8b 55 f0             	mov    -0x10(%ebp),%edx
    275a:	c1 ea 1f             	shr    $0x1f,%edx
    275d:	74 0a                	je     2769 <_vprintk+0x116>
    275f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
    2763:	0f 84 cf 01 00 00    	je     2938 <_vprintk+0x2e5>
				if (min_width < 0) {
    2769:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
    276d:	79 05                	jns    2774 <_vprintk+0x121>
					min_width = *fmt - '0';
    276f:	83 e8 30             	sub    $0x30,%eax
    2772:	eb 08                	jmp    277c <_vprintk+0x129>
					min_width = 10 * min_width + *fmt - '0';
    2774:	6b 55 f0 0a          	imul   $0xa,-0x10(%ebp),%edx
    2778:	8d 44 10 d0          	lea    -0x30(%eax,%edx,1),%eax
    277c:	89 45 f0             	mov    %eax,-0x10(%ebp)
				if (padding == PAD_NONE) {
    277f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
    2783:	0f 85 b6 01 00 00    	jne    293f <_vprintk+0x2ec>
					padding = PAD_SPACE_BEFORE;
    2789:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    2790:	e9 aa 01 00 00       	jmp    293f <_vprintk+0x2ec>
				long_ctr++;
    2795:	ff 45 e4             	incl   -0x1c(%ebp)
    2798:	e9 a2 01 00 00       	jmp    293f <_vprintk+0x2ec>
					d = va_arg(ap, long);
    279d:	8b 33                	mov    (%ebx),%esi
				if (long_ctr < 2) {
    279f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
    27a3:	7f 05                	jg     27aa <_vprintk+0x157>
					d = va_arg(ap, long);
    27a5:	83 c3 04             	add    $0x4,%ebx
    27a8:	eb 03                	jmp    27ad <_vprintk+0x15a>
					d = (long)va_arg(ap, long long);
    27aa:	83 c3 08             	add    $0x8,%ebx
				if (d < 0) {
    27ad:	85 f6                	test   %esi,%esi
    27af:	79 0e                	jns    27bf <_vprintk+0x16c>
					out((int)'-', ctx);
    27b1:	ff 75 0c             	pushl  0xc(%ebp)
    27b4:	6a 2d                	push   $0x2d
    27b6:	ff d7                	call   *%edi
					min_width--;
    27b8:	ff 4d f0             	decl   -0x10(%ebp)
					out((int)'-', ctx);
    27bb:	59                   	pop    %ecx
					d = -d;
    27bc:	f7 de                	neg    %esi
					out((int)'-', ctx);
    27be:	58                   	pop    %eax
				_printk_dec_ulong(out, ctx, d, padding,
    27bf:	ff 75 f0             	pushl  -0x10(%ebp)
    27c2:	89 f1                	mov    %esi,%ecx
    27c4:	ff 75 ec             	pushl  -0x14(%ebp)
    27c7:	eb 16                	jmp    27df <_vprintk+0x18c>
					u = va_arg(ap, unsigned long);
    27c9:	8b 0b                	mov    (%ebx),%ecx
				if (long_ctr < 2) {
    27cb:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
    27cf:	7f 05                	jg     27d6 <_vprintk+0x183>
					u = va_arg(ap, unsigned long);
    27d1:	83 c3 04             	add    $0x4,%ebx
    27d4:	eb 03                	jmp    27d9 <_vprintk+0x186>
					u = (unsigned long)va_arg(ap,
    27d6:	83 c3 08             	add    $0x8,%ebx
				_printk_dec_ulong(out, ctx, u, padding,
    27d9:	ff 75 f0             	pushl  -0x10(%ebp)
    27dc:	ff 75 ec             	pushl  -0x14(%ebp)
    27df:	8b 55 0c             	mov    0xc(%ebp),%edx
    27e2:	89 f8                	mov    %edi,%eax
    27e4:	e8 6a fd ff ff       	call   2553 <_printk_dec_ulong>
    27e9:	e9 21 01 00 00       	jmp    290f <_vprintk+0x2bc>
				  out('0', ctx);
    27ee:	ff 75 0c             	pushl  0xc(%ebp)
    27f1:	6a 30                	push   $0x30
    27f3:	ff d7                	call   *%edi
    27f5:	59                   	pop    %ecx
    27f6:	5e                   	pop    %esi
				  out('x', ctx);
    27f7:	ff 75 0c             	pushl  0xc(%ebp)
    27fa:	6a 78                	push   $0x78
    27fc:	ff d7                	call   *%edi
    27fe:	58                   	pop    %eax
				  min_width = 8;
    27ff:	c7 45 f0 08 00 00 00 	movl   $0x8,-0x10(%ebp)
				  out('x', ctx);
    2806:	5a                   	pop    %edx
				  padding = PAD_ZERO_BEFORE;
    2807:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
					x = va_arg(ap, unsigned long);
    280e:	8b 03                	mov    (%ebx),%eax
				if (long_ctr < 2) {
    2810:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
					x = va_arg(ap, unsigned long);
    2814:	89 45 dc             	mov    %eax,-0x24(%ebp)
				if (long_ctr < 2) {
    2817:	7f 05                	jg     281e <_vprintk+0x1cb>
					x = va_arg(ap, unsigned long);
    2819:	83 c3 04             	add    $0x4,%ebx
    281c:	eb 03                	jmp    2821 <_vprintk+0x1ce>
					x = (unsigned long)va_arg(ap,
    281e:	83 c3 08             	add    $0x8,%ebx
	int remaining = 8; /* 8 digits max */
    2821:	ba 08 00 00 00       	mov    $0x8,%edx
	int digits = 0;
    2826:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	int found_largest_digit = 0;
    282d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	int size = sizeof(num) * 2;
    2834:	be 08 00 00 00       	mov    $0x8,%esi
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2839:	4e                   	dec    %esi
    283a:	8b 45 dc             	mov    -0x24(%ebp),%eax
    283d:	8d 0c b5 00 00 00 00 	lea    0x0(,%esi,4),%ecx
    2844:	d3 e8                	shr    %cl,%eax
		if (nibble || found_largest_digit || size == 1) {
    2846:	24 0f                	and    $0xf,%al
    2848:	75 0e                	jne    2858 <_vprintk+0x205>
    284a:	f6 45 e0 01          	testb  $0x1,-0x20(%ebp)
    284e:	75 08                	jne    2858 <_vprintk+0x205>
    2850:	85 f6                	test   %esi,%esi
    2852:	75 31                	jne    2885 <_vprintk+0x232>
			nibble += nibble > 9 ? 87 : 48;
    2854:	b1 30                	mov    $0x30,%cl
    2856:	eb 0c                	jmp    2864 <_vprintk+0x211>
    2858:	3c 09                	cmp    $0x9,%al
    285a:	0f 9f c1             	setg   %cl
    285d:	49                   	dec    %ecx
    285e:	83 e1 d9             	and    $0xffffffd9,%ecx
    2861:	83 c1 57             	add    $0x57,%ecx
			out((int)nibble, ctx);
    2864:	ff 75 0c             	pushl  0xc(%ebp)
			nibble += nibble > 9 ? 87 : 48;
    2867:	01 c1                	add    %eax,%ecx
    2869:	89 55 e0             	mov    %edx,-0x20(%ebp)
			out((int)nibble, ctx);
    286c:	0f b6 c9             	movzbl %cl,%ecx
    286f:	51                   	push   %ecx
    2870:	ff d7                	call   *%edi
    2872:	58                   	pop    %eax
			found_largest_digit = 1;
    2873:	8b 45 e8             	mov    -0x18(%ebp),%eax
			out((int)nibble, ctx);
    2876:	5a                   	pop    %edx
			digits++;
    2877:	8b 55 e0             	mov    -0x20(%ebp),%edx
    287a:	ff 45 d4             	incl   -0x2c(%ebp)
    287d:	89 55 d8             	mov    %edx,-0x28(%ebp)
			found_largest_digit = 1;
    2880:	89 45 e0             	mov    %eax,-0x20(%ebp)
    2883:	eb 2e                	jmp    28b3 <_vprintk+0x260>
		if (remaining-- <= min_width) {
    2885:	8d 42 ff             	lea    -0x1(%edx),%eax
    2888:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    288f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    2892:	39 55 f0             	cmp    %edx,-0x10(%ebp)
    2895:	7c 1c                	jl     28b3 <_vprintk+0x260>
			if (padding == PAD_ZERO_BEFORE) {
    2897:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
    289b:	75 07                	jne    28a4 <_vprintk+0x251>
				out('0', ctx);
    289d:	ff 75 0c             	pushl  0xc(%ebp)
    28a0:	6a 30                	push   $0x30
    28a2:	eb 0b                	jmp    28af <_vprintk+0x25c>
			} else if (padding == PAD_SPACE_BEFORE) {
    28a4:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
    28a8:	75 09                	jne    28b3 <_vprintk+0x260>
				out(' ', ctx);
    28aa:	ff 75 0c             	pushl  0xc(%ebp)
    28ad:	6a 20                	push   $0x20
    28af:	ff d7                	call   *%edi
    28b1:	59                   	pop    %ecx
    28b2:	58                   	pop    %eax
	for (; size; size--) {
    28b3:	85 f6                	test   %esi,%esi
    28b5:	74 08                	je     28bf <_vprintk+0x26c>
    28b7:	8b 55 d8             	mov    -0x28(%ebp),%edx
    28ba:	e9 7a ff ff ff       	jmp    2839 <_vprintk+0x1e6>
			might_format = 0;
    28bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	if (padding == PAD_SPACE_AFTER) {
    28c6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
    28ca:	75 73                	jne    293f <_vprintk+0x2ec>
		remaining = min_width * 2 - digits;
    28cc:	8b 75 f0             	mov    -0x10(%ebp),%esi
    28cf:	01 f6                	add    %esi,%esi
    28d1:	2b 75 d4             	sub    -0x2c(%ebp),%esi
		while (remaining-- > 0) {
    28d4:	85 f6                	test   %esi,%esi
    28d6:	7e 39                	jle    2911 <_vprintk+0x2be>
			out(' ', ctx);
    28d8:	ff 75 0c             	pushl  0xc(%ebp)
    28db:	4e                   	dec    %esi
    28dc:	6a 20                	push   $0x20
    28de:	ff d7                	call   *%edi
    28e0:	58                   	pop    %eax
    28e1:	5a                   	pop    %edx
    28e2:	eb f0                	jmp    28d4 <_vprintk+0x281>
				while (*s)
    28e4:	0f be 03             	movsbl (%ebx),%eax
    28e7:	84 c0                	test   %al,%al
    28e9:	74 0b                	je     28f6 <_vprintk+0x2a3>
					out((int)(*s++), ctx);
    28eb:	ff 75 0c             	pushl  0xc(%ebp)
    28ee:	43                   	inc    %ebx
    28ef:	50                   	push   %eax
    28f0:	ff d7                	call   *%edi
    28f2:	59                   	pop    %ecx
    28f3:	58                   	pop    %eax
    28f4:	eb ee                	jmp    28e4 <_vprintk+0x291>
				int c = va_arg(ap, int);
    28f6:	89 f3                	mov    %esi,%ebx
    28f8:	eb 17                	jmp    2911 <_vprintk+0x2be>
				out((int)'%', ctx);
    28fa:	ff 75 0c             	pushl  0xc(%ebp)
    28fd:	6a 25                	push   $0x25
    28ff:	ff d7                	call   *%edi
    2901:	59                   	pop    %ecx
    2902:	5e                   	pop    %esi
				out((int)*fmt, ctx);
    2903:	ff 75 0c             	pushl  0xc(%ebp)
    2906:	8b 45 10             	mov    0x10(%ebp),%eax
    2909:	0f be 00             	movsbl (%eax),%eax
    290c:	50                   	push   %eax
    290d:	ff d7                	call   *%edi
    290f:	58                   	pop    %eax
    2910:	5a                   	pop    %edx
			might_format = 0;
    2911:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
				break;
    2918:	eb 25                	jmp    293f <_vprintk+0x2ec>
				long_ctr = 0;
    291a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				min_width = -1;
    2921:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
				padding = PAD_NONE;
    2928:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
				might_format = 1;
    292f:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
    2936:	eb 07                	jmp    293f <_vprintk+0x2ec>
					padding = PAD_ZERO_BEFORE;
    2938:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
		++fmt;
    293f:	ff 45 10             	incl   0x10(%ebp)
    2942:	e9 37 fd ff ff       	jmp    267e <_vprintk+0x2b>
}
    2947:	8d 65 f4             	lea    -0xc(%ebp),%esp
    294a:	5b                   	pop    %ebx
    294b:	5e                   	pop    %esi
    294c:	5f                   	pop    %edi
    294d:	5d                   	pop    %ebp
    294e:	c3                   	ret    

0000294f <vprintk>:
{
    294f:	55                   	push   %ebp
    2950:	89 e5                	mov    %esp,%ebp
    2952:	50                   	push   %eax
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    2953:	ff 75 0c             	pushl  0xc(%ebp)
    2956:	ff 75 08             	pushl  0x8(%ebp)
    2959:	8d 45 fc             	lea    -0x4(%ebp),%eax
	struct out_context ctx = { 0 };
    295c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    2963:	50                   	push   %eax
    2964:	68 44 25 00 00       	push   $0x2544
    2969:	e8 e5 fc ff ff       	call   2653 <_vprintk>
}
    296e:	8b 45 fc             	mov    -0x4(%ebp),%eax
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    2971:	83 c4 10             	add    $0x10,%esp
}
    2974:	c9                   	leave  
    2975:	c3                   	ret    

00002976 <printk>:
{
    2976:	55                   	push   %ebp
    2977:	89 e5                	mov    %esp,%ebp
	va_start(ap, fmt);
    2979:	8d 45 0c             	lea    0xc(%ebp),%eax
	ret = vprintk(fmt, ap);
    297c:	50                   	push   %eax
    297d:	ff 75 08             	pushl  0x8(%ebp)
    2980:	e8 ca ff ff ff       	call   294f <vprintk>
    2985:	5a                   	pop    %edx
    2986:	59                   	pop    %ecx
}
    2987:	c9                   	leave  
    2988:	c3                   	ret    

00002989 <_ConfigAbsSyms>:
/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    2989:	55                   	push   %ebp
    298a:	89 e5                	mov    %esp,%ebp
GEN_ABSOLUTE_SYM(CONFIG_HPET_TIMER_LEGACY_EMULATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_X86_MMU, 1);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_ISA_IA32, 1);

GEN_ABS_SYM_END
    298c:	5d                   	pop    %ebp
    298d:	c3                   	ret    

0000298e <k_cpu_idle>:
 * will be issued causing a low-power consumption sleep mode.
 *
 * @return N/A
 */
void k_cpu_idle(void)
{
    298e:	55                   	push   %ebp
    298f:	89 e5                	mov    %esp,%ebp
	_sys_k_event_logger_enter_sleep();
#if defined(CONFIG_BOOT_TIME_MEASUREMENT)
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	__asm__ volatile (
    2991:	fb                   	sti    
    2992:	f4                   	hlt    
	    "sti\n\t"
	    "hlt\n\t");
}
    2993:	5d                   	pop    %ebp
    2994:	c3                   	ret    

00002995 <_SysFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN __weak void _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    2995:	55                   	push   %ebp
    2996:	89 e5                	mov    %esp,%ebp
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2998:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
    299c:	74 54                	je     29f2 <_SysFatalErrorHandler+0x5d>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    299e:	e8 37 0c 00 00       	call   35da <k_is_in_isr>
    29a3:	85 c0                	test   %eax,%eax
    29a5:	74 15                	je     29bc <_SysFatalErrorHandler+0x27>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    29a7:	e8 2e 0c 00 00       	call   35da <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    29ac:	ba ac 39 00 00       	mov    $0x39ac,%edx
    29b1:	85 c0                	test   %eax,%eax
    29b3:	75 30                	jne    29e5 <_SysFatalErrorHandler+0x50>
    29b5:	ba b0 39 00 00       	mov    $0x39b0,%edx
    29ba:	eb 29                	jmp    29e5 <_SysFatalErrorHandler+0x50>
	if (k_is_in_isr() || _is_thread_essential()) {
    29bc:	e8 2a 0c 00 00       	call   35eb <_is_thread_essential>
    29c1:	85 c0                	test   %eax,%eax
    29c3:	75 e2                	jne    29a7 <_SysFatalErrorHandler+0x12>
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    29c5:	ff 35 08 51 40 00    	pushl  0x405108
    29cb:	68 e1 39 00 00       	push   $0x39e1
    29d0:	e8 a1 ff ff ff       	call   2976 <printk>
    29d5:	5a                   	pop    %edx
    29d6:	59                   	pop    %ecx
	k_thread_abort(_current);
    29d7:	ff 35 08 51 40 00    	pushl  0x405108
    29dd:	e8 32 0e 00 00       	call   3814 <k_thread_abort>
    29e2:	58                   	pop    %eax
    29e3:	eb 0d                	jmp    29f2 <_SysFatalErrorHandler+0x5d>
		printk("Fatal fault in %s! Spinning...\n",
    29e5:	52                   	push   %edx
    29e6:	68 c1 39 00 00       	push   $0x39c1
    29eb:	e8 86 ff ff ff       	call   2976 <printk>
    29f0:	58                   	pop    %eax
    29f1:	5a                   	pop    %edx
#else
	ARG_UNUSED(reason);
#endif

#ifdef CONFIG_BOARD_QEMU_X86
	printk("Terminate emulator due to fatal kernel error\n");
    29f2:	68 06 3a 00 00       	push   $0x3a06
    29f7:	e8 7a ff ff ff       	call   2976 <printk>
    29fc:	58                   	pop    %eax
	__asm__ volatile("outl	%0, %w1;\n\t"
    29fd:	31 c0                	xor    %eax,%eax
    29ff:	e7 f4                	out    %eax,$0xf4

00002a01 <_cache_line_size_get>:
	#define CPUID_CACHE_LINE_MASK (0xff << 8)

	GTEXT(_cache_line_size_get)

SECTION_FUNC(TEXT, _cache_line_size_get)
	pushl %ebx
    2a01:	53                   	push   %ebx
	movl $1, %eax
    2a02:	b8 01 00 00 00       	mov    $0x1,%eax
	cpuid
    2a07:	0f a2                	cpuid  
	movl %ebx, %eax
    2a09:	89 d8                	mov    %ebx,%eax
	andl $CPUID_CACHE_LINE_MASK, %eax
    2a0b:	25 00 ff 00 00       	and    $0xff00,%eax
	shrl $5,%eax	/* shift right 8 to get value, then multiple by 8
    2a10:	c1 e8 05             	shr    $0x5,%eax
					 * to get cache line size */
	popl %ebx
    2a13:	5b                   	pop    %ebx
	ret
    2a14:	c3                   	ret    

00002a15 <init_cache>:
#else
#define init_cache_line_size() do { } while ((0))
#endif

static int init_cache(struct device *unused)
{
    2a15:	55                   	push   %ebp
    2a16:	89 e5                	mov    %esp,%ebp
	sys_cache_line_size = _cache_line_size_get();
    2a18:	e8 e4 ff ff ff       	call   2a01 <_cache_line_size_get>

	init_cache_flush();
	init_cache_line_size();

	return 0;
}
    2a1d:	5d                   	pop    %ebp
	sys_cache_line_size = _cache_line_size_get();
    2a1e:	a3 24 52 40 00       	mov    %eax,0x405224
}
    2a23:	31 c0                	xor    %eax,%eax
    2a25:	c3                   	ret    

00002a26 <_exception_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * exception exits.
	 */

	cld
    2a26:	fc                   	cld    


	/*
	 * Swap ecx and handler function on the current stack;
	 */
	xchgl	%ecx, (%esp)
    2a27:	87 0c 24             	xchg   %ecx,(%esp)

	/*
	 * Push the remaining volatile registers on the existing stack.
	 */

	pushl	%eax
    2a2a:	50                   	push   %eax
	pushl	%edx
    2a2b:	52                   	push   %edx
	/*
	 * Push the cooperative registers on the existing stack as they are
	 * required by debug tools.
	 */

	pushl	%edi
    2a2c:	57                   	push   %edi
	pushl	%esi
    2a2d:	56                   	push   %esi
	pushl	%ebx
    2a2e:	53                   	push   %ebx
	pushl	%ebp
    2a2f:	55                   	push   %ebp

	leal	44(%esp), %eax   /* Calculate ESP before interrupt occurred */
    2a30:	8d 44 24 2c          	lea    0x2c(%esp),%eax
	pushl	%eax             /* Save calculated ESP */
    2a34:	50                   	push   %eax
	 * Test IF bit of saved EFLAGS and re-enable interrupts if IF=1.
	 */

	/* ESP is still pointing to the ESF at this point */

	testl	$0x200, __NANO_ESF_eflags_OFFSET(%esp)
    2a35:	f7 44 24 2c 00 02 00 	testl  $0x200,0x2c(%esp)
    2a3c:	00 
	je	allDone
    2a3d:	74 01                	je     2a40 <allDone>
	sti
    2a3f:	fb                   	sti    

00002a40 <allDone>:

allDone:
#if CONFIG_X86_IAMCU
	movl	%esp, %eax		/* NANO_ESF * parameter */
#else
	pushl	%esp			/* push NANO_ESF * parameter */
    2a40:	54                   	push   %esp
#endif
	call	*%ecx			/* call exception handler */
    2a41:	ff d1                	call   *%ecx

#ifndef CONFIG_X86_IAMCU
	addl	$0x4, %esp
    2a43:	83 c4 04             	add    $0x4,%esp
	 * Pop the non-volatile registers from the stack.
	 * Note that debug tools may have altered the saved register values while
	 * the task was stopped, and we want to pick up the altered values.
	 */

	popl	%ebp		/* Discard saved ESP */
    2a46:	5d                   	pop    %ebp
	popl	%ebp
    2a47:	5d                   	pop    %ebp
	popl	%ebx
    2a48:	5b                   	pop    %ebx
	popl	%esi
    2a49:	5e                   	pop    %esi
	popl	%edi
    2a4a:	5f                   	pop    %edi

	/* restore edx and ecx which are always saved on the stack */

	popl	%edx
    2a4b:	5a                   	pop    %edx
	popl	%eax
    2a4c:	58                   	pop    %eax
	popl	%ecx
    2a4d:	59                   	pop    %ecx

	addl	$4, %esp	/* "pop" error code */
    2a4e:	83 c4 04             	add    $0x4,%esp

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
    2a51:	cf                   	iret   

00002a52 <_kernel_oops_handler>:

#if CONFIG_X86_KERNEL_OOPS
SECTION_FUNC(TEXT, _kernel_oops_handler)
	push $0 /* dummy error code */
    2a52:	6a 00                	push   $0x0
	push $_do_kernel_oops
    2a54:	68 ad 2e 00 00       	push   $0x2ead
	jmp _exception_enter
    2a59:	e9 c8 ff ff ff       	jmp    2a26 <_exception_enter>

00002a5e <_interrupt_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * interrupt exits via the IRET instruction.
	 */

	cld
    2a5e:	fc                   	cld    

	/*
	 * Swap EAX with isr_param and EDX with isr.
	 * Push ECX onto the stack
	 */
	xchgl	%eax, 4(%esp)
    2a5f:	87 44 24 04          	xchg   %eax,0x4(%esp)
	xchgl	%edx, (%esp)
    2a63:	87 14 24             	xchg   %edx,(%esp)
	pushl	%ecx
    2a66:	51                   	push   %ecx

	/* Push EDI as we will use it for scratch space.
	 * Rest of the callee-saved regs get saved by invocation of C
	 * functions (isr handler, __swap(), etc)
	 */
	pushl	%edi
    2a67:	57                   	push   %edi
	popl	%eax
#endif

	/* load %ecx with &_kernel */

	movl	$_kernel, %ecx
    2a68:	b9 00 51 40 00       	mov    $0x405100,%ecx

	/* switch to the interrupt stack for the non-nested case */

	incl	_kernel_offset_to_nested(%ecx)
    2a6d:	ff 01                	incl   (%ecx)

	/* use interrupt stack if not nested */
	cmpl	$1, _kernel_offset_to_nested(%ecx)
    2a6f:	83 39 01             	cmpl   $0x1,(%ecx)
#ifdef CONFIG_DEBUG_INFO
	jne	nested_save_isf
#else
	jne	alreadyOnIntStack
    2a72:	75 06                	jne    2a7a <alreadyOnIntStack>
	/*
	 * switch to base of the interrupt stack: save esp in edi, then load
	 * irq_stack pointer
	 */

	movl	%esp, %edi
    2a74:	89 e7                	mov    %esp,%edi
	movl	_kernel_offset_to_irq_stack(%ecx), %esp
    2a76:	8b 61 04             	mov    0x4(%ecx),%esp


	/* save thread's stack pointer onto base of interrupt stack */

	pushl	%edi			/* Save stack pointer */
    2a79:	57                   	push   %edi

00002a7a <alreadyOnIntStack>:

#ifndef CONFIG_X86_IAMCU
	/* EAX has the interrupt handler argument, needs to go on
	 * stack for sys V calling convention
	 */
	push	%eax
    2a7a:	50                   	push   %eax
	pop %edx
	pop %eax
#endif

#ifdef CONFIG_NESTED_INTERRUPTS
	sti			/* re-enable interrupts */
    2a7b:	fb                   	sti    
#endif
	/* Now call the interrupt handler */
	call	*%edx
    2a7c:	ff d2                	call   *%edx
#ifndef CONFIG_X86_IAMCU
	/* Discard ISR argument */
	addl	$0x4, %esp
    2a7e:	83 c4 04             	add    $0x4,%esp
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	cli			/* disable interrupts again */
    2a81:	fa                   	cli    
#endif

	/* irq_controller.h interface */
	_irq_controller_eoi_macro
    2a82:	31 c0                	xor    %eax,%eax
    2a84:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_start
#endif

	/* determine whether exiting from a nested interrupt */
	movl	$_kernel, %ecx
    2a89:	b9 00 51 40 00       	mov    $0x405100,%ecx
#ifdef CONFIG_DEBUG_INFO
	popl	_kernel_offset_to_isf(%ecx)    /* Restore old ISF */
#endif
	decl	_kernel_offset_to_nested(%ecx)	/* dec interrupt nest count */
    2a8e:	ff 09                	decl   (%ecx)
	jne	nestedInterrupt                 /* 'iret' if nested case */
    2a90:	75 25                	jne    2ab7 <nestedInterrupt>


#ifdef CONFIG_PREEMPT_ENABLED
	movl	_kernel_offset_to_current(%ecx), %edx
    2a92:	8b 51 08             	mov    0x8(%ecx),%edx

	/*
	 * Non-preemptible thread ? Do not schedule (see explanation of
	 * preempt field in kernel_struct.h).
	 */
	cmpw	$_NON_PREEMPT_THRESHOLD, _thread_offset_to_preempt(%edx)
    2a95:	66 81 7a 0a 80 00    	cmpw   $0x80,0xa(%edx)
	jae	noReschedule
    2a9b:	73 19                	jae    2ab6 <noReschedule>


	/* reschedule only if the scheduler says that we must do so */
	cmpl	%edx, _kernel_offset_to_ready_q_cache(%ecx)
    2a9d:	39 51 14             	cmp    %edx,0x14(%ecx)
	je	noReschedule
    2aa0:	74 14                	je     2ab6 <noReschedule>
	 * the existing __swap() primitive to save the remaining
	 * thread's registers (including floating point) and perform
	 * a switch to the new thread.
	 */

	popl	%esp	/* switch back to outgoing thread's stack */
    2aa2:	5c                   	pop    %esp
	popl	%ebx
	popl	%esi
#endif

#if defined(CONFIG_TIMESLICING)
	call	_update_time_slice_before_swap
    2aa3:	e8 0f 09 00 00       	call   33b7 <_update_time_slice_before_swap>
#endif
#ifdef CONFIG_STACK_SENTINEL
	call	_check_stack_sentinel
#endif
	pushfl			/* push KERNEL_LOCK_KEY argument */
    2aa8:	9c                   	pushf  
#ifdef CONFIG_X86_IAMCU
	/* IAMCU first argument goes into a register, not the stack.
	 */
	popl	%eax
#endif
	call	__swap
    2aa9:	e8 26 00 00 00       	call   2ad4 <__swap>

#ifndef CONFIG_X86_IAMCU
	addl 	$4, %esp	/* pop KERNEL_LOCK_KEY argument */
    2aae:	83 c4 04             	add    $0x4,%esp

	/* Restore volatile registers and return to the interrupted thread */
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_stop
#endif
	popl	%edi
    2ab1:	5f                   	pop    %edi
	popl	%ecx
    2ab2:	59                   	pop    %ecx
	popl	%edx
    2ab3:	5a                   	pop    %edx
	popl	%eax
    2ab4:	58                   	pop    %eax

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
    2ab5:	cf                   	iret   

00002ab6 <noReschedule>:
	/*
	 * A thread reschedule is not required; switch back to the
	 * interrupted thread's stack and restore volatile registers
	 */

	popl	%esp		/* pop thread stack pointer */
    2ab6:	5c                   	pop    %esp

00002ab7 <nestedInterrupt>:
	popl	%ebp        /* Discard saved ESP */
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif
	popl	%edi
    2ab7:	5f                   	pop    %edi
	popl	%ecx		/* pop volatile registers in reverse order */
    2ab8:	59                   	pop    %ecx
	popl	%edx
    2ab9:	5a                   	pop    %edx
	popl	%eax
    2aba:	58                   	pop    %eax
	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
    2abb:	cf                   	iret   

00002abc <_SpuriousIntNoErrCodeHandler>:
 * thus _SpuriousIntNoErrCodeHandler()/_SpuriousIntHandler() shall be
 * invoked with interrupts disabled.
 */
SECTION_FUNC(TEXT, _SpuriousIntNoErrCodeHandler)

	pushl	$0			/* push dummy err code onto stk */
    2abc:	6a 00                	push   $0x0

00002abe <_SpuriousIntHandler>:
	/* fall through to _SpuriousIntHandler */


SECTION_FUNC(TEXT, _SpuriousIntHandler)

	cld				/* Clear direction flag */
    2abe:	fc                   	cld    

	/* Create the ESF */

	pushl %eax
    2abf:	50                   	push   %eax
	pushl %ecx
    2ac0:	51                   	push   %ecx
	pushl %edx
    2ac1:	52                   	push   %edx
	pushl %edi
    2ac2:	57                   	push   %edi
	pushl %esi
    2ac3:	56                   	push   %esi
	pushl %ebx
    2ac4:	53                   	push   %ebx
	pushl %ebp
    2ac5:	55                   	push   %ebp

	leal	44(%esp), %ecx   /* Calculate ESP before exception occurred */
    2ac6:	8d 4c 24 2c          	lea    0x2c(%esp),%ecx
	pushl	%ecx             /* Save calculated ESP */
    2aca:	51                   	push   %ecx

#ifndef CONFIG_X86_IAMCU
	pushl	%esp			/* push cur stack pointer: pEsf arg */
    2acb:	54                   	push   %esp
#else
	mov	%esp, %edx
#endif

	/* re-enable interrupts */
	sti
    2acc:	fb                   	sti    

	/* push the 'unsigned int reason' parameter */
#ifndef CONFIG_X86_IAMCU
	pushl	$_NANO_ERR_SPURIOUS_INT
    2acd:	6a 00                	push   $0x0
#else
	movl	$_NANO_ERR_SPURIOUS_INT, %eax
#endif
	/* call the fatal error handler */
	call	_NanoFatalErrorHandler
    2acf:	e8 4f 02 00 00       	call   2d23 <_NanoFatalErrorHandler>

00002ad4 <__swap>:
	 * any of these registers into the k_thread.  Only the 'esp' register
	 * after all the pushes have been performed) will be stored in the
	 * k_thread.
	 */

	pushl	%edi
    2ad4:	57                   	push   %edi

	movl	$_kernel, %edi
    2ad5:	bf 00 51 40 00       	mov    $0x405100,%edi

	pushl	%esi
    2ada:	56                   	push   %esi
	pushl	%ebx
    2adb:	53                   	push   %ebx
	pushl	%ebp
    2adc:	55                   	push   %ebp
	 * -EAGAIN eliminates the need for the timeout code to set it.
	 * If another value is ever needed, it can be modified with
	 * _set_thread_return_value().
	 */

	pushl   _k_neg_eagain
    2add:	ff 35 08 3d 00 00    	pushl  0x3d08


	/* save esp into k_thread structure */

	movl	_kernel_offset_to_current(%edi), %ecx
    2ae3:	8b 4f 08             	mov    0x8(%edi),%ecx
	movl	%esp, _thread_offset_to_esp(%ecx)
    2ae6:	89 61 28             	mov    %esp,0x28(%ecx)

#ifdef CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH
	/* Register the context switch */
	call	_sys_k_event_logger_context_switch
#endif
	movl	_kernel_offset_to_ready_q_cache(%edi), %eax
    2ae9:	8b 47 14             	mov    0x14(%edi),%eax

#endif /* CONFIG_FP_SHARING */

	/* update _kernel.current to reflect incoming thread */

	movl    %eax, _kernel_offset_to_current(%edi)
    2aec:	89 47 08             	mov    %eax,0x8(%edi)

	/* recover task/fiber stack pointer from k_thread */

	movl	_thread_offset_to_esp(%eax), %esp
    2aef:	8b 60 28             	mov    0x28(%eax),%esp


	/* load return value from a possible _set_thread_return_value() */

	popl	%eax
    2af2:	58                   	pop    %eax

	/* pop the non-volatile registers from the stack */

	popl	%ebp
    2af3:	5d                   	pop    %ebp
	popl	%ebx
    2af4:	5b                   	pop    %ebx
	popl	%esi
    2af5:	5e                   	pop    %esi
	popl	%edi
    2af6:	5f                   	pop    %edi
	 * - in unified kernel, -EINVAL
	 */

	/* Utilize the 'eflags' parameter to __swap() */

	pushl	4(%esp)
    2af7:	ff 74 24 04          	pushl  0x4(%esp)
	/* restore __swap's %eax */
	popl	%eax

skipIntLatencyStop:
#endif
	popfl
    2afb:	9d                   	popf   
	jne time_read_not_needed
	movw $0x2,__read_swap_end_time_value
	read_tsc __common_var_swap_end_time
time_read_not_needed:
#endif
	ret
    2afc:	c3                   	ret    

00002afd <_new_thread>:
void _new_thread(struct k_thread *thread, k_thread_stack_t stack,
		 size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    2afd:	55                   	push   %ebp
    2afe:	89 e5                	mov    %esp,%ebp
    2b00:	56                   	push   %esi
    2b01:	53                   	push   %ebx
	_ASSERT_VALID_PRIO(priority, pEntry);

	unsigned long *pInitialThread;

#if CONFIG_X86_STACK_PROTECTION
	_x86_mmu_set_flags(stack, MMU_PAGE_SIZE, MMU_ENTRY_NOT_PRESENT,
    2b02:	6a 01                	push   $0x1
{
    2b04:	8b 75 0c             	mov    0xc(%ebp),%esi
	_x86_mmu_set_flags(stack, MMU_PAGE_SIZE, MMU_ENTRY_NOT_PRESENT,
    2b07:	6a 00                	push   $0x0
    2b09:	68 00 10 00 00       	push   $0x1000
    2b0e:	56                   	push   %esi
{
    2b0f:	8b 5d 08             	mov    0x8(%ebp),%ebx
	_x86_mmu_set_flags(stack, MMU_PAGE_SIZE, MMU_ENTRY_NOT_PRESENT,
    2b12:	e8 a4 00 00 00       	call   2bbb <_x86_mmu_set_flags>
    2b17:	83 c4 10             	add    $0x10,%esp
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2b1a:	ff 75 28             	pushl  0x28(%ebp)
    2b1d:	6a 04                	push   $0x4
    2b1f:	ff 75 24             	pushl  0x24(%ebp)
    2b22:	53                   	push   %ebx
    2b23:	e8 b2 0c 00 00       	call   37da <_init_thread_base>
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitialThread =
		(unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
    2b28:	8b 45 10             	mov    0x10(%ebp),%eax
	 * primitive.
	 */

	/* push arguments required by _thread_entry() */

	*--pInitialThread = (unsigned long)parameter3;
    2b2b:	8b 55 20             	mov    0x20(%ebp),%edx

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    2b2e:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
	thread->fn_abort = NULL;
    2b35:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
		(unsigned long *)STACK_ROUND_DOWN(pStackMem + stackSize);
    2b3c:	8d 84 06 00 10 00 00 	lea    0x1000(%esi,%eax,1),%eax
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2b43:	83 c4 10             	add    $0x10,%esp
    2b46:	83 e0 fc             	and    $0xfffffffc,%eax
	*--pInitialThread = (unsigned long)parameter3;
    2b49:	89 50 fc             	mov    %edx,-0x4(%eax)
	*--pInitialThread = (unsigned long)parameter2;
    2b4c:	8b 55 1c             	mov    0x1c(%ebp),%edx
    2b4f:	89 50 f8             	mov    %edx,-0x8(%eax)
	*--pInitialThread = (unsigned long)parameter1;
    2b52:	8b 55 18             	mov    0x18(%ebp),%edx
    2b55:	89 50 f4             	mov    %edx,-0xc(%eax)
	*--pInitialThread = (unsigned long)pEntry;
    2b58:	8b 55 14             	mov    0x14(%ebp),%edx
    2b5b:	89 50 f0             	mov    %edx,-0x10(%eax)
 */
static inline unsigned int EflagsGet(void)
{
	unsigned int eflags; /* EFLAGS register contents */

	__asm__ volatile(
    2b5e:	9c                   	pushf  
    2b5f:	5a                   	pop    %edx

	/* push initial EFLAGS; only modify IF and IOPL bits */

	*--pInitialThread = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
    2b60:	80 e6 cd             	and    $0xcd,%dh

	*--pInitialThread = (unsigned long)_thread_entry_wrapper;

#else /* defined(CONFIG_GDB_INFO) || defined(CONFIG_DEBUG_INFO) */

	*--pInitialThread = (unsigned long)_thread_entry;
    2b63:	c7 40 e8 fb 35 00 00 	movl   $0x35fb,-0x18(%eax)
	*--pInitialThread = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
    2b6a:	80 ce 02             	or     $0x2,%dh
	pInitialCtx -= 11;
    2b6d:	83 e8 2c             	sub    $0x2c,%eax
	*--pInitialThread = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
    2b70:	89 50 18             	mov    %edx,0x18(%eax)
	pInitialCtx -= 11;
    2b73:	89 43 28             	mov    %eax,0x28(%ebx)
	 * The k_thread structure is located at the "low end" of memory set
	 * aside for the thread's stack.
	 */

	_new_thread_internal(pStackMem, stackSize, priority, options, thread);
}
    2b76:	8d 65 f8             	lea    -0x8(%ebp),%esp
    2b79:	5b                   	pop    %ebx
    2b7a:	5e                   	pop    %esi
    2b7b:	5d                   	pop    %ebp
    2b7c:	c3                   	ret    

00002b7d <_x86_mmu_get_flags>:
		!(pte.us < us_permission));
}


void _x86_mmu_get_flags(void *addr, u32_t *pde_flags, u32_t *pte_flags)
{
    2b7d:	55                   	push   %ebp
    2b7e:	89 e5                	mov    %esp,%ebp
    2b80:	53                   	push   %ebx
    2b81:	8b 45 08             	mov    0x8(%ebp),%eax

	pde = &X86_MMU_PD->entry[pde_index];
	pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
	pte = &pt->entry[pte_index];

	*pde_flags = pde->pt.value & ~MMU_PDE_PAGE_TABLE_MASK;
    2b84:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	pde_index = MMU_PDE_NUM(addr);
    2b87:	89 c2                	mov    %eax,%edx
    2b89:	c1 ea 16             	shr    $0x16,%edx
	pte_index = MMU_PAGE_NUM(addr);
    2b8c:	c1 e8 0c             	shr    $0xc,%eax
	pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
    2b8f:	8b 14 95 00 10 40 00 	mov    0x401000(,%edx,4),%edx
	pte_index = MMU_PAGE_NUM(addr);
    2b96:	25 ff 03 00 00       	and    $0x3ff,%eax
	pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
    2b9b:	89 d1                	mov    %edx,%ecx
	*pde_flags = pde->pt.value & ~MMU_PDE_PAGE_TABLE_MASK;
    2b9d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
	pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
    2ba3:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
	*pde_flags = pde->pt.value & ~MMU_PDE_PAGE_TABLE_MASK;
    2ba9:	89 13                	mov    %edx,(%ebx)
	*pte_flags = pte->value & ~MMU_PTE_PAGE_MASK;
    2bab:	8b 55 10             	mov    0x10(%ebp),%edx
    2bae:	8b 04 81             	mov    (%ecx,%eax,4),%eax
    2bb1:	25 ff 0f 00 00       	and    $0xfff,%eax
    2bb6:	89 02                	mov    %eax,(%edx)
}
    2bb8:	5b                   	pop    %ebx
    2bb9:	5d                   	pop    %ebp
    2bba:	c3                   	ret    

00002bbb <_x86_mmu_set_flags>:
	__asm__ ("invlpg %0" :: "m" (*page));
}


void _x86_mmu_set_flags(void *ptr, size_t size, u32_t flags, u32_t mask)
{
    2bbb:	55                   	push   %ebp
    2bbc:	89 e5                	mov    %esp,%ebp
    2bbe:	53                   	push   %ebx
		pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);

		pte_index = MMU_PAGE_NUM(addr);
		pte = &pt->entry[pte_index];

		pte->value = (pte->value & ~mask) | flags;
    2bbf:	8b 5d 14             	mov    0x14(%ebp),%ebx
	u32_t addr = (u32_t)ptr;
    2bc2:	8b 45 08             	mov    0x8(%ebp),%eax
		pte->value = (pte->value & ~mask) | flags;
    2bc5:	f7 d3                	not    %ebx
    2bc7:	8b 55 0c             	mov    0xc(%ebp),%edx
    2bca:	29 c2                	sub    %eax,%edx
	while (size) {
    2bcc:	03 55 08             	add    0x8(%ebp),%edx
    2bcf:	74 34                	je     2c05 <_x86_mmu_set_flags+0x4a>
		pde_index = MMU_PDE_NUM(addr);
    2bd1:	89 c2                	mov    %eax,%edx
    2bd3:	c1 ea 16             	shr    $0x16,%edx
		pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
    2bd6:	8b 14 95 00 10 40 00 	mov    0x401000(,%edx,4),%edx
    2bdd:	89 d1                	mov    %edx,%ecx
		pte_index = MMU_PAGE_NUM(addr);
    2bdf:	89 c2                	mov    %eax,%edx
    2be1:	c1 ea 0a             	shr    $0xa,%edx
		pt = (struct x86_mmu_page_table *)(pde->pt.page_table << 12);
    2be4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
    2bea:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
    2bf0:	01 ca                	add    %ecx,%edx
		pte->value = (pte->value & ~mask) | flags;
    2bf2:	8b 0a                	mov    (%edx),%ecx
    2bf4:	21 d9                	and    %ebx,%ecx
    2bf6:	0b 4d 10             	or     0x10(%ebp),%ecx
    2bf9:	89 0a                	mov    %ecx,(%edx)
	__asm__ ("invlpg %0" :: "m" (*page));
    2bfb:	0f 01 38             	invlpg (%eax)
		tlb_flush_page((void *)addr);

		size -= MMU_PAGE_SIZE;
		addr += MMU_PAGE_SIZE;
    2bfe:	05 00 10 00 00       	add    $0x1000,%eax
    2c03:	eb c2                	jmp    2bc7 <_x86_mmu_set_flags+0xc>
	}
}
    2c05:	5b                   	pop    %ebx
    2c06:	5d                   	pop    %ebp
    2c07:	c3                   	ret    

00002c08 <dump_entry_flags>:
#define PK	BIT(5)
#define SGX	BIT(15)

#ifdef CONFIG_X86_MMU
static void dump_entry_flags(u32_t flags)
{
    2c08:	55                   	push   %ebp
	printk("0x%03x %s %s %s\n", flags,
    2c09:	a8 04                	test   $0x4,%al
{
    2c0b:	89 e5                	mov    %esp,%ebp
    2c0d:	53                   	push   %ebx
	printk("0x%03x %s %s %s\n", flags,
    2c0e:	bb 39 3a 00 00       	mov    $0x3a39,%ebx
    2c13:	74 05                	je     2c1a <dump_entry_flags+0x12>
    2c15:	bb 34 3a 00 00       	mov    $0x3a34,%ebx
    2c1a:	b9 44 3a 00 00       	mov    $0x3a44,%ecx
    2c1f:	a8 02                	test   $0x2,%al
    2c21:	75 05                	jne    2c28 <dump_entry_flags+0x20>
    2c23:	b9 4d 3a 00 00       	mov    $0x3a4d,%ecx
    2c28:	ba 57 3a 00 00       	mov    $0x3a57,%edx
    2c2d:	a8 01                	test   $0x1,%al
    2c2f:	75 05                	jne    2c36 <dump_entry_flags+0x2e>
    2c31:	ba 5f 3a 00 00       	mov    $0x3a5f,%edx
    2c36:	53                   	push   %ebx
    2c37:	51                   	push   %ecx
    2c38:	52                   	push   %edx
    2c39:	50                   	push   %eax
    2c3a:	68 6b 3a 00 00       	push   $0x3a6b
    2c3f:	e8 32 fd ff ff       	call   2976 <printk>
    2c44:	83 c4 14             	add    $0x14,%esp
	       flags & MMU_ENTRY_PRESENT ? "Present" : "Non-present",
	       flags & MMU_ENTRY_WRITE ? "Writable" : "Read-only",
	       flags & MMU_ENTRY_USER ? "User" : "Supervisor");
}
    2c47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    2c4a:	c9                   	leave  
    2c4b:	c3                   	ret    

00002c4c <_df_handler_top>:
{
	/* State of the system when the double-fault forced a task switch
	 * will be in _main_tss. Set up a NANO_ESF and copy system state into
	 * it
	 */
	_df_esf.esp = _main_tss.esp;
    2c4c:	a1 f8 00 40 00       	mov    0x4000f8,%eax
{
    2c51:	55                   	push   %ebp
	_df_esf.esp = _main_tss.esp;
    2c52:	a3 20 60 40 00       	mov    %eax,0x406020
	_df_esf.ebp = _main_tss.ebp;
    2c57:	a1 fc 00 40 00       	mov    0x4000fc,%eax
    2c5c:	a3 24 60 40 00       	mov    %eax,0x406024
	_df_esf.ebx = _main_tss.ebx;
    2c61:	a1 f4 00 40 00       	mov    0x4000f4,%eax
    2c66:	a3 28 60 40 00       	mov    %eax,0x406028
	_df_esf.esi = _main_tss.esi;
    2c6b:	a1 00 01 40 00       	mov    0x400100,%eax
    2c70:	a3 2c 60 40 00       	mov    %eax,0x40602c
	_df_esf.edi = _main_tss.edi;
    2c75:	a1 04 01 40 00       	mov    0x400104,%eax
    2c7a:	a3 30 60 40 00       	mov    %eax,0x406030
	_df_esf.edx = _main_tss.edx;
    2c7f:	a1 f0 00 40 00       	mov    0x4000f0,%eax
    2c84:	a3 34 60 40 00       	mov    %eax,0x406034
	_df_esf.eax = _main_tss.eax;
    2c89:	a1 e8 00 40 00       	mov    0x4000e8,%eax
    2c8e:	a3 38 60 40 00       	mov    %eax,0x406038
	_df_esf.ecx = _main_tss.ecx;
    2c93:	a1 ec 00 40 00       	mov    0x4000ec,%eax
    2c98:	a3 3c 60 40 00       	mov    %eax,0x40603c
	_df_esf.errorCode = 0;
	_df_esf.eip = _main_tss.eip;
    2c9d:	a1 e0 00 40 00       	mov    0x4000e0,%eax
	_df_esf.errorCode = 0;
    2ca2:	c7 05 40 60 40 00 00 	movl   $0x0,0x406040
    2ca9:	00 00 00 
	_df_esf.eip = _main_tss.eip;
    2cac:	a3 44 60 40 00       	mov    %eax,0x406044
	_df_esf.cs = _main_tss.cs;
    2cb1:	0f b7 05 0c 01 40 00 	movzwl 0x40010c,%eax
    2cb8:	a3 48 60 40 00       	mov    %eax,0x406048
	_df_esf.eflags = _main_tss.eflags;
    2cbd:	a1 e4 00 40 00       	mov    0x4000e4,%eax
    2cc2:	a3 4c 60 40 00       	mov    %eax,0x40604c
{
    2cc7:	89 e5                	mov    %esp,%ebp

	/* Restore the main IA task to a runnable state */
	_main_tss.esp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    2cc9:	c7 05 f8 00 40 00 00 	movl   $0x40c800,0x4000f8
    2cd0:	c8 40 00 
				CONFIG_ISR_STACK_SIZE);
	_main_tss.cs = CODE_SEG;
    2cd3:	66 c7 05 0c 01 40 00 	movw   $0x8,0x40010c
    2cda:	08 00 
	_main_tss.ds = DATA_SEG;
    2cdc:	66 c7 05 14 01 40 00 	movw   $0x10,0x400114
    2ce3:	10 00 
	_main_tss.es = DATA_SEG;
    2ce5:	66 c7 05 08 01 40 00 	movw   $0x10,0x400108
    2cec:	10 00 
	_main_tss.fs = DATA_SEG;
    2cee:	66 c7 05 18 01 40 00 	movw   $0x10,0x400118
    2cf5:	10 00 
	_main_tss.gs = DATA_SEG;
    2cf7:	66 c7 05 1c 01 40 00 	movw   $0x10,0x40011c
    2cfe:	10 00 
	_main_tss.ss = DATA_SEG;
    2d00:	66 c7 05 10 01 40 00 	movw   $0x10,0x400110
    2d07:	10 00 
	_main_tss.eip = (u32_t)_df_handler_bottom;
    2d09:	c7 05 e0 00 40 00 56 	movl   $0x2e56,0x4000e0
    2d10:	2e 00 00 
	_main_tss.cr3 = (u32_t)X86_MMU_PD;
    2d13:	c7 05 dc 00 40 00 00 	movl   $0x401000,0x4000dc
    2d1a:	10 40 00 

	/* NT bit is set in EFLAGS so we will task switch back to _main_tss
	 * and run _df_handler_bottom
	 */
	__asm__ volatile ("iret");
    2d1d:	cf                   	iret   

00002d1e <_debug_fatal_hook>:
__weak void _debug_fatal_hook(const NANO_ESF *esf) { ARG_UNUSED(esf); }
    2d1e:	55                   	push   %ebp
    2d1f:	89 e5                	mov    %esp,%ebp
    2d21:	5d                   	pop    %ebp
    2d22:	c3                   	ret    

00002d23 <_NanoFatalErrorHandler>:
{
    2d23:	55                   	push   %ebp
    2d24:	89 e5                	mov    %esp,%ebp
    2d26:	57                   	push   %edi
    2d27:	56                   	push   %esi
    2d28:	53                   	push   %ebx
    2d29:	83 ec 28             	sub    $0x28,%esp
    2d2c:	8b 75 08             	mov    0x8(%ebp),%esi
    2d2f:	8b 7d 0c             	mov    0xc(%ebp),%edi
	_debug_fatal_hook(pEsf);
    2d32:	57                   	push   %edi
    2d33:	e8 e6 ff ff ff       	call   2d1e <_debug_fatal_hook>
    2d38:	58                   	pop    %eax
	switch (reason) {
    2d39:	83 fe 08             	cmp    $0x8,%esi
    2d3c:	77 5a                	ja     2d98 <_NanoFatalErrorHandler+0x75>
    2d3e:	ff 24 b5 20 3c 00 00 	jmp    *0x3c20(,%esi,4)
 * @return the vector of the interrupt that is currently being processed, or
 * -1 if this can't be determined
 */
static inline int _irq_controller_isr_vector_get(void)
{
	return __irq_controller_isr_vector_get();
    2d45:	e8 cd f6 ff ff       	call   2417 <__irq_controller_isr_vector_get>
		printk("***** Unhandled interrupt vector ");
    2d4a:	68 7c 3a 00 00       	push   $0x3a7c
    2d4f:	89 c3                	mov    %eax,%ebx
    2d51:	e8 20 fc ff ff       	call   2976 <printk>
    2d56:	58                   	pop    %eax
		if (vector >= 0) {
    2d57:	85 db                	test   %ebx,%ebx
    2d59:	78 0d                	js     2d68 <_NanoFatalErrorHandler+0x45>
			printk("%d ", vector);
    2d5b:	53                   	push   %ebx
    2d5c:	68 9e 3a 00 00       	push   $0x3a9e
    2d61:	e8 10 fc ff ff       	call   2976 <printk>
    2d66:	5b                   	pop    %ebx
    2d67:	58                   	pop    %eax
		printk("*****\n");
    2d68:	68 fe 3a 00 00       	push   $0x3afe
    2d6d:	eb 05                	jmp    2d74 <_NanoFatalErrorHandler+0x51>
		printk("***** Invalid Exit Software Error! *****\n");
    2d6f:	68 a2 3a 00 00       	push   $0x3aa2
    2d74:	e8 fd fb ff ff       	call   2976 <printk>
    2d79:	59                   	pop    %ecx
		break;
    2d7a:	eb 29                	jmp    2da5 <_NanoFatalErrorHandler+0x82>
		printk("***** Stack Check Fail! *****\n");
    2d7c:	68 cc 3a 00 00       	push   $0x3acc
    2d81:	eb f1                	jmp    2d74 <_NanoFatalErrorHandler+0x51>
		printk("***** Kernel OOPS! *****\n");
    2d83:	68 eb 3a 00 00       	push   $0x3aeb
    2d88:	eb ea                	jmp    2d74 <_NanoFatalErrorHandler+0x51>
		printk("***** Kernel Panic! *****\n");
    2d8a:	68 05 3b 00 00       	push   $0x3b05
    2d8f:	eb e3                	jmp    2d74 <_NanoFatalErrorHandler+0x51>
		printk("**** Kernel Allocation Failure! ****\n");
    2d91:	68 20 3b 00 00       	push   $0x3b20
    2d96:	eb dc                	jmp    2d74 <_NanoFatalErrorHandler+0x51>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    2d98:	56                   	push   %esi
    2d99:	68 46 3b 00 00       	push   $0x3b46
    2d9e:	e8 d3 fb ff ff       	call   2976 <printk>
    2da3:	58                   	pop    %eax
    2da4:	5a                   	pop    %edx
	printk("Current thread ID = %p\n"
    2da5:	8b 47 04             	mov    0x4(%edi),%eax
    2da8:	8b 4f 2c             	mov    0x2c(%edi),%ecx
    2dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    2dae:	8b 47 10             	mov    0x10(%edi),%eax
    2db1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    2db4:	8b 47 0c             	mov    0xc(%edi),%eax
    2db7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    2dba:	8b 47 14             	mov    0x14(%edi),%eax
    2dbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    2dc0:	8b 47 1c             	mov    0x1c(%edi),%eax
    2dc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    2dc6:	8b 47 08             	mov    0x8(%edi),%eax
    2dc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
    2dcc:	8b 47 18             	mov    0x18(%edi),%eax
    2dcf:	8b 17                	mov    (%edi),%edx
    2dd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
    2dd4:	8b 47 24             	mov    0x24(%edi),%eax
    2dd7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    2dda:	89 55 d0             	mov    %edx,-0x30(%ebp)
    2ddd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    2de0:	0f b7 5f 28          	movzwl 0x28(%edi),%ebx
    2de4:	e8 89 05 00 00       	call   3372 <k_current_get>
    2de9:	8b 4d cc             	mov    -0x34(%ebp),%ecx
    2dec:	8b 55 d0             	mov    -0x30(%ebp),%edx
    2def:	51                   	push   %ecx
    2df0:	52                   	push   %edx
    2df1:	ff 75 f0             	pushl  -0x10(%ebp)
    2df4:	ff 75 ec             	pushl  -0x14(%ebp)
    2df7:	ff 75 e8             	pushl  -0x18(%ebp)
    2dfa:	ff 75 e4             	pushl  -0x1c(%ebp)
    2dfd:	ff 75 e0             	pushl  -0x20(%ebp)
    2e00:	ff 75 dc             	pushl  -0x24(%ebp)
    2e03:	ff 75 d8             	pushl  -0x28(%ebp)
    2e06:	ff 75 d4             	pushl  -0x2c(%ebp)
    2e09:	53                   	push   %ebx
    2e0a:	50                   	push   %eax
    2e0b:	68 69 3b 00 00       	push   $0x3b69
    2e10:	e8 61 fb ff ff       	call   2976 <printk>
    2e15:	83 c4 34             	add    $0x34,%esp
	_SysFatalErrorHandler(reason, pEsf);
    2e18:	57                   	push   %edi
    2e19:	56                   	push   %esi
    2e1a:	e8 76 fb ff ff       	call   2995 <_SysFatalErrorHandler>

00002e1f <generic_exc_handle>:
{
    2e1f:	55                   	push   %ebp
    2e20:	89 e5                	mov    %esp,%ebp
    2e22:	56                   	push   %esi
    2e23:	89 c6                	mov    %eax,%esi
    2e25:	53                   	push   %ebx
    2e26:	89 d3                	mov    %edx,%ebx
	printk("***** CPU exception %d\n", vector);
    2e28:	50                   	push   %eax
    2e29:	68 44 3c 00 00       	push   $0x3c44
    2e2e:	e8 43 fb ff ff       	call   2976 <printk>
    2e33:	59                   	pop    %ecx
    2e34:	58                   	pop    %eax
	if ((1 << vector) & _EXC_ERROR_CODE_FAULTS) {
    2e35:	b8 00 7d 02 00       	mov    $0x27d00,%eax
    2e3a:	0f a3 f0             	bt     %esi,%eax
    2e3d:	73 0f                	jae    2e4e <generic_exc_handle+0x2f>
		printk("***** Exception code: 0x%x\n", pEsf->errorCode);
    2e3f:	ff 73 20             	pushl  0x20(%ebx)
    2e42:	68 5c 3c 00 00       	push   $0x3c5c
    2e47:	e8 2a fb ff ff       	call   2976 <printk>
    2e4c:	58                   	pop    %eax
    2e4d:	5a                   	pop    %edx
	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
    2e4e:	53                   	push   %ebx
    2e4f:	6a 06                	push   $0x6
    2e51:	e8 cd fe ff ff       	call   2d23 <_NanoFatalErrorHandler>

00002e56 <_df_handler_bottom>:
{
    2e56:	55                   	push   %ebp
    2e57:	89 e5                	mov    %esp,%ebp
    2e59:	83 ec 08             	sub    $0x8,%esp
	_x86_mmu_get_flags((void *)_df_esf.esp - 1, &pde_flags, &pte_flags);
    2e5c:	a1 20 60 40 00       	mov    0x406020,%eax
	_df_tss.esp = (u32_t)(_df_stack + sizeof(_df_stack));
    2e61:	c7 05 78 00 40 00 08 	movl   $0x406008,0x400078
    2e68:	60 40 00 
	_x86_mmu_get_flags((void *)_df_esf.esp - 1, &pde_flags, &pte_flags);
    2e6b:	8d 55 f8             	lea    -0x8(%ebp),%edx
    2e6e:	48                   	dec    %eax
    2e6f:	52                   	push   %edx
    2e70:	8d 55 fc             	lea    -0x4(%ebp),%edx
    2e73:	52                   	push   %edx
    2e74:	50                   	push   %eax
	_df_tss.eip = (u32_t)_df_handler_top;
    2e75:	c7 05 60 00 40 00 4c 	movl   $0x2c4c,0x400060
    2e7c:	2c 00 00 
	_x86_mmu_get_flags((void *)_df_esf.esp - 1, &pde_flags, &pte_flags);
    2e7f:	e8 f9 fc ff ff       	call   2b7d <_x86_mmu_get_flags>
    2e84:	83 c4 0c             	add    $0xc,%esp
    2e87:	b8 04 00 00 00       	mov    $0x4,%eax
	if (pte_flags & MMU_ENTRY_PRESENT) {
    2e8c:	f6 45 f8 01          	testb  $0x1,-0x8(%ebp)
    2e90:	74 10                	je     2ea2 <_df_handler_bottom+0x4c>
		printk("***** Double Fault *****\n");
    2e92:	68 78 3c 00 00       	push   $0x3c78
    2e97:	e8 da fa ff ff       	call   2976 <printk>
    2e9c:	58                   	pop    %eax
		reason = _NANO_ERR_CPU_EXCEPTION;
    2e9d:	b8 06 00 00 00       	mov    $0x6,%eax
	_NanoFatalErrorHandler(reason, (NANO_ESF *)&_df_esf);
    2ea2:	68 20 60 40 00       	push   $0x406020
    2ea7:	50                   	push   %eax
    2ea8:	e8 76 fe ff ff       	call   2d23 <_NanoFatalErrorHandler>

00002ead <_do_kernel_oops>:
{
    2ead:	55                   	push   %ebp
    2eae:	89 e5                	mov    %esp,%ebp
    2eb0:	8b 45 08             	mov    0x8(%ebp),%eax
	_NanoFatalErrorHandler(esf->reason, &esf->nano_esf);
    2eb3:	50                   	push   %eax
    2eb4:	ff 70 30             	pushl  0x30(%eax)
    2eb7:	e8 67 fe ff ff       	call   2d23 <_NanoFatalErrorHandler>

00002ebc <handle_exc_0>:
EXC_FUNC_NOCODE(IV_DIVIDE_ERROR);
    2ebc:	55                   	push   %ebp
    2ebd:	31 c0                	xor    %eax,%eax
    2ebf:	89 e5                	mov    %esp,%ebp
    2ec1:	8b 55 08             	mov    0x8(%ebp),%edx
    2ec4:	e8 56 ff ff ff       	call   2e1f <generic_exc_handle>

00002ec9 <handle_exc_2>:
EXC_FUNC_NOCODE(IV_NON_MASKABLE_INTERRUPT);
    2ec9:	55                   	push   %ebp
    2eca:	b8 02 00 00 00       	mov    $0x2,%eax
    2ecf:	89 e5                	mov    %esp,%ebp
    2ed1:	8b 55 08             	mov    0x8(%ebp),%edx
    2ed4:	e8 46 ff ff ff       	call   2e1f <generic_exc_handle>

00002ed9 <handle_exc_4>:
EXC_FUNC_NOCODE(IV_OVERFLOW);
    2ed9:	55                   	push   %ebp
    2eda:	b8 04 00 00 00       	mov    $0x4,%eax
    2edf:	89 e5                	mov    %esp,%ebp
    2ee1:	8b 55 08             	mov    0x8(%ebp),%edx
    2ee4:	e8 36 ff ff ff       	call   2e1f <generic_exc_handle>

00002ee9 <handle_exc_5>:
EXC_FUNC_NOCODE(IV_BOUND_RANGE);
    2ee9:	55                   	push   %ebp
    2eea:	b8 05 00 00 00       	mov    $0x5,%eax
    2eef:	89 e5                	mov    %esp,%ebp
    2ef1:	8b 55 08             	mov    0x8(%ebp),%edx
    2ef4:	e8 26 ff ff ff       	call   2e1f <generic_exc_handle>

00002ef9 <handle_exc_6>:
EXC_FUNC_NOCODE(IV_INVALID_OPCODE);
    2ef9:	55                   	push   %ebp
    2efa:	b8 06 00 00 00       	mov    $0x6,%eax
    2eff:	89 e5                	mov    %esp,%ebp
    2f01:	8b 55 08             	mov    0x8(%ebp),%edx
    2f04:	e8 16 ff ff ff       	call   2e1f <generic_exc_handle>

00002f09 <handle_exc_7>:
EXC_FUNC_NOCODE(IV_DEVICE_NOT_AVAILABLE);
    2f09:	55                   	push   %ebp
    2f0a:	b8 07 00 00 00       	mov    $0x7,%eax
    2f0f:	89 e5                	mov    %esp,%ebp
    2f11:	8b 55 08             	mov    0x8(%ebp),%edx
    2f14:	e8 06 ff ff ff       	call   2e1f <generic_exc_handle>

00002f19 <handle_exc_10>:
EXC_FUNC_CODE(IV_INVALID_TSS);
    2f19:	55                   	push   %ebp
    2f1a:	b8 0a 00 00 00       	mov    $0xa,%eax
    2f1f:	89 e5                	mov    %esp,%ebp
    2f21:	8b 55 08             	mov    0x8(%ebp),%edx
    2f24:	e8 f6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f29 <handle_exc_11>:
EXC_FUNC_CODE(IV_SEGMENT_NOT_PRESENT);
    2f29:	55                   	push   %ebp
    2f2a:	b8 0b 00 00 00       	mov    $0xb,%eax
    2f2f:	89 e5                	mov    %esp,%ebp
    2f31:	8b 55 08             	mov    0x8(%ebp),%edx
    2f34:	e8 e6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f39 <handle_exc_12>:
EXC_FUNC_CODE(IV_STACK_FAULT);
    2f39:	55                   	push   %ebp
    2f3a:	b8 0c 00 00 00       	mov    $0xc,%eax
    2f3f:	89 e5                	mov    %esp,%ebp
    2f41:	8b 55 08             	mov    0x8(%ebp),%edx
    2f44:	e8 d6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f49 <handle_exc_13>:
EXC_FUNC_CODE(IV_GENERAL_PROTECTION);
    2f49:	55                   	push   %ebp
    2f4a:	b8 0d 00 00 00       	mov    $0xd,%eax
    2f4f:	89 e5                	mov    %esp,%ebp
    2f51:	8b 55 08             	mov    0x8(%ebp),%edx
    2f54:	e8 c6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f59 <handle_exc_16>:
EXC_FUNC_NOCODE(IV_X87_FPU_FP_ERROR);
    2f59:	55                   	push   %ebp
    2f5a:	b8 10 00 00 00       	mov    $0x10,%eax
    2f5f:	89 e5                	mov    %esp,%ebp
    2f61:	8b 55 08             	mov    0x8(%ebp),%edx
    2f64:	e8 b6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f69 <handle_exc_17>:
EXC_FUNC_CODE(IV_ALIGNMENT_CHECK);
    2f69:	55                   	push   %ebp
    2f6a:	b8 11 00 00 00       	mov    $0x11,%eax
    2f6f:	89 e5                	mov    %esp,%ebp
    2f71:	8b 55 08             	mov    0x8(%ebp),%edx
    2f74:	e8 a6 fe ff ff       	call   2e1f <generic_exc_handle>

00002f79 <handle_exc_18>:
EXC_FUNC_NOCODE(IV_MACHINE_CHECK);
    2f79:	55                   	push   %ebp
    2f7a:	b8 12 00 00 00       	mov    $0x12,%eax
    2f7f:	89 e5                	mov    %esp,%ebp
    2f81:	8b 55 08             	mov    0x8(%ebp),%edx
    2f84:	e8 96 fe ff ff       	call   2e1f <generic_exc_handle>

00002f89 <page_fault_handler>:
{
    2f89:	55                   	push   %ebp
    2f8a:	89 e5                	mov    %esp,%ebp
    2f8c:	57                   	push   %edi
    2f8d:	56                   	push   %esi
    2f8e:	53                   	push   %ebx
    2f8f:	83 ec 08             	sub    $0x8,%esp
    2f92:	8b 75 08             	mov    0x8(%ebp),%esi
	__asm__ ("mov %%cr2, %0" : "=r" (cr2));
    2f95:	0f 20 d7             	mov    %cr2,%edi
	err = pEsf->errorCode;
    2f98:	8b 5e 20             	mov    0x20(%esi),%ebx
	printk("***** CPU Page Fault (error code 0x%08x)\n", err);
    2f9b:	53                   	push   %ebx
    2f9c:	68 a1 3c 00 00       	push   $0x3ca1
    2fa1:	e8 d0 f9 ff ff       	call   2976 <printk>
    2fa6:	58                   	pop    %eax
	printk("%s thread %s address 0x%08x\n",
    2fa7:	f6 c3 10             	test   $0x10,%bl
	printk("***** CPU Page Fault (error code 0x%08x)\n", err);
    2faa:	5a                   	pop    %edx
	printk("%s thread %s address 0x%08x\n",
    2fab:	b8 92 3c 00 00       	mov    $0x3c92,%eax
    2fb0:	75 0f                	jne    2fc1 <page_fault_handler+0x38>
	       err & ID ? "executed" : (err & WR ? "wrote" : "read"),
    2fb2:	b8 9b 3c 00 00       	mov    $0x3c9b,%eax
    2fb7:	f6 c3 02             	test   $0x2,%bl
    2fba:	75 05                	jne    2fc1 <page_fault_handler+0x38>
    2fbc:	b8 bc 39 00 00       	mov    $0x39bc,%eax
	printk("%s thread %s address 0x%08x\n",
    2fc1:	ba 34 3a 00 00       	mov    $0x3a34,%edx
    2fc6:	80 e3 04             	and    $0x4,%bl
    2fc9:	75 05                	jne    2fd0 <page_fault_handler+0x47>
    2fcb:	ba 39 3a 00 00       	mov    $0x3a39,%edx
    2fd0:	57                   	push   %edi
    2fd1:	50                   	push   %eax
    2fd2:	52                   	push   %edx
    2fd3:	68 cb 3c 00 00       	push   $0x3ccb
    2fd8:	e8 99 f9 ff ff       	call   2976 <printk>
    2fdd:	83 c4 10             	add    $0x10,%esp
	_x86_mmu_get_flags(addr, &pde_flags, &pte_flags);
    2fe0:	8d 45 f0             	lea    -0x10(%ebp),%eax
    2fe3:	50                   	push   %eax
    2fe4:	8d 45 ec             	lea    -0x14(%ebp),%eax
    2fe7:	50                   	push   %eax
    2fe8:	57                   	push   %edi
    2fe9:	e8 8f fb ff ff       	call   2b7d <_x86_mmu_get_flags>
    2fee:	83 c4 0c             	add    $0xc,%esp
	printk("PDE: ");
    2ff1:	68 e8 3c 00 00       	push   $0x3ce8
    2ff6:	e8 7b f9 ff ff       	call   2976 <printk>
    2ffb:	58                   	pop    %eax
	dump_entry_flags(pde_flags);
    2ffc:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2fff:	e8 04 fc ff ff       	call   2c08 <dump_entry_flags>
	printk("PTE: ");
    3004:	68 ee 3c 00 00       	push   $0x3cee
    3009:	e8 68 f9 ff ff       	call   2976 <printk>
	dump_entry_flags(pte_flags);
    300e:	8b 45 f0             	mov    -0x10(%ebp),%eax
	printk("PTE: ");
    3011:	5a                   	pop    %edx
	dump_entry_flags(pte_flags);
    3012:	e8 f1 fb ff ff       	call   2c08 <dump_entry_flags>
	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
    3017:	56                   	push   %esi
    3018:	6a 06                	push   $0x6
    301a:	e8 04 fd ff ff       	call   2d23 <_NanoFatalErrorHandler>

0000301f <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    301f:	55                   	push   %ebp
    3020:	89 e5                	mov    %esp,%ebp
    3022:	56                   	push   %esi
    3023:	53                   	push   %ebx
    3024:	8b 45 08             	mov    0x8(%ebp),%eax
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    3027:	8b 1c 85 f4 3c 00 00 	mov    0x3cf4(,%eax,4),%ebx
    302e:	8d 70 01             	lea    0x1(%eax),%esi
    3031:	3b 1c b5 f4 3c 00 00 	cmp    0x3cf4(,%esi,4),%ebx
    3038:	73 0c                	jae    3046 <_sys_device_do_config_level+0x27>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
    303a:	8b 03                	mov    (%ebx),%eax
    303c:	53                   	push   %ebx
								info++) {
    303d:	83 c3 0c             	add    $0xc,%ebx
		device->init(info);
    3040:	ff 50 04             	call   *0x4(%eax)
    3043:	58                   	pop    %eax
    3044:	eb eb                	jmp    3031 <_sys_device_do_config_level+0x12>
	}
}
    3046:	8d 65 f8             	lea    -0x8(%ebp),%esp
    3049:	5b                   	pop    %ebx
    304a:	5e                   	pop    %esi
    304b:	5d                   	pop    %ebp
    304c:	c3                   	ret    

0000304d <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    304d:	55                   	push   %ebp
    304e:	89 e5                	mov    %esp,%ebp
    3050:	53                   	push   %ebx
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    3051:	bb 00 50 40 00       	mov    $0x405000,%ebx
    3056:	81 fb 60 50 40 00    	cmp    $0x405060,%ebx
    305c:	74 1f                	je     307d <device_get_binding+0x30>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    305e:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
    3062:	75 05                	jne    3069 <device_get_binding+0x1c>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3064:	83 c3 0c             	add    $0xc,%ebx
    3067:	eb ed                	jmp    3056 <device_get_binding+0x9>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    3069:	8b 03                	mov    (%ebx),%eax
    306b:	ff 30                	pushl  (%eax)
    306d:	ff 75 08             	pushl  0x8(%ebp)
    3070:	e8 0b ef ff ff       	call   1f80 <strcmp>
    3075:	5a                   	pop    %edx
    3076:	85 c0                	test   %eax,%eax
    3078:	59                   	pop    %ecx
    3079:	75 e9                	jne    3064 <device_get_binding+0x17>
    307b:	eb 02                	jmp    307f <device_get_binding+0x32>
			return info;
		}
	}

	return NULL;
    307d:	31 db                	xor    %ebx,%ebx
}
    307f:	89 d8                	mov    %ebx,%eax
    3081:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    3084:	c9                   	leave  
    3085:	c3                   	ret    

00003086 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    3086:	55                   	push   %ebp
    3087:	89 e5                	mov    %esp,%ebp
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3089:	6a 02                	push   $0x2
    308b:	e8 8f ff ff ff       	call   301f <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3090:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
    3097:	e8 83 ff ff ff       	call   301f <_sys_device_do_config_level>
    309c:	58                   	pop    %eax
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_sleep(CONFIG_BOOT_DELAY);
	}
	PRINT_BOOT_BANNER();
	_init_static_threads();
    309d:	e8 bc 06 00 00       	call   375e <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    30a2:	e8 52 e1 ff ff       	call   11f9 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    30a7:	80 25 c8 50 40 00 fe 	andb   $0xfe,0x4050c8
}
    30ae:	c9                   	leave  
    30af:	c3                   	ret    

000030b0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    30b0:	55                   	push   %ebp
    30b1:	89 e5                	mov    %esp,%ebp
    30b3:	53                   	push   %ebx
    30b4:	83 ec 38             	sub    $0x38,%esp
	_current = dummy_thread;
    30b7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
	dummy_thread->base.user_options = K_ESSENTIAL;
    30ba:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
	_current = dummy_thread;
    30be:	a3 08 51 40 00       	mov    %eax,0x405108
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    30c3:	c6 45 cd 01          	movb   $0x1,-0x33(%ebp)
    30c7:	b8 1c 00 00 00       	mov    $0x1c,%eax
    30cc:	8d 90 00 51 40 00    	lea    0x405100(%eax),%edx
    30d2:	83 c0 08             	add    $0x8,%eax
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    30d5:	89 90 f8 50 40 00    	mov    %edx,0x4050f8(%eax)
	list->tail = (sys_dnode_t *)list;
    30db:	89 90 fc 50 40 00    	mov    %edx,0x4050fc(%eax)
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    30e1:	3d 1c 01 00 00       	cmp    $0x11c,%eax
    30e6:	75 e4                	jne    30cc <_Cstart+0x1c>
	_new_thread(_main_thread, _main_stack,
    30e8:	6a 01                	push   $0x1
    30ea:	6a 00                	push   $0x0
    30ec:	6a 00                	push   $0x0
    30ee:	6a 00                	push   $0x0
    30f0:	6a 00                	push   $0x0
    30f2:	68 86 30 00 00       	push   $0x3086
    30f7:	68 00 04 00 00       	push   $0x400
    30fc:	68 00 90 40 00       	push   $0x409000
    3101:	68 c0 50 40 00       	push   $0x4050c0
	_ready_q.cache = _main_thread;
    3106:	c7 05 14 51 40 00 c0 	movl   $0x4050c0,0x405114
    310d:	50 40 00 
	_new_thread(_main_thread, _main_stack,
    3110:	e8 e8 f9 ff ff       	call   2afd <_new_thread>
    3115:	83 c4 24             	add    $0x24,%esp
	_add_thread_to_ready_q(_main_thread);
    3118:	68 c0 50 40 00       	push   $0x4050c0
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    311d:	80 25 c9 50 40 00 fb 	andb   $0xfb,0x4050c9
    3124:	e8 b8 00 00 00       	call   31e1 <_add_thread_to_ready_q>
	_new_thread(_idle_thread, _idle_stack,
    3129:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
    3130:	6a 0f                	push   $0xf
    3132:	6a 00                	push   $0x0
    3134:	6a 00                	push   $0x0
    3136:	6a 00                	push   $0x0
    3138:	68 48 38 00 00       	push   $0x3848
    313d:	68 00 01 00 00       	push   $0x100
    3142:	68 00 70 40 00       	push   $0x407000
    3147:	68 80 50 40 00       	push   $0x405080
    314c:	e8 ac f9 ff ff       	call   2afd <_new_thread>
    3151:	83 c4 24             	add    $0x24,%esp
	_add_thread_to_ready_q(_idle_thread);
    3154:	68 80 50 40 00       	push   $0x405080
    3159:	80 25 89 50 40 00 fb 	andb   $0xfb,0x405089
    3160:	e8 7c 00 00 00       	call   31e1 <_add_thread_to_ready_q>
{
	_kernel.nested = 0;
	_kernel.irq_stack = K_THREAD_STACK_BUFFER(_interrupt_stack) +
				CONFIG_ISR_STACK_SIZE;
#if CONFIG_X86_STACK_PROTECTION
	_x86_mmu_set_flags(_interrupt_stack, MMU_PAGE_SIZE,
    3165:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
    316c:	6a 00                	push   $0x0
    316e:	68 00 10 00 00       	push   $0x1000
    3173:	68 00 b0 40 00       	push   $0x40b000
	list->head = (sys_dnode_t *)list;
    3178:	c7 05 0c 51 40 00 0c 	movl   $0x40510c,0x40510c
    317f:	51 40 00 
	list->tail = (sys_dnode_t *)list;
    3182:	c7 05 10 51 40 00 0c 	movl   $0x40510c,0x405110
    3189:	51 40 00 
	_kernel.nested = 0;
    318c:	c7 05 00 51 40 00 00 	movl   $0x0,0x405100
    3193:	00 00 00 
	_kernel.irq_stack = K_THREAD_STACK_BUFFER(_interrupt_stack) +
    3196:	c7 05 04 51 40 00 00 	movl   $0x40c800,0x405104
    319d:	c8 40 00 
	_x86_mmu_set_flags(_interrupt_stack, MMU_PAGE_SIZE,
    31a0:	e8 16 fa ff ff       	call   2bbb <_x86_mmu_set_flags>
    31a5:	83 c4 10             	add    $0x10,%esp
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    31a8:	6a 00                	push   $0x0
    31aa:	e8 70 fe ff ff       	call   301f <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    31af:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
    31b6:	e8 64 fe ff ff       	call   301f <_sys_device_do_config_level>
    31bb:	58                   	pop    %eax
	__asm__ volatile (
    31bc:	9c                   	pushf  
    31bd:	fa                   	cli    
    31be:	5b                   	pop    %ebx

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    31bf:	e8 f3 01 00 00       	call   33b7 <_update_time_slice_before_swap>
#endif

	return __swap(key);
    31c4:	53                   	push   %ebx
    31c5:	e8 0a f9 ff ff       	call   2ad4 <__swap>
    31ca:	5a                   	pop    %edx

000031cb <_get_highest_ready_prio>:
{
    31cb:	55                   	push   %ebp
    31cc:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
    31ce:	0f bc 05 18 51 40 00 	bsf    0x405118,%eax
    31d5:	75 05                	jne    31dc <_get_highest_ready_prio+0x11>
    31d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return abs_prio - _NUM_COOP_PRIO;
    31dc:	83 e8 10             	sub    $0x10,%eax
}
    31df:	5d                   	pop    %ebp
    31e0:	c3                   	ret    

000031e1 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    31e1:	55                   	push   %ebp
    31e2:	89 e5                	mov    %esp,%ebp
    31e4:	56                   	push   %esi
    31e5:	53                   	push   %ebx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    31e6:	bb 01 00 00 00       	mov    $0x1,%ebx
    31eb:	8b 45 08             	mov    0x8(%ebp),%eax
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    31ee:	0f be 50 0a          	movsbl 0xa(%eax),%edx
	return prio + _NUM_COOP_PRIO;
    31f2:	8d 4a 10             	lea    0x10(%edx),%ecx
	sys_dlist_t *q = &_ready_q.q[q_index];
    31f5:	83 c2 12             	add    $0x12,%edx
	return (prio + _NUM_COOP_PRIO) >> 5;
    31f8:	89 ce                	mov    %ecx,%esi
    31fa:	c1 fe 05             	sar    $0x5,%esi
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    31fd:	d3 e3                	shl    %cl,%ebx
    31ff:	8d 0c d5 0c 51 40 00 	lea    0x40510c(,%edx,8),%ecx
	*bmap |= _get_ready_q_prio_bit(prio);
    3206:	09 1c b5 18 51 40 00 	or     %ebx,0x405118(,%esi,4)
	sys_dlist_t *q = &_ready_q.q[q_index];
    320d:	89 08                	mov    %ecx,(%eax)
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
	node->prev = list->tail;
    320f:	8b 0c d5 10 51 40 00 	mov    0x405110(,%edx,8),%ecx
    3216:	89 48 04             	mov    %ecx,0x4(%eax)

	list->tail->next = node;
    3219:	8b 0c d5 10 51 40 00 	mov    0x405110(,%edx,8),%ecx
    3220:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
    3222:	89 04 d5 10 51 40 00 	mov    %eax,0x405110(,%edx,8)
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    3229:	8b 15 14 51 40 00    	mov    0x405114,%edx
    322f:	8a 5a 0a             	mov    0xa(%edx),%bl
    3232:	38 58 0a             	cmp    %bl,0xa(%eax)
    3235:	7c 02                	jl     3239 <_add_thread_to_ready_q+0x58>
    3237:	89 d0                	mov    %edx,%eax
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
    3239:	5b                   	pop    %ebx
	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    323a:	a3 14 51 40 00       	mov    %eax,0x405114
}
    323f:	5e                   	pop    %esi
    3240:	5d                   	pop    %ebp
    3241:	c3                   	ret    

00003242 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    3242:	55                   	push   %ebp
    3243:	89 e5                	mov    %esp,%ebp
    3245:	53                   	push   %ebx
    3246:	8b 45 08             	mov    0x8(%ebp),%eax
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3249:	8b 48 04             	mov    0x4(%eax),%ecx
    324c:	8b 18                	mov    (%eax),%ebx
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    324e:	0f be 50 0a          	movsbl 0xa(%eax),%edx
    3252:	89 19                	mov    %ebx,(%ecx)
	node->next->prev = node->prev;
    3254:	8b 18                	mov    (%eax),%ebx
    3256:	89 4b 04             	mov    %ecx,0x4(%ebx)
	sys_dlist_t *q = &_ready_q.q[q_index];
    3259:	8d 0c d5 9c 51 40 00 	lea    0x40519c(,%edx,8),%ecx

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    3260:	3b 0c d5 9c 51 40 00 	cmp    0x40519c(,%edx,8),%ecx
    3267:	75 1c                	jne    3285 <_remove_thread_from_ready_q+0x43>
		_clear_ready_q_prio_bit(thread->base.prio);
    3269:	0f be 48 0a          	movsbl 0xa(%eax),%ecx
	return (prio + _NUM_COOP_PRIO) >> 5;
    326d:	83 c1 10             	add    $0x10,%ecx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    3270:	ba 01 00 00 00       	mov    $0x1,%edx
	return (prio + _NUM_COOP_PRIO) >> 5;
    3275:	89 cb                	mov    %ecx,%ebx
    3277:	c1 fb 05             	sar    $0x5,%ebx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    327a:	d3 e2                	shl    %cl,%edx
	*bmap &= ~_get_ready_q_prio_bit(prio);
    327c:	f7 d2                	not    %edx
    327e:	21 14 9d 18 51 40 00 	and    %edx,0x405118(,%ebx,4)
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    3285:	8b 15 14 51 40 00    	mov    0x405114,%edx
    328b:	39 d0                	cmp    %edx,%eax
    328d:	75 0c                	jne    329b <_remove_thread_from_ready_q+0x59>
	int prio = _get_highest_ready_prio();
    328f:	e8 37 ff ff ff       	call   31cb <_get_highest_ready_prio>
    3294:	8b 14 c5 9c 51 40 00 	mov    0x40519c(,%eax,8),%edx
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    329b:	5b                   	pop    %ebx
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    329c:	89 15 14 51 40 00    	mov    %edx,0x405114
}
    32a2:	5d                   	pop    %ebp
    32a3:	c3                   	ret    

000032a4 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    32a4:	55                   	push   %ebp

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    32a5:	a1 08 51 40 00       	mov    0x405108,%eax
{
    32aa:	89 e5                	mov    %esp,%ebp
	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    32ac:	0f be 50 0a          	movsbl 0xa(%eax),%edx
    32b0:	e8 16 ff ff ff       	call   31cb <_get_highest_ready_prio>
#else
	return 0;
#endif
}
    32b5:	5d                   	pop    %ebp
	return prio1 < prio2;
    32b6:	39 c2                	cmp    %eax,%edx
    32b8:	0f 9f c0             	setg   %al
    32bb:	0f b6 c0             	movzbl %al,%eax
    32be:	c3                   	ret    

000032bf <_reschedule_threads>:
{
    32bf:	55                   	push   %ebp
	return _is_preempt(_current) && __must_switch_threads();
    32c0:	a1 08 51 40 00       	mov    0x405108,%eax
    32c5:	89 e5                	mov    %esp,%ebp
    32c7:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
    32cc:	8b 4d 08             	mov    0x8(%ebp),%ecx
    32cf:	77 09                	ja     32da <_reschedule_threads+0x1b>
    32d1:	e8 ce ff ff ff       	call   32a4 <__must_switch_threads>
    32d6:	85 c0                	test   %eax,%eax
    32d8:	75 09                	jne    32e3 <_reschedule_threads+0x24>
    32da:	0f ba e1 09          	bt     $0x9,%ecx
    32de:	73 16                	jae    32f6 <_reschedule_threads+0x37>
	__asm__ volatile (
    32e0:	fb                   	sti    
}
    32e1:	eb 13                	jmp    32f6 <_reschedule_threads+0x37>
    32e3:	89 4d 08             	mov    %ecx,0x8(%ebp)
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    32e6:	c7 05 2c 52 40 00 00 	movl   $0x0,0x40522c
    32ed:	00 00 00 
}
    32f0:	5d                   	pop    %ebp
    32f1:	e9 de f7 ff ff       	jmp    2ad4 <__swap>
    32f6:	5d                   	pop    %ebp
    32f7:	c3                   	ret    

000032f8 <k_sched_unlock>:
{
    32f8:	55                   	push   %ebp
    32f9:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
    32fb:	9c                   	pushf  
    32fc:	fa                   	cli    
    32fd:	5a                   	pop    %edx
	++_current->base.sched_locked;
    32fe:	a1 08 51 40 00       	mov    0x405108,%eax
    3303:	fe 40 0b             	incb   0xb(%eax)
	_reschedule_threads(key);
    3306:	52                   	push   %edx
    3307:	e8 b3 ff ff ff       	call   32bf <_reschedule_threads>
    330c:	58                   	pop    %eax
}
    330d:	c9                   	leave  
    330e:	c3                   	ret    

0000330f <_move_thread_to_end_of_prio_q>:
{
    330f:	55                   	push   %ebp
    3310:	89 e5                	mov    %esp,%ebp
    3312:	56                   	push   %esi
    3313:	53                   	push   %ebx
    3314:	8b 45 08             	mov    0x8(%ebp),%eax
	int q_index = _get_ready_q_q_index(thread->base.prio);
    3317:	0f be 50 0a          	movsbl 0xa(%eax),%edx
	sys_dlist_t *q = &_ready_q.q[q_index];
    331b:	83 c2 12             	add    $0x12,%edx
    331e:	8d 0c d5 0c 51 40 00 	lea    0x40510c(,%edx,8),%ecx
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    3325:	3b 41 04             	cmp    0x4(%ecx),%eax
    3328:	74 44                	je     336e <_move_thread_to_end_of_prio_q+0x5f>
	node->prev->next = node->next;
    332a:	8b 58 04             	mov    0x4(%eax),%ebx
    332d:	8b 30                	mov    (%eax),%esi
    332f:	89 33                	mov    %esi,(%ebx)
	node->next->prev = node->prev;
    3331:	8b 30                	mov    (%eax),%esi
    3333:	89 5e 04             	mov    %ebx,0x4(%esi)
	node->next = list;
    3336:	89 08                	mov    %ecx,(%eax)
	node->prev = list->tail;
    3338:	8b 0c d5 10 51 40 00 	mov    0x405110(,%edx,8),%ecx
    333f:	89 48 04             	mov    %ecx,0x4(%eax)
	list->tail->next = node;
    3342:	8b 0c d5 10 51 40 00 	mov    0x405110(,%edx,8),%ecx
    3349:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
    334b:	89 04 d5 10 51 40 00 	mov    %eax,0x405110(,%edx,8)
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    3352:	8b 15 14 51 40 00    	mov    0x405114,%edx
    3358:	39 d0                	cmp    %edx,%eax
    335a:	75 0c                	jne    3368 <_move_thread_to_end_of_prio_q+0x59>
	int prio = _get_highest_ready_prio();
    335c:	e8 6a fe ff ff       	call   31cb <_get_highest_ready_prio>
    3361:	8b 14 c5 9c 51 40 00 	mov    0x40519c(,%eax,8),%edx
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    3368:	89 15 14 51 40 00    	mov    %edx,0x405114
}
    336e:	5b                   	pop    %ebx
    336f:	5e                   	pop    %esi
    3370:	5d                   	pop    %ebp
    3371:	c3                   	ret    

00003372 <k_current_get>:
{
    3372:	55                   	push   %ebp
}
    3373:	a1 08 51 40 00       	mov    0x405108,%eax
{
    3378:	89 e5                	mov    %esp,%ebp
}
    337a:	5d                   	pop    %ebp
    337b:	c3                   	ret    

0000337c <_is_thread_time_slicing>:
{
    337c:	55                   	push   %ebp
		return 0;
    337d:	31 c0                	xor    %eax,%eax
{
    337f:	89 e5                	mov    %esp,%ebp
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    3381:	83 3d 20 52 40 00 00 	cmpl   $0x0,0x405220
{
    3388:	8b 55 08             	mov    0x8(%ebp),%edx
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    338b:	7e 28                	jle    33b5 <_is_thread_time_slicing+0x39>
    338d:	3b 15 0c 3d 00 00    	cmp    0x3d0c,%edx
    3393:	74 20                	je     33b5 <_is_thread_time_slicing+0x39>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    3395:	0f be 52 0a          	movsbl 0xa(%edx),%edx
    3399:	39 15 1c 52 40 00    	cmp    %edx,0x40521c
    339f:	7f 14                	jg     33b5 <_is_thread_time_slicing+0x39>
	return list->head != list->tail;
    33a1:	8b 04 d5 a0 51 40 00 	mov    0x4051a0(,%edx,8),%eax
    33a8:	39 04 d5 9c 51 40 00 	cmp    %eax,0x40519c(,%edx,8)
    33af:	0f 95 c0             	setne  %al
    33b2:	0f b6 c0             	movzbl %al,%eax
}
    33b5:	5d                   	pop    %ebp
    33b6:	c3                   	ret    

000033b7 <_update_time_slice_before_swap>:
{
    33b7:	55                   	push   %ebp
	_time_slice_elapsed = 0;
    33b8:	c7 05 2c 52 40 00 00 	movl   $0x0,0x40522c
    33bf:	00 00 00 
{
    33c2:	89 e5                	mov    %esp,%ebp
}
    33c4:	5d                   	pop    %ebp
    33c5:	c3                   	ret    

000033c6 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    33c6:	55                   	push   %ebp
    33c7:	89 e5                	mov    %esp,%ebp
    33c9:	57                   	push   %edi
    33ca:	56                   	push   %esi
    33cb:	53                   	push   %ebx
    33cc:	83 ec 08             	sub    $0x8,%esp
    33cf:	8b 75 08             	mov    0x8(%ebp),%esi
    33d2:	9c                   	pushf  
    33d3:	fa                   	cli    
    33d4:	5f                   	pop    %edi

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    33d5:	8b 0d 30 52 40 00    	mov    0x405230,%ecx
    33db:	89 f0                	mov    %esi,%eax
    33dd:	8b 1d 34 52 40 00    	mov    0x405234,%ebx
    33e3:	99                   	cltd   
    33e4:	01 c8                	add    %ecx,%eax
    33e6:	11 da                	adc    %ebx,%edx
    33e8:	a3 30 52 40 00       	mov    %eax,0x405230
    33ed:	0f ba e7 09          	bt     $0x9,%edi
    33f1:	89 15 34 52 40 00    	mov    %edx,0x405234
    33f7:	73 01                	jae    33fa <_nano_sys_clock_tick_announce+0x34>
	__asm__ volatile (
    33f9:	fb                   	sti    
	list->head = (sys_dnode_t *)list;
    33fa:	8d 4d ec             	lea    -0x14(%ebp),%ecx
    33fd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
	list->tail = (sys_dnode_t *)list;
    3400:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	__asm__ volatile (
    3403:	9c                   	pushf  
    3404:	fa                   	cli    
    3405:	5b                   	pop    %ebx
	return list->head == list;
    3406:	a1 0c 51 40 00       	mov    0x40510c,%eax
    340b:	89 da                	mov    %ebx,%edx
	if (!head) {
    340d:	85 c0                	test   %eax,%eax
    340f:	74 07                	je     3418 <_nano_sys_clock_tick_announce+0x52>
    3411:	3d 0c 51 40 00       	cmp    $0x40510c,%eax
    3416:	75 09                	jne    3421 <_nano_sys_clock_tick_announce+0x5b>
    3418:	0f ba e3 09          	bt     $0x9,%ebx
    341c:	73 70                	jae    348e <_nano_sys_clock_tick_announce+0xc8>
	__asm__ volatile (
    341e:	fb                   	sti    
    341f:	eb 6d                	jmp    348e <_nano_sys_clock_tick_announce+0xc8>
	head->delta_ticks_from_prev -= ticks;
    3421:	29 70 10             	sub    %esi,0x10(%eax)
	_handling_timeouts = 1;
    3424:	c7 05 28 52 40 00 01 	movl   $0x1,0x405228
    342b:	00 00 00 
	while (timeout && timeout->delta_ticks_from_prev == 0) {
    342e:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
    3432:	75 3e                	jne    3472 <_nano_sys_clock_tick_announce+0xac>
	node->prev->next = node->next;
    3434:	8b 58 04             	mov    0x4(%eax),%ebx
    3437:	8b 38                	mov    (%eax),%edi
    3439:	0f ba e2 09          	bt     $0x9,%edx
    343d:	89 3b                	mov    %edi,(%ebx)
	node->next->prev = node->prev;
    343f:	8b 38                	mov    (%eax),%edi
    3441:	89 5f 04             	mov    %ebx,0x4(%edi)
	node->next = list->head;
    3444:	8b 5d ec             	mov    -0x14(%ebp),%ebx
    3447:	89 18                	mov    %ebx,(%eax)
	node->prev = list;
    3449:	89 48 04             	mov    %ecx,0x4(%eax)
	list->head->prev = node;
    344c:	8b 5d ec             	mov    -0x14(%ebp),%ebx
	list->head = node;
    344f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	list->head->prev = node;
    3452:	89 43 04             	mov    %eax,0x4(%ebx)
		timeout->delta_ticks_from_prev = _EXPIRED;
    3455:	c7 40 10 fe ff ff ff 	movl   $0xfffffffe,0x10(%eax)
    345c:	73 01                	jae    345f <_nano_sys_clock_tick_announce+0x99>
    345e:	fb                   	sti    
	__asm__ volatile (
    345f:	9c                   	pushf  
    3460:	fa                   	cli    
    3461:	5a                   	pop    %edx
	return list->head == list;
    3462:	a1 0c 51 40 00       	mov    0x40510c,%eax
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3467:	3d 0c 51 40 00       	cmp    $0x40510c,%eax
    346c:	74 04                	je     3472 <_nano_sys_clock_tick_announce+0xac>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
    346e:	85 c0                	test   %eax,%eax
    3470:	75 bc                	jne    342e <_nano_sys_clock_tick_announce+0x68>
    3472:	0f ba e2 09          	bt     $0x9,%edx
    3476:	73 01                	jae    3479 <_nano_sys_clock_tick_announce+0xb3>
	__asm__ volatile (
    3478:	fb                   	sti    
	return list->head == list;
    3479:	8b 45 ec             	mov    -0x14(%ebp),%eax

static inline void _handle_expired_timeouts(sys_dlist_t *expired)
{
	struct _timeout *timeout, *next;

	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    347c:	39 c8                	cmp    %ecx,%eax
    347e:	74 04                	je     3484 <_nano_sys_clock_tick_announce+0xbe>
    3480:	85 c0                	test   %eax,%eax
    3482:	75 62                	jne    34e6 <_nano_sys_clock_tick_announce+0x120>
	_handling_timeouts = 0;
    3484:	c7 05 28 52 40 00 00 	movl   $0x0,0x405228
    348b:	00 00 00 
	if (!_is_thread_time_slicing(_current)) {
    348e:	ff 35 08 51 40 00    	pushl  0x405108
    3494:	e8 e3 fe ff ff       	call   337c <_is_thread_time_slicing>
    3499:	59                   	pop    %ecx
    349a:	85 c0                	test   %eax,%eax
    349c:	0f 84 e3 00 00 00    	je     3585 <_nano_sys_clock_tick_announce+0x1bf>
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    34a2:	6b f6 0a             	imul   $0xa,%esi,%esi
	_time_slice_elapsed += __ticks_to_ms(ticks);
    34a5:	03 35 2c 52 40 00    	add    0x40522c,%esi
    34ab:	89 35 2c 52 40 00    	mov    %esi,0x40522c
	if (_time_slice_elapsed >= _time_slice_duration) {
    34b1:	3b 35 20 52 40 00    	cmp    0x405220,%esi
    34b7:	0f 8c c8 00 00 00    	jl     3585 <_nano_sys_clock_tick_announce+0x1bf>
		_time_slice_elapsed = 0;
    34bd:	c7 05 2c 52 40 00 00 	movl   $0x0,0x40522c
    34c4:	00 00 00 
	__asm__ volatile (
    34c7:	9c                   	pushf  
    34c8:	fa                   	cli    
    34c9:	5b                   	pop    %ebx
		_move_thread_to_end_of_prio_q(_current);
    34ca:	ff 35 08 51 40 00    	pushl  0x405108
    34d0:	e8 3a fe ff ff       	call   330f <_move_thread_to_end_of_prio_q>
    34d5:	5a                   	pop    %edx
    34d6:	0f ba e3 09          	bt     $0x9,%ebx
    34da:	0f 83 a5 00 00 00    	jae    3585 <_nano_sys_clock_tick_announce+0x1bf>
	__asm__ volatile (
    34e0:	fb                   	sti    
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    34e1:	e9 9f 00 00 00       	jmp    3585 <_nano_sys_clock_tick_announce+0x1bf>
    34e6:	31 db                	xor    %ebx,%ebx
	return (node == list->tail) ? NULL : node->next;
    34e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
    34eb:	74 54                	je     3541 <_nano_sys_clock_tick_announce+0x17b>
    34ed:	8b 18                	mov    (%eax),%ebx
    34ef:	eb 50                	jmp    3541 <_nano_sys_clock_tick_announce+0x17b>
	if (timeout_obj->wait_q) {
    34f1:	83 78 0c 00          	cmpl   $0x0,0xc(%eax)
    34f5:	74 17                	je     350e <_nano_sys_clock_tick_announce+0x148>
	node->prev->next = node->next;
    34f7:	8b 42 04             	mov    0x4(%edx),%eax
    34fa:	8b 0a                	mov    (%edx),%ecx
    34fc:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
    34fe:	8b 0a                	mov    (%edx),%ecx
    3500:	89 41 04             	mov    %eax,0x4(%ecx)
		thread->base.timeout.wait_q = NULL;
    3503:	c7 42 1c 00 00 00 00 	movl   $0x0,0x1c(%edx)
	thread->base.thread_state &= ~_THREAD_PENDING;
    350a:	80 62 09 fd          	andb   $0xfd,0x9(%edx)
	thread->base.thread_state &= ~_THREAD_PRESTART;
    350e:	8a 42 09             	mov    0x9(%edx),%al
    3511:	88 c1                	mov    %al,%cl
    3513:	83 e1 fb             	and    $0xfffffffb,%ecx
	return !(_is_thread_prevented_from_running(thread) ||
    3516:	a8 1b                	test   $0x1b,%al
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3518:	88 4a 09             	mov    %cl,0x9(%edx)
	return !(_is_thread_prevented_from_running(thread) ||
    351b:	74 43                	je     3560 <_nano_sys_clock_tick_announce+0x19a>
    351d:	0f ba e7 09          	bt     $0x9,%edi
    3521:	73 01                	jae    3524 <_nano_sys_clock_tick_announce+0x15e>
    3523:	fb                   	sti    
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    3524:	85 db                	test   %ebx,%ebx
    3526:	0f 84 58 ff ff ff    	je     3484 <_nano_sys_clock_tick_announce+0xbe>
    352c:	31 d2                	xor    %edx,%edx
	return (node == list->tail) ? NULL : node->next;
    352e:	39 5d f0             	cmp    %ebx,-0x10(%ebp)
    3531:	74 02                	je     3535 <_nano_sys_clock_tick_announce+0x16f>
    3533:	8b 13                	mov    (%ebx),%edx
    3535:	85 db                	test   %ebx,%ebx
    3537:	0f 84 47 ff ff ff    	je     3484 <_nano_sys_clock_tick_announce+0xbe>
    353d:	89 d8                	mov    %ebx,%eax
    353f:	89 d3                	mov    %edx,%ebx
	node->prev->next = node->next;
    3541:	8b 50 04             	mov    0x4(%eax),%edx
    3544:	8b 08                	mov    (%eax),%ecx
    3546:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
    3548:	8b 08                	mov    (%eax),%ecx
    354a:	89 51 04             	mov    %edx,0x4(%ecx)
	struct k_thread *thread = timeout->thread;
    354d:	8b 50 08             	mov    0x8(%eax),%edx
	__asm__ volatile (
    3550:	9c                   	pushf  
    3551:	fa                   	cli    
    3552:	5f                   	pop    %edi
	timeout->delta_ticks_from_prev = _INACTIVE;
    3553:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	if (thread) {
    355a:	85 d2                	test   %edx,%edx
    355c:	75 93                	jne    34f1 <_nano_sys_clock_tick_announce+0x12b>
    355e:	eb 08                	jmp    3568 <_nano_sys_clock_tick_announce+0x1a2>
    3560:	83 7a 20 ff          	cmpl   $0xffffffff,0x20(%edx)
    3564:	75 b7                	jne    351d <_nano_sys_clock_tick_announce+0x157>
    3566:	eb 14                	jmp    357c <_nano_sys_clock_tick_announce+0x1b6>
    3568:	0f ba e7 09          	bt     $0x9,%edi
    356c:	73 01                	jae    356f <_nano_sys_clock_tick_announce+0x1a9>
	__asm__ volatile (
    356e:	fb                   	sti    
		if (timeout->func) {
    356f:	8b 50 14             	mov    0x14(%eax),%edx
    3572:	85 d2                	test   %edx,%edx
    3574:	74 ae                	je     3524 <_nano_sys_clock_tick_announce+0x15e>
			timeout->func(timeout);
    3576:	50                   	push   %eax
    3577:	ff d2                	call   *%edx
    3579:	5f                   	pop    %edi
    357a:	eb a8                	jmp    3524 <_nano_sys_clock_tick_announce+0x15e>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    357c:	52                   	push   %edx
    357d:	e8 5f fc ff ff       	call   31e1 <_add_thread_to_ready_q>
    3582:	58                   	pop    %eax
    3583:	eb 98                	jmp    351d <_nano_sys_clock_tick_announce+0x157>
    3585:	8d 65 f4             	lea    -0xc(%ebp),%esp
    3588:	5b                   	pop    %ebx
    3589:	5e                   	pop    %esi
    358a:	5f                   	pop    %edi
    358b:	5d                   	pop    %ebp
    358c:	c3                   	ret    

0000358d <_is_thread_ready>:
{
    358d:	55                   	push   %ebp
    358e:	89 e5                	mov    %esp,%ebp
	return !(_is_thread_prevented_from_running(thread) ||
    3590:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
    3594:	75 09                	jne    359f <_is_thread_ready+0x12>
    3596:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
    359a:	0f 94 c0             	sete   %al
    359d:	eb 02                	jmp    35a1 <_is_thread_ready+0x14>
    359f:	31 c0                	xor    %eax,%eax
    35a1:	0f b6 c0             	movzbl %al,%eax
}
    35a4:	5d                   	pop    %ebp
    35a5:	c3                   	ret    

000035a6 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    35a6:	55                   	push   %ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    35a7:	8b 48 10             	mov    0x10(%eax),%ecx
{
    35aa:	89 e5                	mov    %esp,%ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    35ac:	83 f9 ff             	cmp    $0xffffffff,%ecx
    35af:	74 24                	je     35d5 <_abort_timeout+0x2f>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    35b1:	3b 05 10 51 40 00    	cmp    0x405110,%eax
    35b7:	74 05                	je     35be <_abort_timeout+0x18>
	return (node == list->tail) ? NULL : node->next;
    35b9:	8b 10                	mov    (%eax),%edx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    35bb:	01 4a 10             	add    %ecx,0x10(%edx)
	node->prev->next = node->next;
    35be:	8b 50 04             	mov    0x4(%eax),%edx
    35c1:	8b 08                	mov    (%eax),%ecx
    35c3:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
    35c5:	8b 08                	mov    (%eax),%ecx
    35c7:	89 51 04             	mov    %edx,0x4(%ecx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    35ca:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)

	return 0;
    35d1:	31 c0                	xor    %eax,%eax
    35d3:	eb 03                	jmp    35d8 <_abort_timeout+0x32>
		return _INACTIVE;
    35d5:	83 c8 ff             	or     $0xffffffff,%eax
}
    35d8:	5d                   	pop    %ebp
    35d9:	c3                   	ret    

000035da <k_is_in_isr>:
	     thread_data < _static_thread_data_list_end; \
	     thread_data++)


int k_is_in_isr(void)
{
    35da:	55                   	push   %ebp
	return _is_in_isr();
    35db:	31 c0                	xor    %eax,%eax
{
    35dd:	89 e5                	mov    %esp,%ebp
}
    35df:	5d                   	pop    %ebp
	return _is_in_isr();
    35e0:	83 3d 00 51 40 00 00 	cmpl   $0x0,0x405100
    35e7:	0f 95 c0             	setne  %al
}
    35ea:	c3                   	ret    

000035eb <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
    35eb:	a1 08 51 40 00       	mov    0x405108,%eax
{
    35f0:	55                   	push   %ebp
    35f1:	89 e5                	mov    %esp,%ebp
}
    35f3:	5d                   	pop    %ebp
	return _current->base.user_options & K_ESSENTIAL;
    35f4:	8a 40 08             	mov    0x8(%eax),%al
    35f7:	83 e0 01             	and    $0x1,%eax
}
    35fa:	c3                   	ret    

000035fb <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
    35fb:	55                   	push   %ebp
    35fc:	89 e5                	mov    %esp,%ebp
	entry(p1, p2, p3);
    35fe:	ff 75 14             	pushl  0x14(%ebp)
    3601:	ff 75 10             	pushl  0x10(%ebp)
    3604:	ff 75 0c             	pushl  0xc(%ebp)
    3607:	ff 55 08             	call   *0x8(%ebp)
    360a:	83 c4 0c             	add    $0xc,%esp

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
    360d:	e8 d9 ff ff ff       	call   35eb <_is_thread_essential>
    3612:	85 c0                	test   %eax,%eax
    3614:	74 04                	je     361a <_thread_entry+0x1f>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
    3616:	6a 03                	push   $0x3
    3618:	cd 21                	int    $0x21
	}

	k_thread_abort(_current);
    361a:	ff 35 08 51 40 00    	pushl  0x405108
    3620:	e8 ef 01 00 00       	call   3814 <k_thread_abort>
    3625:	58                   	pop    %eax

00003626 <schedule_new_thread>:
}
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
    3626:	55                   	push   %ebp
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    3627:	85 d2                	test   %edx,%edx
{
    3629:	89 e5                	mov    %esp,%ebp
    362b:	57                   	push   %edi
    362c:	56                   	push   %esi
    362d:	53                   	push   %ebx
    362e:	51                   	push   %ecx
    362f:	89 c1                	mov    %eax,%ecx
	if (delay == 0) {
    3631:	75 46                	jne    3679 <schedule_new_thread+0x53>
	__asm__ volatile (
    3633:	9c                   	pushf  
    3634:	fa                   	cli    
    3635:	5b                   	pop    %ebx
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3636:	80 60 09 fb          	andb   $0xfb,0x9(%eax)
	if (_is_thread_ready(thread)) {
    363a:	e8 4e ff ff ff       	call   358d <_is_thread_ready>
    363f:	85 c0                	test   %eax,%eax
    3641:	75 09                	jne    364c <schedule_new_thread+0x26>
    3643:	0f ba e3 09          	bt     $0x9,%ebx
    3647:	e9 b6 00 00 00       	jmp    3702 <schedule_new_thread+0xdc>
		_add_thread_to_ready_q(thread);
    364c:	51                   	push   %ecx
    364d:	e8 8f fb ff ff       	call   31e1 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    3652:	a1 08 51 40 00       	mov    0x405108,%eax
    3657:	5a                   	pop    %edx
    3658:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
    365d:	77 e4                	ja     3643 <schedule_new_thread+0x1d>
    365f:	e8 40 fc ff ff       	call   32a4 <__must_switch_threads>
    3664:	85 c0                	test   %eax,%eax
    3666:	74 db                	je     3643 <schedule_new_thread+0x1d>
	_update_time_slice_before_swap();
    3668:	e8 4a fd ff ff       	call   33b7 <_update_time_slice_before_swap>
	return __swap(key);
    366d:	53                   	push   %ebx
    366e:	e8 61 f4 ff ff       	call   2ad4 <__swap>
    3673:	58                   	pop    %eax
    3674:	e9 8c 00 00 00       	jmp    3705 <schedule_new_thread+0xdf>
    3679:	9c                   	pushf  
    367a:	fa                   	cli    
    367b:	8f 45 f0             	popl   -0x10(%ebp)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    367e:	be 0a 00 00 00       	mov    $0xa,%esi

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    3683:	8d 58 10             	lea    0x10(%eax),%ebx
    3686:	8d 42 09             	lea    0x9(%edx),%eax
    3689:	31 d2                	xor    %edx,%edx
    368b:	f7 f6                	div    %esi
		start_thread(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    368d:	40                   	inc    %eax
	timeout->thread = thread;
    368e:	89 49 18             	mov    %ecx,0x18(%ecx)
    3691:	89 41 20             	mov    %eax,0x20(%ecx)
	return list->head == list;
    3694:	a1 0c 51 40 00       	mov    0x40510c,%eax
	timeout->wait_q = (sys_dlist_t *)wait_q;
    3699:	c7 41 1c 00 00 00 00 	movl   $0x0,0x1c(%ecx)
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    36a0:	85 c0                	test   %eax,%eax
    36a2:	74 0d                	je     36b1 <schedule_new_thread+0x8b>
    36a4:	8b 3d 10 51 40 00    	mov    0x405110,%edi
    36aa:	3d 0c 51 40 00       	cmp    $0x40510c,%eax
    36af:	75 19                	jne    36ca <schedule_new_thread+0xa4>
	node->next = list;
    36b1:	c7 41 10 0c 51 40 00 	movl   $0x40510c,0x10(%ecx)
	node->prev = list->tail;
    36b8:	a1 10 51 40 00       	mov    0x405110,%eax
    36bd:	89 41 14             	mov    %eax,0x14(%ecx)
	list->tail->next = node;
    36c0:	89 18                	mov    %ebx,(%eax)
	list->tail = node;
    36c2:	89 1d 10 51 40 00    	mov    %ebx,0x405110
    36c8:	eb 31                	jmp    36fb <schedule_new_thread+0xd5>
		if (*delta <= in_q->delta_ticks_from_prev) {
    36ca:	8b 51 20             	mov    0x20(%ecx),%edx
    36cd:	8b 70 10             	mov    0x10(%eax),%esi
    36d0:	39 f2                	cmp    %esi,%edx
    36d2:	7f 18                	jg     36ec <schedule_new_thread+0xc6>
			in_q->delta_ticks_from_prev -= *delta;
    36d4:	29 d6                	sub    %edx,%esi
		node->prev = insert_point->prev;
    36d6:	8b 50 04             	mov    0x4(%eax),%edx
    36d9:	89 70 10             	mov    %esi,0x10(%eax)
    36dc:	89 51 14             	mov    %edx,0x14(%ecx)
		node->next = insert_point;
    36df:	89 41 10             	mov    %eax,0x10(%ecx)
		insert_point->prev->next = node;
    36e2:	8b 50 04             	mov    0x4(%eax),%edx
    36e5:	89 1a                	mov    %ebx,(%edx)
		insert_point->prev = node;
    36e7:	89 58 04             	mov    %ebx,0x4(%eax)
    36ea:	eb 0f                	jmp    36fb <schedule_new_thread+0xd5>
		*delta -= in_q->delta_ticks_from_prev;
    36ec:	29 f2                	sub    %esi,%edx
	return (node == list->tail) ? NULL : node->next;
    36ee:	39 f8                	cmp    %edi,%eax
    36f0:	89 51 20             	mov    %edx,0x20(%ecx)
    36f3:	74 bc                	je     36b1 <schedule_new_thread+0x8b>
    36f5:	8b 00                	mov    (%eax),%eax
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    36f7:	85 c0                	test   %eax,%eax
    36f9:	eb b4                	jmp    36af <schedule_new_thread+0x89>
    36fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
    36fe:	0f ba e0 09          	bt     $0x9,%eax
    3702:	73 01                	jae    3705 <schedule_new_thread+0xdf>
	__asm__ volatile (
    3704:	fb                   	sti    
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
    3705:	8d 65 f4             	lea    -0xc(%ebp),%esp
    3708:	5b                   	pop    %ebx
    3709:	5e                   	pop    %esi
    370a:	5f                   	pop    %edi
    370b:	5d                   	pop    %ebp
    370c:	c3                   	ret    

0000370d <_k_thread_single_abort>:

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    370d:	55                   	push   %ebp
    370e:	89 e5                	mov    %esp,%ebp
    3710:	53                   	push   %ebx
    3711:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (thread->fn_abort != NULL) {
    3714:	8b 43 30             	mov    0x30(%ebx),%eax
    3717:	85 c0                	test   %eax,%eax
    3719:	74 02                	je     371d <_k_thread_single_abort+0x10>
		thread->fn_abort();
    371b:	ff d0                	call   *%eax
	}

	if (_is_thread_ready(thread)) {
    371d:	89 d8                	mov    %ebx,%eax
    371f:	e8 69 fe ff ff       	call   358d <_is_thread_ready>
    3724:	85 c0                	test   %eax,%eax
    3726:	74 09                	je     3731 <_k_thread_single_abort+0x24>
		_remove_thread_from_ready_q(thread);
    3728:	53                   	push   %ebx
    3729:	e8 14 fb ff ff       	call   3242 <_remove_thread_from_ready_q>
    372e:	58                   	pop    %eax
    372f:	eb 24                	jmp    3755 <_k_thread_single_abort+0x48>
	} else {
		if (_is_thread_pending(thread)) {
    3731:	f6 43 09 02          	testb  $0x2,0x9(%ebx)
    3735:	74 10                	je     3747 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    3737:	8b 43 04             	mov    0x4(%ebx),%eax
    373a:	8b 13                	mov    (%ebx),%edx
    373c:	89 10                	mov    %edx,(%eax)
	node->next->prev = node->prev;
    373e:	8b 13                	mov    (%ebx),%edx
    3740:	89 42 04             	mov    %eax,0x4(%edx)
	thread->base.thread_state &= ~_THREAD_PENDING;
    3743:	80 63 09 fd          	andb   $0xfd,0x9(%ebx)
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
    3747:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
    374b:	74 08                	je     3755 <_k_thread_single_abort+0x48>
	return _abort_timeout(&thread->base.timeout);
    374d:	8d 43 10             	lea    0x10(%ebx),%eax
    3750:	e8 51 fe ff ff       	call   35a6 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
    3755:	80 4b 09 08          	orb    $0x8,0x9(%ebx)
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
    3759:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    375c:	c9                   	leave  
    375d:	c3                   	ret    

0000375e <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    375e:	55                   	push   %ebp
    375f:	89 e5                	mov    %esp,%ebp
    3761:	56                   	push   %esi
    3762:	53                   	push   %ebx
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    3763:	bb 60 50 40 00       	mov    $0x405060,%ebx
    3768:	81 fb 60 50 40 00    	cmp    $0x405060,%ebx
    376e:	73 2c                	jae    379c <_init_static_threads+0x3e>
		_new_thread(
    3770:	ff 73 20             	pushl  0x20(%ebx)
    3773:	ff 73 1c             	pushl  0x1c(%ebx)
    3776:	ff 73 18             	pushl  0x18(%ebx)
    3779:	ff 73 14             	pushl  0x14(%ebx)
    377c:	ff 73 10             	pushl  0x10(%ebx)
    377f:	ff 73 0c             	pushl  0xc(%ebx)
    3782:	ff 73 08             	pushl  0x8(%ebx)
    3785:	ff 73 04             	pushl  0x4(%ebx)
    3788:	ff 33                	pushl  (%ebx)
    378a:	e8 6e f3 ff ff       	call   2afd <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
    378f:	8b 03                	mov    (%ebx),%eax
		_new_thread(
    3791:	83 c4 24             	add    $0x24,%esp
		thread_data->init_thread->init_data = thread_data;
    3794:	89 58 2c             	mov    %ebx,0x2c(%eax)
	_FOREACH_STATIC_THREAD(thread_data) {
    3797:	83 c3 30             	add    $0x30,%ebx
    379a:	eb cc                	jmp    3768 <_init_static_threads+0xa>
	--_current->base.sched_locked;
    379c:	a1 08 51 40 00       	mov    0x405108,%eax
    37a1:	fe 48 0b             	decb   0xb(%eax)
	__asm__ volatile (
    37a4:	9c                   	pushf  
    37a5:	fa                   	cli    
    37a6:	5e                   	pop    %esi
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    37a7:	bb 60 50 40 00       	mov    $0x405060,%ebx
    37ac:	81 fb 60 50 40 00    	cmp    $0x405060,%ebx
    37b2:	73 14                	jae    37c8 <_init_static_threads+0x6a>
		if (thread_data->init_delay != K_FOREVER) {
    37b4:	8b 53 24             	mov    0x24(%ebx),%edx
    37b7:	83 fa ff             	cmp    $0xffffffff,%edx
    37ba:	74 07                	je     37c3 <_init_static_threads+0x65>
			schedule_new_thread(thread_data->init_thread,
    37bc:	8b 03                	mov    (%ebx),%eax
    37be:	e8 63 fe ff ff       	call   3626 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    37c3:	83 c3 30             	add    $0x30,%ebx
    37c6:	eb e4                	jmp    37ac <_init_static_threads+0x4e>
    37c8:	0f ba e6 09          	bt     $0x9,%esi
    37cc:	73 01                	jae    37cf <_init_static_threads+0x71>
	__asm__ volatile (
    37ce:	fb                   	sti    
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    37cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
    37d2:	5b                   	pop    %ebx
    37d3:	5e                   	pop    %esi
    37d4:	5d                   	pop    %ebp
	k_sched_unlock();
    37d5:	e9 1e fb ff ff       	jmp    32f8 <k_sched_unlock>

000037da <_init_thread_base>:
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
    37da:	55                   	push   %ebp
    37db:	89 e5                	mov    %esp,%ebp
    37dd:	8b 45 08             	mov    0x8(%ebp),%eax
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    37e0:	8b 55 14             	mov    0x14(%ebp),%edx
    37e3:	88 50 08             	mov    %dl,0x8(%eax)
	thread_base->thread_state = (u8_t)initial_state;
    37e6:	8b 55 10             	mov    0x10(%ebp),%edx
    37e9:	88 50 09             	mov    %dl,0x9(%eax)

	thread_base->prio = priority;
    37ec:	8b 55 0c             	mov    0xc(%ebp),%edx
    37ef:	88 50 0a             	mov    %dl,0xa(%eax)

	thread_base->sched_locked = 0;
    37f2:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	t->delta_ticks_from_prev = _INACTIVE;
    37f6:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%eax)
	t->wait_q = NULL;
    37fd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	t->thread = NULL;
    3804:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	t->func = func;
    380b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    3812:	5d                   	pop    %ebp
    3813:	c3                   	ret    

00003814 <k_thread_abort>:

extern void _k_thread_single_abort(struct k_thread *thread);

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void k_thread_abort(k_tid_t thread)
{
    3814:	55                   	push   %ebp
    3815:	89 e5                	mov    %esp,%ebp
    3817:	56                   	push   %esi
    3818:	53                   	push   %ebx
    3819:	8b 75 08             	mov    0x8(%ebp),%esi
	__asm__ volatile (
    381c:	9c                   	pushf  
    381d:	fa                   	cli    
    381e:	5b                   	pop    %ebx
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
    381f:	56                   	push   %esi
    3820:	e8 e8 fe ff ff       	call   370d <_k_thread_single_abort>
    3825:	5a                   	pop    %edx
	_thread_monitor_exit(thread);

	if (_current == thread) {
    3826:	3b 35 08 51 40 00    	cmp    0x405108,%esi
    382c:	75 0c                	jne    383a <k_thread_abort+0x26>
	_update_time_slice_before_swap();
    382e:	e8 84 fb ff ff       	call   33b7 <_update_time_slice_before_swap>
	return __swap(key);
    3833:	53                   	push   %ebx
    3834:	e8 9b f2 ff ff       	call   2ad4 <__swap>
    3839:	58                   	pop    %eax
		_Swap(key);
		CODE_UNREACHABLE;
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    383a:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
    383d:	8d 65 f8             	lea    -0x8(%ebp),%esp
    3840:	5b                   	pop    %ebx
    3841:	5e                   	pop    %esi
    3842:	5d                   	pop    %ebp
	_reschedule_threads(key);
    3843:	e9 77 fa ff ff       	jmp    32bf <_reschedule_threads>

00003848 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3848:	55                   	push   %ebp
    3849:	89 e5                	mov    %esp,%ebp
    384b:	9c                   	pushf  
    384c:	fa                   	cli    
    384d:	58                   	pop    %eax
	k_cpu_idle();
    384e:	e8 3b f1 ff ff       	call   298e <k_cpu_idle>
    3853:	eb f6                	jmp    384b <idle+0x3>

00003855 <_OffsetAbsSyms>:
    3855:	55                   	push   %ebp
    3856:	89 e5                	mov    %esp,%ebp
    3858:	5d                   	pop    %ebp
    3859:	c3                   	ret    

0000385a <_handle_exc_0_vector_0_stub>:
    385a:	6a 00                	push   $0x0
    385c:	68 bc 2e 00 00       	push   $0x2ebc
    3861:	e9 c0 f1 ff ff       	jmp    2a26 <_exception_enter>

00003866 <_handle_exc_2_vector_2_stub>:
    3866:	6a 00                	push   $0x0
    3868:	68 c9 2e 00 00       	push   $0x2ec9
    386d:	e9 b4 f1 ff ff       	jmp    2a26 <_exception_enter>

00003872 <_handle_exc_4_vector_4_stub>:
    3872:	6a 00                	push   $0x0
    3874:	68 d9 2e 00 00       	push   $0x2ed9
    3879:	e9 a8 f1 ff ff       	jmp    2a26 <_exception_enter>

0000387e <_handle_exc_5_vector_5_stub>:
    387e:	6a 00                	push   $0x0
    3880:	68 e9 2e 00 00       	push   $0x2ee9
    3885:	e9 9c f1 ff ff       	jmp    2a26 <_exception_enter>

0000388a <_handle_exc_6_vector_6_stub>:
    388a:	6a 00                	push   $0x0
    388c:	68 f9 2e 00 00       	push   $0x2ef9
    3891:	e9 90 f1 ff ff       	jmp    2a26 <_exception_enter>

00003896 <_handle_exc_7_vector_7_stub>:
    3896:	6a 00                	push   $0x0
    3898:	68 09 2f 00 00       	push   $0x2f09
    389d:	e9 84 f1 ff ff       	jmp    2a26 <_exception_enter>

000038a2 <_handle_exc_10_vector_10_stub>:
    38a2:	68 19 2f 00 00       	push   $0x2f19
    38a7:	e9 7a f1 ff ff       	jmp    2a26 <_exception_enter>

000038ac <_handle_exc_11_vector_11_stub>:
    38ac:	68 29 2f 00 00       	push   $0x2f29
    38b1:	e9 70 f1 ff ff       	jmp    2a26 <_exception_enter>

000038b6 <_handle_exc_12_vector_12_stub>:
    38b6:	68 39 2f 00 00       	push   $0x2f39
    38bb:	e9 66 f1 ff ff       	jmp    2a26 <_exception_enter>

000038c0 <_handle_exc_13_vector_13_stub>:
    38c0:	68 49 2f 00 00       	push   $0x2f49
    38c5:	e9 5c f1 ff ff       	jmp    2a26 <_exception_enter>

000038ca <_handle_exc_16_vector_16_stub>:
    38ca:	6a 00                	push   $0x0
    38cc:	68 59 2f 00 00       	push   $0x2f59
    38d1:	e9 50 f1 ff ff       	jmp    2a26 <_exception_enter>

000038d6 <_handle_exc_17_vector_17_stub>:
    38d6:	68 69 2f 00 00       	push   $0x2f69
    38db:	e9 46 f1 ff ff       	jmp    2a26 <_exception_enter>

000038e0 <_handle_exc_18_vector_18_stub>:
    38e0:	6a 00                	push   $0x0
    38e2:	68 79 2f 00 00       	push   $0x2f79
    38e7:	e9 3a f1 ff ff       	jmp    2a26 <_exception_enter>

000038ec <_page_fault_handler_vector_14_stub>:
    38ec:	68 89 2f 00 00       	push   $0x2f89
    38f1:	e9 30 f1 ff ff       	jmp    2a26 <_exception_enter>
